
Temp_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d8  08009e98  08009e98  0000ae98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b070  0800b070  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b070  0800b070  0000d1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b070  0800b070  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b070  0800b070  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b074  0800b074  0000c074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b078  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  200001d4  0800b24c  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0800b24c  0000d704  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f97  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003433  00000000  00000000  00021193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000245c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d15  00000000  00000000  000256d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c78  00000000  00000000  000263e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c8e  00000000  00000000  0003f05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009158a  00000000  00000000  00057ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d68  00000000  00000000  000e92b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ee020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d4 	.word	0x200001d4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009e80 	.word	0x08009e80

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001d8 	.word	0x200001d8
 80000fc:	08009e80 	.word	0x08009e80

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ff69 	bl	800130c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fea9 	bl	800119c <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ff5b 	bl	800130c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ff51 	bl	800130c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fed3 	bl	8001224 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fec9 	bl	8001224 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_dadd>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	4657      	mov	r7, sl
 80004a4:	464e      	mov	r6, r9
 80004a6:	4645      	mov	r5, r8
 80004a8:	46de      	mov	lr, fp
 80004aa:	b5e0      	push	{r5, r6, r7, lr}
 80004ac:	b083      	sub	sp, #12
 80004ae:	9000      	str	r0, [sp, #0]
 80004b0:	9101      	str	r1, [sp, #4]
 80004b2:	030c      	lsls	r4, r1, #12
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	0fce      	lsrs	r6, r1, #31
 80004b8:	0a61      	lsrs	r1, r4, #9
 80004ba:	9c00      	ldr	r4, [sp, #0]
 80004bc:	031d      	lsls	r5, r3, #12
 80004be:	0f64      	lsrs	r4, r4, #29
 80004c0:	430c      	orrs	r4, r1
 80004c2:	9900      	ldr	r1, [sp, #0]
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	00c8      	lsls	r0, r1, #3
 80004ca:	0059      	lsls	r1, r3, #1
 80004cc:	0d4b      	lsrs	r3, r1, #21
 80004ce:	4699      	mov	r9, r3
 80004d0:	9a00      	ldr	r2, [sp, #0]
 80004d2:	9b01      	ldr	r3, [sp, #4]
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	0fd9      	lsrs	r1, r3, #31
 80004d8:	0f53      	lsrs	r3, r2, #29
 80004da:	432b      	orrs	r3, r5
 80004dc:	469a      	mov	sl, r3
 80004de:	9b00      	ldr	r3, [sp, #0]
 80004e0:	0d7f      	lsrs	r7, r7, #21
 80004e2:	00da      	lsls	r2, r3, #3
 80004e4:	4694      	mov	ip, r2
 80004e6:	464a      	mov	r2, r9
 80004e8:	46b0      	mov	r8, r6
 80004ea:	1aba      	subs	r2, r7, r2
 80004ec:	428e      	cmp	r6, r1
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x52>
 80004f0:	e0b0      	b.n	8000654 <__aeabi_dadd+0x1b4>
 80004f2:	2a00      	cmp	r2, #0
 80004f4:	dc00      	bgt.n	80004f8 <__aeabi_dadd+0x58>
 80004f6:	e078      	b.n	80005ea <__aeabi_dadd+0x14a>
 80004f8:	4649      	mov	r1, r9
 80004fa:	2900      	cmp	r1, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x60>
 80004fe:	e0e9      	b.n	80006d4 <__aeabi_dadd+0x234>
 8000500:	49c9      	ldr	r1, [pc, #804]	@ (8000828 <__aeabi_dadd+0x388>)
 8000502:	428f      	cmp	r7, r1
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x68>
 8000506:	e195      	b.n	8000834 <__aeabi_dadd+0x394>
 8000508:	2501      	movs	r5, #1
 800050a:	2a38      	cmp	r2, #56	@ 0x38
 800050c:	dc16      	bgt.n	800053c <__aeabi_dadd+0x9c>
 800050e:	2180      	movs	r1, #128	@ 0x80
 8000510:	4653      	mov	r3, sl
 8000512:	0409      	lsls	r1, r1, #16
 8000514:	430b      	orrs	r3, r1
 8000516:	469a      	mov	sl, r3
 8000518:	2a1f      	cmp	r2, #31
 800051a:	dd00      	ble.n	800051e <__aeabi_dadd+0x7e>
 800051c:	e1e7      	b.n	80008ee <__aeabi_dadd+0x44e>
 800051e:	2120      	movs	r1, #32
 8000520:	4655      	mov	r5, sl
 8000522:	1a8b      	subs	r3, r1, r2
 8000524:	4661      	mov	r1, ip
 8000526:	409d      	lsls	r5, r3
 8000528:	40d1      	lsrs	r1, r2
 800052a:	430d      	orrs	r5, r1
 800052c:	4661      	mov	r1, ip
 800052e:	4099      	lsls	r1, r3
 8000530:	1e4b      	subs	r3, r1, #1
 8000532:	4199      	sbcs	r1, r3
 8000534:	4653      	mov	r3, sl
 8000536:	40d3      	lsrs	r3, r2
 8000538:	430d      	orrs	r5, r1
 800053a:	1ae4      	subs	r4, r4, r3
 800053c:	1b45      	subs	r5, r0, r5
 800053e:	42a8      	cmp	r0, r5
 8000540:	4180      	sbcs	r0, r0
 8000542:	4240      	negs	r0, r0
 8000544:	1a24      	subs	r4, r4, r0
 8000546:	0223      	lsls	r3, r4, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0xac>
 800054a:	e10f      	b.n	800076c <__aeabi_dadd+0x2cc>
 800054c:	0264      	lsls	r4, r4, #9
 800054e:	0a64      	lsrs	r4, r4, #9
 8000550:	2c00      	cmp	r4, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xb6>
 8000554:	e139      	b.n	80007ca <__aeabi_dadd+0x32a>
 8000556:	0020      	movs	r0, r4
 8000558:	f001 ff2a 	bl	80023b0 <__clzsi2>
 800055c:	0003      	movs	r3, r0
 800055e:	3b08      	subs	r3, #8
 8000560:	2120      	movs	r1, #32
 8000562:	0028      	movs	r0, r5
 8000564:	1aca      	subs	r2, r1, r3
 8000566:	40d0      	lsrs	r0, r2
 8000568:	409c      	lsls	r4, r3
 800056a:	0002      	movs	r2, r0
 800056c:	409d      	lsls	r5, r3
 800056e:	4322      	orrs	r2, r4
 8000570:	429f      	cmp	r7, r3
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xd6>
 8000574:	e173      	b.n	800085e <__aeabi_dadd+0x3be>
 8000576:	1bd8      	subs	r0, r3, r7
 8000578:	3001      	adds	r0, #1
 800057a:	1a09      	subs	r1, r1, r0
 800057c:	002c      	movs	r4, r5
 800057e:	408d      	lsls	r5, r1
 8000580:	40c4      	lsrs	r4, r0
 8000582:	1e6b      	subs	r3, r5, #1
 8000584:	419d      	sbcs	r5, r3
 8000586:	0013      	movs	r3, r2
 8000588:	40c2      	lsrs	r2, r0
 800058a:	408b      	lsls	r3, r1
 800058c:	4325      	orrs	r5, r4
 800058e:	2700      	movs	r7, #0
 8000590:	0014      	movs	r4, r2
 8000592:	431d      	orrs	r5, r3
 8000594:	076b      	lsls	r3, r5, #29
 8000596:	d009      	beq.n	80005ac <__aeabi_dadd+0x10c>
 8000598:	230f      	movs	r3, #15
 800059a:	402b      	ands	r3, r5
 800059c:	2b04      	cmp	r3, #4
 800059e:	d005      	beq.n	80005ac <__aeabi_dadd+0x10c>
 80005a0:	1d2b      	adds	r3, r5, #4
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	41ad      	sbcs	r5, r5
 80005a6:	426d      	negs	r5, r5
 80005a8:	1964      	adds	r4, r4, r5
 80005aa:	001d      	movs	r5, r3
 80005ac:	0223      	lsls	r3, r4, #8
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_dadd+0x112>
 80005b0:	e12d      	b.n	800080e <__aeabi_dadd+0x36e>
 80005b2:	4a9d      	ldr	r2, [pc, #628]	@ (8000828 <__aeabi_dadd+0x388>)
 80005b4:	3701      	adds	r7, #1
 80005b6:	4297      	cmp	r7, r2
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x11c>
 80005ba:	e0d3      	b.n	8000764 <__aeabi_dadd+0x2c4>
 80005bc:	4646      	mov	r6, r8
 80005be:	499b      	ldr	r1, [pc, #620]	@ (800082c <__aeabi_dadd+0x38c>)
 80005c0:	08ed      	lsrs	r5, r5, #3
 80005c2:	4021      	ands	r1, r4
 80005c4:	074a      	lsls	r2, r1, #29
 80005c6:	432a      	orrs	r2, r5
 80005c8:	057c      	lsls	r4, r7, #21
 80005ca:	024d      	lsls	r5, r1, #9
 80005cc:	0b2d      	lsrs	r5, r5, #12
 80005ce:	0d64      	lsrs	r4, r4, #21
 80005d0:	0524      	lsls	r4, r4, #20
 80005d2:	432c      	orrs	r4, r5
 80005d4:	07f6      	lsls	r6, r6, #31
 80005d6:	4334      	orrs	r4, r6
 80005d8:	0010      	movs	r0, r2
 80005da:	0021      	movs	r1, r4
 80005dc:	b003      	add	sp, #12
 80005de:	bcf0      	pop	{r4, r5, r6, r7}
 80005e0:	46bb      	mov	fp, r7
 80005e2:	46b2      	mov	sl, r6
 80005e4:	46a9      	mov	r9, r5
 80005e6:	46a0      	mov	r8, r4
 80005e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x150>
 80005ee:	e084      	b.n	80006fa <__aeabi_dadd+0x25a>
 80005f0:	464a      	mov	r2, r9
 80005f2:	1bd2      	subs	r2, r2, r7
 80005f4:	2f00      	cmp	r7, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_dadd+0x15a>
 80005f8:	e16d      	b.n	80008d6 <__aeabi_dadd+0x436>
 80005fa:	0025      	movs	r5, r4
 80005fc:	4305      	orrs	r5, r0
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x162>
 8000600:	e127      	b.n	8000852 <__aeabi_dadd+0x3b2>
 8000602:	1e56      	subs	r6, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x16a>
 8000608:	e23b      	b.n	8000a82 <__aeabi_dadd+0x5e2>
 800060a:	4d87      	ldr	r5, [pc, #540]	@ (8000828 <__aeabi_dadd+0x388>)
 800060c:	42aa      	cmp	r2, r5
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x172>
 8000610:	e26a      	b.n	8000ae8 <__aeabi_dadd+0x648>
 8000612:	2501      	movs	r5, #1
 8000614:	2e38      	cmp	r6, #56	@ 0x38
 8000616:	dc12      	bgt.n	800063e <__aeabi_dadd+0x19e>
 8000618:	0032      	movs	r2, r6
 800061a:	2a1f      	cmp	r2, #31
 800061c:	dd00      	ble.n	8000620 <__aeabi_dadd+0x180>
 800061e:	e1f8      	b.n	8000a12 <__aeabi_dadd+0x572>
 8000620:	2620      	movs	r6, #32
 8000622:	0025      	movs	r5, r4
 8000624:	1ab6      	subs	r6, r6, r2
 8000626:	0007      	movs	r7, r0
 8000628:	4653      	mov	r3, sl
 800062a:	40b0      	lsls	r0, r6
 800062c:	40d4      	lsrs	r4, r2
 800062e:	40b5      	lsls	r5, r6
 8000630:	40d7      	lsrs	r7, r2
 8000632:	1e46      	subs	r6, r0, #1
 8000634:	41b0      	sbcs	r0, r6
 8000636:	1b1b      	subs	r3, r3, r4
 8000638:	469a      	mov	sl, r3
 800063a:	433d      	orrs	r5, r7
 800063c:	4305      	orrs	r5, r0
 800063e:	4662      	mov	r2, ip
 8000640:	1b55      	subs	r5, r2, r5
 8000642:	45ac      	cmp	ip, r5
 8000644:	4192      	sbcs	r2, r2
 8000646:	4653      	mov	r3, sl
 8000648:	4252      	negs	r2, r2
 800064a:	000e      	movs	r6, r1
 800064c:	464f      	mov	r7, r9
 800064e:	4688      	mov	r8, r1
 8000650:	1a9c      	subs	r4, r3, r2
 8000652:	e778      	b.n	8000546 <__aeabi_dadd+0xa6>
 8000654:	2a00      	cmp	r2, #0
 8000656:	dc00      	bgt.n	800065a <__aeabi_dadd+0x1ba>
 8000658:	e08e      	b.n	8000778 <__aeabi_dadd+0x2d8>
 800065a:	4649      	mov	r1, r9
 800065c:	2900      	cmp	r1, #0
 800065e:	d175      	bne.n	800074c <__aeabi_dadd+0x2ac>
 8000660:	4661      	mov	r1, ip
 8000662:	4653      	mov	r3, sl
 8000664:	4319      	orrs	r1, r3
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1ca>
 8000668:	e0f6      	b.n	8000858 <__aeabi_dadd+0x3b8>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1d2>
 8000670:	e191      	b.n	8000996 <__aeabi_dadd+0x4f6>
 8000672:	4d6d      	ldr	r5, [pc, #436]	@ (8000828 <__aeabi_dadd+0x388>)
 8000674:	42aa      	cmp	r2, r5
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1da>
 8000678:	e0dc      	b.n	8000834 <__aeabi_dadd+0x394>
 800067a:	2501      	movs	r5, #1
 800067c:	2938      	cmp	r1, #56	@ 0x38
 800067e:	dc14      	bgt.n	80006aa <__aeabi_dadd+0x20a>
 8000680:	000a      	movs	r2, r1
 8000682:	2a1f      	cmp	r2, #31
 8000684:	dd00      	ble.n	8000688 <__aeabi_dadd+0x1e8>
 8000686:	e1a2      	b.n	80009ce <__aeabi_dadd+0x52e>
 8000688:	2120      	movs	r1, #32
 800068a:	4653      	mov	r3, sl
 800068c:	1a89      	subs	r1, r1, r2
 800068e:	408b      	lsls	r3, r1
 8000690:	001d      	movs	r5, r3
 8000692:	4663      	mov	r3, ip
 8000694:	40d3      	lsrs	r3, r2
 8000696:	431d      	orrs	r5, r3
 8000698:	4663      	mov	r3, ip
 800069a:	408b      	lsls	r3, r1
 800069c:	0019      	movs	r1, r3
 800069e:	1e4b      	subs	r3, r1, #1
 80006a0:	4199      	sbcs	r1, r3
 80006a2:	4653      	mov	r3, sl
 80006a4:	40d3      	lsrs	r3, r2
 80006a6:	430d      	orrs	r5, r1
 80006a8:	18e4      	adds	r4, r4, r3
 80006aa:	182d      	adds	r5, r5, r0
 80006ac:	4285      	cmp	r5, r0
 80006ae:	4180      	sbcs	r0, r0
 80006b0:	4240      	negs	r0, r0
 80006b2:	1824      	adds	r4, r4, r0
 80006b4:	0223      	lsls	r3, r4, #8
 80006b6:	d559      	bpl.n	800076c <__aeabi_dadd+0x2cc>
 80006b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000828 <__aeabi_dadd+0x388>)
 80006ba:	3701      	adds	r7, #1
 80006bc:	429f      	cmp	r7, r3
 80006be:	d051      	beq.n	8000764 <__aeabi_dadd+0x2c4>
 80006c0:	2101      	movs	r1, #1
 80006c2:	4b5a      	ldr	r3, [pc, #360]	@ (800082c <__aeabi_dadd+0x38c>)
 80006c4:	086a      	lsrs	r2, r5, #1
 80006c6:	401c      	ands	r4, r3
 80006c8:	4029      	ands	r1, r5
 80006ca:	430a      	orrs	r2, r1
 80006cc:	07e5      	lsls	r5, r4, #31
 80006ce:	4315      	orrs	r5, r2
 80006d0:	0864      	lsrs	r4, r4, #1
 80006d2:	e75f      	b.n	8000594 <__aeabi_dadd+0xf4>
 80006d4:	4661      	mov	r1, ip
 80006d6:	4653      	mov	r3, sl
 80006d8:	4319      	orrs	r1, r3
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x23e>
 80006dc:	e0bc      	b.n	8000858 <__aeabi_dadd+0x3b8>
 80006de:	1e51      	subs	r1, r2, #1
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x246>
 80006e4:	e164      	b.n	80009b0 <__aeabi_dadd+0x510>
 80006e6:	4d50      	ldr	r5, [pc, #320]	@ (8000828 <__aeabi_dadd+0x388>)
 80006e8:	42aa      	cmp	r2, r5
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x24e>
 80006ec:	e16a      	b.n	80009c4 <__aeabi_dadd+0x524>
 80006ee:	2501      	movs	r5, #1
 80006f0:	2938      	cmp	r1, #56	@ 0x38
 80006f2:	dd00      	ble.n	80006f6 <__aeabi_dadd+0x256>
 80006f4:	e722      	b.n	800053c <__aeabi_dadd+0x9c>
 80006f6:	000a      	movs	r2, r1
 80006f8:	e70e      	b.n	8000518 <__aeabi_dadd+0x78>
 80006fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000830 <__aeabi_dadd+0x390>)
 80006fc:	1c7d      	adds	r5, r7, #1
 80006fe:	4215      	tst	r5, r2
 8000700:	d000      	beq.n	8000704 <__aeabi_dadd+0x264>
 8000702:	e0d0      	b.n	80008a6 <__aeabi_dadd+0x406>
 8000704:	0025      	movs	r5, r4
 8000706:	4662      	mov	r2, ip
 8000708:	4653      	mov	r3, sl
 800070a:	4305      	orrs	r5, r0
 800070c:	431a      	orrs	r2, r3
 800070e:	2f00      	cmp	r7, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_dadd+0x274>
 8000712:	e137      	b.n	8000984 <__aeabi_dadd+0x4e4>
 8000714:	2d00      	cmp	r5, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x27a>
 8000718:	e1a8      	b.n	8000a6c <__aeabi_dadd+0x5cc>
 800071a:	2a00      	cmp	r2, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x280>
 800071e:	e16a      	b.n	80009f6 <__aeabi_dadd+0x556>
 8000720:	4663      	mov	r3, ip
 8000722:	1ac5      	subs	r5, r0, r3
 8000724:	4653      	mov	r3, sl
 8000726:	1ae2      	subs	r2, r4, r3
 8000728:	42a8      	cmp	r0, r5
 800072a:	419b      	sbcs	r3, r3
 800072c:	425b      	negs	r3, r3
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	021a      	lsls	r2, r3, #8
 8000732:	d400      	bmi.n	8000736 <__aeabi_dadd+0x296>
 8000734:	e203      	b.n	8000b3e <__aeabi_dadd+0x69e>
 8000736:	4663      	mov	r3, ip
 8000738:	1a1d      	subs	r5, r3, r0
 800073a:	45ac      	cmp	ip, r5
 800073c:	4192      	sbcs	r2, r2
 800073e:	4653      	mov	r3, sl
 8000740:	4252      	negs	r2, r2
 8000742:	1b1c      	subs	r4, r3, r4
 8000744:	000e      	movs	r6, r1
 8000746:	4688      	mov	r8, r1
 8000748:	1aa4      	subs	r4, r4, r2
 800074a:	e723      	b.n	8000594 <__aeabi_dadd+0xf4>
 800074c:	4936      	ldr	r1, [pc, #216]	@ (8000828 <__aeabi_dadd+0x388>)
 800074e:	428f      	cmp	r7, r1
 8000750:	d070      	beq.n	8000834 <__aeabi_dadd+0x394>
 8000752:	2501      	movs	r5, #1
 8000754:	2a38      	cmp	r2, #56	@ 0x38
 8000756:	dca8      	bgt.n	80006aa <__aeabi_dadd+0x20a>
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	4653      	mov	r3, sl
 800075c:	0409      	lsls	r1, r1, #16
 800075e:	430b      	orrs	r3, r1
 8000760:	469a      	mov	sl, r3
 8000762:	e78e      	b.n	8000682 <__aeabi_dadd+0x1e2>
 8000764:	003c      	movs	r4, r7
 8000766:	2500      	movs	r5, #0
 8000768:	2200      	movs	r2, #0
 800076a:	e731      	b.n	80005d0 <__aeabi_dadd+0x130>
 800076c:	2307      	movs	r3, #7
 800076e:	402b      	ands	r3, r5
 8000770:	2b00      	cmp	r3, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x2d6>
 8000774:	e710      	b.n	8000598 <__aeabi_dadd+0xf8>
 8000776:	e093      	b.n	80008a0 <__aeabi_dadd+0x400>
 8000778:	2a00      	cmp	r2, #0
 800077a:	d074      	beq.n	8000866 <__aeabi_dadd+0x3c6>
 800077c:	464a      	mov	r2, r9
 800077e:	1bd2      	subs	r2, r2, r7
 8000780:	2f00      	cmp	r7, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x2e6>
 8000784:	e0c7      	b.n	8000916 <__aeabi_dadd+0x476>
 8000786:	4928      	ldr	r1, [pc, #160]	@ (8000828 <__aeabi_dadd+0x388>)
 8000788:	4589      	cmp	r9, r1
 800078a:	d100      	bne.n	800078e <__aeabi_dadd+0x2ee>
 800078c:	e185      	b.n	8000a9a <__aeabi_dadd+0x5fa>
 800078e:	2501      	movs	r5, #1
 8000790:	2a38      	cmp	r2, #56	@ 0x38
 8000792:	dc12      	bgt.n	80007ba <__aeabi_dadd+0x31a>
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	0409      	lsls	r1, r1, #16
 8000798:	430c      	orrs	r4, r1
 800079a:	2a1f      	cmp	r2, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0x300>
 800079e:	e1ab      	b.n	8000af8 <__aeabi_dadd+0x658>
 80007a0:	2120      	movs	r1, #32
 80007a2:	0025      	movs	r5, r4
 80007a4:	1a89      	subs	r1, r1, r2
 80007a6:	0007      	movs	r7, r0
 80007a8:	4088      	lsls	r0, r1
 80007aa:	408d      	lsls	r5, r1
 80007ac:	40d7      	lsrs	r7, r2
 80007ae:	1e41      	subs	r1, r0, #1
 80007b0:	4188      	sbcs	r0, r1
 80007b2:	40d4      	lsrs	r4, r2
 80007b4:	433d      	orrs	r5, r7
 80007b6:	4305      	orrs	r5, r0
 80007b8:	44a2      	add	sl, r4
 80007ba:	4465      	add	r5, ip
 80007bc:	4565      	cmp	r5, ip
 80007be:	4192      	sbcs	r2, r2
 80007c0:	4252      	negs	r2, r2
 80007c2:	4452      	add	r2, sl
 80007c4:	0014      	movs	r4, r2
 80007c6:	464f      	mov	r7, r9
 80007c8:	e774      	b.n	80006b4 <__aeabi_dadd+0x214>
 80007ca:	0028      	movs	r0, r5
 80007cc:	f001 fdf0 	bl	80023b0 <__clzsi2>
 80007d0:	0003      	movs	r3, r0
 80007d2:	3318      	adds	r3, #24
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	dc00      	bgt.n	80007da <__aeabi_dadd+0x33a>
 80007d8:	e6c2      	b.n	8000560 <__aeabi_dadd+0xc0>
 80007da:	002a      	movs	r2, r5
 80007dc:	3808      	subs	r0, #8
 80007de:	4082      	lsls	r2, r0
 80007e0:	429f      	cmp	r7, r3
 80007e2:	dd00      	ble.n	80007e6 <__aeabi_dadd+0x346>
 80007e4:	e0a9      	b.n	800093a <__aeabi_dadd+0x49a>
 80007e6:	1bdb      	subs	r3, r3, r7
 80007e8:	1c58      	adds	r0, r3, #1
 80007ea:	281f      	cmp	r0, #31
 80007ec:	dc00      	bgt.n	80007f0 <__aeabi_dadd+0x350>
 80007ee:	e1ac      	b.n	8000b4a <__aeabi_dadd+0x6aa>
 80007f0:	0015      	movs	r5, r2
 80007f2:	3b1f      	subs	r3, #31
 80007f4:	40dd      	lsrs	r5, r3
 80007f6:	2820      	cmp	r0, #32
 80007f8:	d005      	beq.n	8000806 <__aeabi_dadd+0x366>
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	1a1b      	subs	r3, r3, r0
 80007fe:	409a      	lsls	r2, r3
 8000800:	1e53      	subs	r3, r2, #1
 8000802:	419a      	sbcs	r2, r3
 8000804:	4315      	orrs	r5, r2
 8000806:	2307      	movs	r3, #7
 8000808:	2700      	movs	r7, #0
 800080a:	402b      	ands	r3, r5
 800080c:	e7b0      	b.n	8000770 <__aeabi_dadd+0x2d0>
 800080e:	08ed      	lsrs	r5, r5, #3
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <__aeabi_dadd+0x388>)
 8000812:	0762      	lsls	r2, r4, #29
 8000814:	432a      	orrs	r2, r5
 8000816:	08e4      	lsrs	r4, r4, #3
 8000818:	429f      	cmp	r7, r3
 800081a:	d00f      	beq.n	800083c <__aeabi_dadd+0x39c>
 800081c:	0324      	lsls	r4, r4, #12
 800081e:	0b25      	lsrs	r5, r4, #12
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	0d64      	lsrs	r4, r4, #21
 8000824:	e6d4      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	000007ff 	.word	0x000007ff
 800082c:	ff7fffff 	.word	0xff7fffff
 8000830:	000007fe 	.word	0x000007fe
 8000834:	08c0      	lsrs	r0, r0, #3
 8000836:	0762      	lsls	r2, r4, #29
 8000838:	4302      	orrs	r2, r0
 800083a:	08e4      	lsrs	r4, r4, #3
 800083c:	0013      	movs	r3, r2
 800083e:	4323      	orrs	r3, r4
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x3a4>
 8000842:	e186      	b.n	8000b52 <__aeabi_dadd+0x6b2>
 8000844:	2580      	movs	r5, #128	@ 0x80
 8000846:	032d      	lsls	r5, r5, #12
 8000848:	4325      	orrs	r5, r4
 800084a:	032d      	lsls	r5, r5, #12
 800084c:	4cc3      	ldr	r4, [pc, #780]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 800084e:	0b2d      	lsrs	r5, r5, #12
 8000850:	e6be      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000852:	4660      	mov	r0, ip
 8000854:	4654      	mov	r4, sl
 8000856:	000e      	movs	r6, r1
 8000858:	0017      	movs	r7, r2
 800085a:	08c5      	lsrs	r5, r0, #3
 800085c:	e7d8      	b.n	8000810 <__aeabi_dadd+0x370>
 800085e:	4cc0      	ldr	r4, [pc, #768]	@ (8000b60 <__aeabi_dadd+0x6c0>)
 8000860:	1aff      	subs	r7, r7, r3
 8000862:	4014      	ands	r4, r2
 8000864:	e696      	b.n	8000594 <__aeabi_dadd+0xf4>
 8000866:	4abf      	ldr	r2, [pc, #764]	@ (8000b64 <__aeabi_dadd+0x6c4>)
 8000868:	1c79      	adds	r1, r7, #1
 800086a:	4211      	tst	r1, r2
 800086c:	d16b      	bne.n	8000946 <__aeabi_dadd+0x4a6>
 800086e:	0022      	movs	r2, r4
 8000870:	4302      	orrs	r2, r0
 8000872:	2f00      	cmp	r7, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_dadd+0x3d8>
 8000876:	e0db      	b.n	8000a30 <__aeabi_dadd+0x590>
 8000878:	2a00      	cmp	r2, #0
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x3de>
 800087c:	e12d      	b.n	8000ada <__aeabi_dadd+0x63a>
 800087e:	4662      	mov	r2, ip
 8000880:	4653      	mov	r3, sl
 8000882:	431a      	orrs	r2, r3
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x3e8>
 8000886:	e0b6      	b.n	80009f6 <__aeabi_dadd+0x556>
 8000888:	4663      	mov	r3, ip
 800088a:	18c5      	adds	r5, r0, r3
 800088c:	4285      	cmp	r5, r0
 800088e:	4180      	sbcs	r0, r0
 8000890:	4454      	add	r4, sl
 8000892:	4240      	negs	r0, r0
 8000894:	1824      	adds	r4, r4, r0
 8000896:	0223      	lsls	r3, r4, #8
 8000898:	d502      	bpl.n	80008a0 <__aeabi_dadd+0x400>
 800089a:	000f      	movs	r7, r1
 800089c:	4bb0      	ldr	r3, [pc, #704]	@ (8000b60 <__aeabi_dadd+0x6c0>)
 800089e:	401c      	ands	r4, r3
 80008a0:	003a      	movs	r2, r7
 80008a2:	0028      	movs	r0, r5
 80008a4:	e7d8      	b.n	8000858 <__aeabi_dadd+0x3b8>
 80008a6:	4662      	mov	r2, ip
 80008a8:	1a85      	subs	r5, r0, r2
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	4192      	sbcs	r2, r2
 80008ae:	4653      	mov	r3, sl
 80008b0:	4252      	negs	r2, r2
 80008b2:	4691      	mov	r9, r2
 80008b4:	1ae3      	subs	r3, r4, r3
 80008b6:	001a      	movs	r2, r3
 80008b8:	464b      	mov	r3, r9
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	4691      	mov	r9, r2
 80008c0:	021a      	lsls	r2, r3, #8
 80008c2:	d454      	bmi.n	800096e <__aeabi_dadd+0x4ce>
 80008c4:	464a      	mov	r2, r9
 80008c6:	464c      	mov	r4, r9
 80008c8:	432a      	orrs	r2, r5
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x42e>
 80008cc:	e640      	b.n	8000550 <__aeabi_dadd+0xb0>
 80008ce:	2600      	movs	r6, #0
 80008d0:	2400      	movs	r4, #0
 80008d2:	2500      	movs	r5, #0
 80008d4:	e67c      	b.n	80005d0 <__aeabi_dadd+0x130>
 80008d6:	4da1      	ldr	r5, [pc, #644]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 80008d8:	45a9      	cmp	r9, r5
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x43e>
 80008dc:	e090      	b.n	8000a00 <__aeabi_dadd+0x560>
 80008de:	2501      	movs	r5, #1
 80008e0:	2a38      	cmp	r2, #56	@ 0x38
 80008e2:	dd00      	ble.n	80008e6 <__aeabi_dadd+0x446>
 80008e4:	e6ab      	b.n	800063e <__aeabi_dadd+0x19e>
 80008e6:	2580      	movs	r5, #128	@ 0x80
 80008e8:	042d      	lsls	r5, r5, #16
 80008ea:	432c      	orrs	r4, r5
 80008ec:	e695      	b.n	800061a <__aeabi_dadd+0x17a>
 80008ee:	0011      	movs	r1, r2
 80008f0:	4655      	mov	r5, sl
 80008f2:	3920      	subs	r1, #32
 80008f4:	40cd      	lsrs	r5, r1
 80008f6:	46a9      	mov	r9, r5
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d006      	beq.n	800090a <__aeabi_dadd+0x46a>
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	4653      	mov	r3, sl
 8000900:	1a8a      	subs	r2, r1, r2
 8000902:	4093      	lsls	r3, r2
 8000904:	4662      	mov	r2, ip
 8000906:	431a      	orrs	r2, r3
 8000908:	4694      	mov	ip, r2
 800090a:	4665      	mov	r5, ip
 800090c:	1e6b      	subs	r3, r5, #1
 800090e:	419d      	sbcs	r5, r3
 8000910:	464b      	mov	r3, r9
 8000912:	431d      	orrs	r5, r3
 8000914:	e612      	b.n	800053c <__aeabi_dadd+0x9c>
 8000916:	0021      	movs	r1, r4
 8000918:	4301      	orrs	r1, r0
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x47e>
 800091c:	e0c4      	b.n	8000aa8 <__aeabi_dadd+0x608>
 800091e:	1e51      	subs	r1, r2, #1
 8000920:	2a01      	cmp	r2, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x486>
 8000924:	e0fb      	b.n	8000b1e <__aeabi_dadd+0x67e>
 8000926:	4d8d      	ldr	r5, [pc, #564]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 8000928:	42aa      	cmp	r2, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x48e>
 800092c:	e0b5      	b.n	8000a9a <__aeabi_dadd+0x5fa>
 800092e:	2501      	movs	r5, #1
 8000930:	2938      	cmp	r1, #56	@ 0x38
 8000932:	dd00      	ble.n	8000936 <__aeabi_dadd+0x496>
 8000934:	e741      	b.n	80007ba <__aeabi_dadd+0x31a>
 8000936:	000a      	movs	r2, r1
 8000938:	e72f      	b.n	800079a <__aeabi_dadd+0x2fa>
 800093a:	4c89      	ldr	r4, [pc, #548]	@ (8000b60 <__aeabi_dadd+0x6c0>)
 800093c:	1aff      	subs	r7, r7, r3
 800093e:	4014      	ands	r4, r2
 8000940:	0762      	lsls	r2, r4, #29
 8000942:	08e4      	lsrs	r4, r4, #3
 8000944:	e76a      	b.n	800081c <__aeabi_dadd+0x37c>
 8000946:	4a85      	ldr	r2, [pc, #532]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 8000948:	4291      	cmp	r1, r2
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x4ae>
 800094c:	e0e3      	b.n	8000b16 <__aeabi_dadd+0x676>
 800094e:	4663      	mov	r3, ip
 8000950:	18c2      	adds	r2, r0, r3
 8000952:	4282      	cmp	r2, r0
 8000954:	4180      	sbcs	r0, r0
 8000956:	0023      	movs	r3, r4
 8000958:	4240      	negs	r0, r0
 800095a:	4453      	add	r3, sl
 800095c:	181b      	adds	r3, r3, r0
 800095e:	07dd      	lsls	r5, r3, #31
 8000960:	085c      	lsrs	r4, r3, #1
 8000962:	2307      	movs	r3, #7
 8000964:	0852      	lsrs	r2, r2, #1
 8000966:	4315      	orrs	r5, r2
 8000968:	000f      	movs	r7, r1
 800096a:	402b      	ands	r3, r5
 800096c:	e700      	b.n	8000770 <__aeabi_dadd+0x2d0>
 800096e:	4663      	mov	r3, ip
 8000970:	1a1d      	subs	r5, r3, r0
 8000972:	45ac      	cmp	ip, r5
 8000974:	4192      	sbcs	r2, r2
 8000976:	4653      	mov	r3, sl
 8000978:	4252      	negs	r2, r2
 800097a:	1b1c      	subs	r4, r3, r4
 800097c:	000e      	movs	r6, r1
 800097e:	4688      	mov	r8, r1
 8000980:	1aa4      	subs	r4, r4, r2
 8000982:	e5e5      	b.n	8000550 <__aeabi_dadd+0xb0>
 8000984:	2d00      	cmp	r5, #0
 8000986:	d000      	beq.n	800098a <__aeabi_dadd+0x4ea>
 8000988:	e091      	b.n	8000aae <__aeabi_dadd+0x60e>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d138      	bne.n	8000a00 <__aeabi_dadd+0x560>
 800098e:	2480      	movs	r4, #128	@ 0x80
 8000990:	2600      	movs	r6, #0
 8000992:	0324      	lsls	r4, r4, #12
 8000994:	e756      	b.n	8000844 <__aeabi_dadd+0x3a4>
 8000996:	4663      	mov	r3, ip
 8000998:	18c5      	adds	r5, r0, r3
 800099a:	4285      	cmp	r5, r0
 800099c:	4180      	sbcs	r0, r0
 800099e:	4454      	add	r4, sl
 80009a0:	4240      	negs	r0, r0
 80009a2:	1824      	adds	r4, r4, r0
 80009a4:	2701      	movs	r7, #1
 80009a6:	0223      	lsls	r3, r4, #8
 80009a8:	d400      	bmi.n	80009ac <__aeabi_dadd+0x50c>
 80009aa:	e6df      	b.n	800076c <__aeabi_dadd+0x2cc>
 80009ac:	2702      	movs	r7, #2
 80009ae:	e687      	b.n	80006c0 <__aeabi_dadd+0x220>
 80009b0:	4663      	mov	r3, ip
 80009b2:	1ac5      	subs	r5, r0, r3
 80009b4:	42a8      	cmp	r0, r5
 80009b6:	4180      	sbcs	r0, r0
 80009b8:	4653      	mov	r3, sl
 80009ba:	4240      	negs	r0, r0
 80009bc:	1ae4      	subs	r4, r4, r3
 80009be:	2701      	movs	r7, #1
 80009c0:	1a24      	subs	r4, r4, r0
 80009c2:	e5c0      	b.n	8000546 <__aeabi_dadd+0xa6>
 80009c4:	0762      	lsls	r2, r4, #29
 80009c6:	08c0      	lsrs	r0, r0, #3
 80009c8:	4302      	orrs	r2, r0
 80009ca:	08e4      	lsrs	r4, r4, #3
 80009cc:	e736      	b.n	800083c <__aeabi_dadd+0x39c>
 80009ce:	0011      	movs	r1, r2
 80009d0:	4653      	mov	r3, sl
 80009d2:	3920      	subs	r1, #32
 80009d4:	40cb      	lsrs	r3, r1
 80009d6:	4699      	mov	r9, r3
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d006      	beq.n	80009ea <__aeabi_dadd+0x54a>
 80009dc:	2140      	movs	r1, #64	@ 0x40
 80009de:	4653      	mov	r3, sl
 80009e0:	1a8a      	subs	r2, r1, r2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	4662      	mov	r2, ip
 80009e6:	431a      	orrs	r2, r3
 80009e8:	4694      	mov	ip, r2
 80009ea:	4665      	mov	r5, ip
 80009ec:	1e6b      	subs	r3, r5, #1
 80009ee:	419d      	sbcs	r5, r3
 80009f0:	464b      	mov	r3, r9
 80009f2:	431d      	orrs	r5, r3
 80009f4:	e659      	b.n	80006aa <__aeabi_dadd+0x20a>
 80009f6:	0762      	lsls	r2, r4, #29
 80009f8:	08c0      	lsrs	r0, r0, #3
 80009fa:	4302      	orrs	r2, r0
 80009fc:	08e4      	lsrs	r4, r4, #3
 80009fe:	e70d      	b.n	800081c <__aeabi_dadd+0x37c>
 8000a00:	4653      	mov	r3, sl
 8000a02:	075a      	lsls	r2, r3, #29
 8000a04:	4663      	mov	r3, ip
 8000a06:	08d8      	lsrs	r0, r3, #3
 8000a08:	4653      	mov	r3, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	4302      	orrs	r2, r0
 8000a0e:	08dc      	lsrs	r4, r3, #3
 8000a10:	e714      	b.n	800083c <__aeabi_dadd+0x39c>
 8000a12:	0015      	movs	r5, r2
 8000a14:	0026      	movs	r6, r4
 8000a16:	3d20      	subs	r5, #32
 8000a18:	40ee      	lsrs	r6, r5
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d003      	beq.n	8000a26 <__aeabi_dadd+0x586>
 8000a1e:	2540      	movs	r5, #64	@ 0x40
 8000a20:	1aaa      	subs	r2, r5, r2
 8000a22:	4094      	lsls	r4, r2
 8000a24:	4320      	orrs	r0, r4
 8000a26:	1e42      	subs	r2, r0, #1
 8000a28:	4190      	sbcs	r0, r2
 8000a2a:	0005      	movs	r5, r0
 8000a2c:	4335      	orrs	r5, r6
 8000a2e:	e606      	b.n	800063e <__aeabi_dadd+0x19e>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	d07c      	beq.n	8000b2e <__aeabi_dadd+0x68e>
 8000a34:	4662      	mov	r2, ip
 8000a36:	4653      	mov	r3, sl
 8000a38:	08c0      	lsrs	r0, r0, #3
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x5a0>
 8000a3e:	e6fa      	b.n	8000836 <__aeabi_dadd+0x396>
 8000a40:	0762      	lsls	r2, r4, #29
 8000a42:	4310      	orrs	r0, r2
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	08e4      	lsrs	r4, r4, #3
 8000a48:	0312      	lsls	r2, r2, #12
 8000a4a:	4214      	tst	r4, r2
 8000a4c:	d008      	beq.n	8000a60 <__aeabi_dadd+0x5c0>
 8000a4e:	08d9      	lsrs	r1, r3, #3
 8000a50:	4211      	tst	r1, r2
 8000a52:	d105      	bne.n	8000a60 <__aeabi_dadd+0x5c0>
 8000a54:	4663      	mov	r3, ip
 8000a56:	08d8      	lsrs	r0, r3, #3
 8000a58:	4653      	mov	r3, sl
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	075b      	lsls	r3, r3, #29
 8000a5e:	4318      	orrs	r0, r3
 8000a60:	0f42      	lsrs	r2, r0, #29
 8000a62:	00c0      	lsls	r0, r0, #3
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	0752      	lsls	r2, r2, #29
 8000a68:	4302      	orrs	r2, r0
 8000a6a:	e6e7      	b.n	800083c <__aeabi_dadd+0x39c>
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x5d2>
 8000a70:	e72d      	b.n	80008ce <__aeabi_dadd+0x42e>
 8000a72:	4663      	mov	r3, ip
 8000a74:	08d8      	lsrs	r0, r3, #3
 8000a76:	4653      	mov	r3, sl
 8000a78:	075a      	lsls	r2, r3, #29
 8000a7a:	000e      	movs	r6, r1
 8000a7c:	4302      	orrs	r2, r0
 8000a7e:	08dc      	lsrs	r4, r3, #3
 8000a80:	e6cc      	b.n	800081c <__aeabi_dadd+0x37c>
 8000a82:	4663      	mov	r3, ip
 8000a84:	1a1d      	subs	r5, r3, r0
 8000a86:	45ac      	cmp	ip, r5
 8000a88:	4192      	sbcs	r2, r2
 8000a8a:	4653      	mov	r3, sl
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	1b1c      	subs	r4, r3, r4
 8000a90:	000e      	movs	r6, r1
 8000a92:	4688      	mov	r8, r1
 8000a94:	1aa4      	subs	r4, r4, r2
 8000a96:	3701      	adds	r7, #1
 8000a98:	e555      	b.n	8000546 <__aeabi_dadd+0xa6>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	08d9      	lsrs	r1, r3, #3
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	075a      	lsls	r2, r3, #29
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	08dc      	lsrs	r4, r3, #3
 8000aa6:	e6c9      	b.n	800083c <__aeabi_dadd+0x39c>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	4654      	mov	r4, sl
 8000aac:	e6d4      	b.n	8000858 <__aeabi_dadd+0x3b8>
 8000aae:	08c0      	lsrs	r0, r0, #3
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x616>
 8000ab4:	e6bf      	b.n	8000836 <__aeabi_dadd+0x396>
 8000ab6:	0762      	lsls	r2, r4, #29
 8000ab8:	4310      	orrs	r0, r2
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	08e4      	lsrs	r4, r4, #3
 8000abe:	0312      	lsls	r2, r2, #12
 8000ac0:	4214      	tst	r4, r2
 8000ac2:	d0cd      	beq.n	8000a60 <__aeabi_dadd+0x5c0>
 8000ac4:	08dd      	lsrs	r5, r3, #3
 8000ac6:	4215      	tst	r5, r2
 8000ac8:	d1ca      	bne.n	8000a60 <__aeabi_dadd+0x5c0>
 8000aca:	4663      	mov	r3, ip
 8000acc:	08d8      	lsrs	r0, r3, #3
 8000ace:	4653      	mov	r3, sl
 8000ad0:	075b      	lsls	r3, r3, #29
 8000ad2:	000e      	movs	r6, r1
 8000ad4:	002c      	movs	r4, r5
 8000ad6:	4318      	orrs	r0, r3
 8000ad8:	e7c2      	b.n	8000a60 <__aeabi_dadd+0x5c0>
 8000ada:	4663      	mov	r3, ip
 8000adc:	08d9      	lsrs	r1, r3, #3
 8000ade:	4653      	mov	r3, sl
 8000ae0:	075a      	lsls	r2, r3, #29
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	08dc      	lsrs	r4, r3, #3
 8000ae6:	e699      	b.n	800081c <__aeabi_dadd+0x37c>
 8000ae8:	4663      	mov	r3, ip
 8000aea:	08d8      	lsrs	r0, r3, #3
 8000aec:	4653      	mov	r3, sl
 8000aee:	075a      	lsls	r2, r3, #29
 8000af0:	000e      	movs	r6, r1
 8000af2:	4302      	orrs	r2, r0
 8000af4:	08dc      	lsrs	r4, r3, #3
 8000af6:	e6a1      	b.n	800083c <__aeabi_dadd+0x39c>
 8000af8:	0011      	movs	r1, r2
 8000afa:	0027      	movs	r7, r4
 8000afc:	3920      	subs	r1, #32
 8000afe:	40cf      	lsrs	r7, r1
 8000b00:	2a20      	cmp	r2, #32
 8000b02:	d003      	beq.n	8000b0c <__aeabi_dadd+0x66c>
 8000b04:	2140      	movs	r1, #64	@ 0x40
 8000b06:	1a8a      	subs	r2, r1, r2
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	4320      	orrs	r0, r4
 8000b0c:	1e42      	subs	r2, r0, #1
 8000b0e:	4190      	sbcs	r0, r2
 8000b10:	0005      	movs	r5, r0
 8000b12:	433d      	orrs	r5, r7
 8000b14:	e651      	b.n	80007ba <__aeabi_dadd+0x31a>
 8000b16:	000c      	movs	r4, r1
 8000b18:	2500      	movs	r5, #0
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	e558      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000b1e:	4460      	add	r0, ip
 8000b20:	4560      	cmp	r0, ip
 8000b22:	4192      	sbcs	r2, r2
 8000b24:	4454      	add	r4, sl
 8000b26:	4252      	negs	r2, r2
 8000b28:	0005      	movs	r5, r0
 8000b2a:	18a4      	adds	r4, r4, r2
 8000b2c:	e73a      	b.n	80009a4 <__aeabi_dadd+0x504>
 8000b2e:	4653      	mov	r3, sl
 8000b30:	075a      	lsls	r2, r3, #29
 8000b32:	4663      	mov	r3, ip
 8000b34:	08d9      	lsrs	r1, r3, #3
 8000b36:	4653      	mov	r3, sl
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	08dc      	lsrs	r4, r3, #3
 8000b3c:	e67e      	b.n	800083c <__aeabi_dadd+0x39c>
 8000b3e:	001a      	movs	r2, r3
 8000b40:	001c      	movs	r4, r3
 8000b42:	432a      	orrs	r2, r5
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dadd+0x6a8>
 8000b46:	e6ab      	b.n	80008a0 <__aeabi_dadd+0x400>
 8000b48:	e6c1      	b.n	80008ce <__aeabi_dadd+0x42e>
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	1a09      	subs	r1, r1, r0
 8000b50:	e519      	b.n	8000586 <__aeabi_dadd+0xe6>
 8000b52:	2200      	movs	r2, #0
 8000b54:	2500      	movs	r5, #0
 8000b56:	4c01      	ldr	r4, [pc, #4]	@ (8000b5c <__aeabi_dadd+0x6bc>)
 8000b58:	e53a      	b.n	80005d0 <__aeabi_dadd+0x130>
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	000007ff 	.word	0x000007ff
 8000b60:	ff7fffff 	.word	0xff7fffff
 8000b64:	000007fe 	.word	0x000007fe

08000b68 <__aeabi_ddiv>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	46de      	mov	lr, fp
 8000b6c:	4645      	mov	r5, r8
 8000b6e:	4657      	mov	r7, sl
 8000b70:	464e      	mov	r6, r9
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	b087      	sub	sp, #28
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	030b      	lsls	r3, r1, #12
 8000b7c:	0b1b      	lsrs	r3, r3, #12
 8000b7e:	469b      	mov	fp, r3
 8000b80:	0fca      	lsrs	r2, r1, #31
 8000b82:	004b      	lsls	r3, r1, #1
 8000b84:	0004      	movs	r4, r0
 8000b86:	4680      	mov	r8, r0
 8000b88:	0d5b      	lsrs	r3, r3, #21
 8000b8a:	9202      	str	r2, [sp, #8]
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_ddiv+0x28>
 8000b8e:	e16a      	b.n	8000e66 <__aeabi_ddiv+0x2fe>
 8000b90:	4ad4      	ldr	r2, [pc, #848]	@ (8000ee4 <__aeabi_ddiv+0x37c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x30>
 8000b96:	e18c      	b.n	8000eb2 <__aeabi_ddiv+0x34a>
 8000b98:	4659      	mov	r1, fp
 8000b9a:	0f42      	lsrs	r2, r0, #29
 8000b9c:	00c9      	lsls	r1, r1, #3
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0409      	lsls	r1, r1, #16
 8000ba4:	4311      	orrs	r1, r2
 8000ba6:	00c2      	lsls	r2, r0, #3
 8000ba8:	4690      	mov	r8, r2
 8000baa:	4acf      	ldr	r2, [pc, #828]	@ (8000ee8 <__aeabi_ddiv+0x380>)
 8000bac:	4689      	mov	r9, r1
 8000bae:	4692      	mov	sl, r2
 8000bb0:	449a      	add	sl, r3
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	9303      	str	r3, [sp, #12]
 8000bb8:	9e00      	ldr	r6, [sp, #0]
 8000bba:	9f01      	ldr	r7, [sp, #4]
 8000bbc:	033b      	lsls	r3, r7, #12
 8000bbe:	0b1b      	lsrs	r3, r3, #12
 8000bc0:	469b      	mov	fp, r3
 8000bc2:	007b      	lsls	r3, r7, #1
 8000bc4:	0030      	movs	r0, r6
 8000bc6:	0d5b      	lsrs	r3, r3, #21
 8000bc8:	0ffd      	lsrs	r5, r7, #31
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_ddiv+0x68>
 8000bce:	e128      	b.n	8000e22 <__aeabi_ddiv+0x2ba>
 8000bd0:	4ac4      	ldr	r2, [pc, #784]	@ (8000ee4 <__aeabi_ddiv+0x37c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x70>
 8000bd6:	e177      	b.n	8000ec8 <__aeabi_ddiv+0x360>
 8000bd8:	4659      	mov	r1, fp
 8000bda:	0f72      	lsrs	r2, r6, #29
 8000bdc:	00c9      	lsls	r1, r1, #3
 8000bde:	430a      	orrs	r2, r1
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0409      	lsls	r1, r1, #16
 8000be4:	4311      	orrs	r1, r2
 8000be6:	468b      	mov	fp, r1
 8000be8:	49bf      	ldr	r1, [pc, #764]	@ (8000ee8 <__aeabi_ddiv+0x380>)
 8000bea:	00f2      	lsls	r2, r6, #3
 8000bec:	468c      	mov	ip, r1
 8000bee:	4651      	mov	r1, sl
 8000bf0:	4463      	add	r3, ip
 8000bf2:	1acb      	subs	r3, r1, r3
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9e02      	ldr	r6, [sp, #8]
 8000bfa:	406e      	eors	r6, r5
 8000bfc:	2c0f      	cmp	r4, #15
 8000bfe:	d827      	bhi.n	8000c50 <__aeabi_ddiv+0xe8>
 8000c00:	49ba      	ldr	r1, [pc, #744]	@ (8000eec <__aeabi_ddiv+0x384>)
 8000c02:	00a4      	lsls	r4, r4, #2
 8000c04:	5909      	ldr	r1, [r1, r4]
 8000c06:	468f      	mov	pc, r1
 8000c08:	46cb      	mov	fp, r9
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	9e02      	ldr	r6, [sp, #8]
 8000c0e:	9b03      	ldr	r3, [sp, #12]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d016      	beq.n	8000c42 <__aeabi_ddiv+0xda>
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d100      	bne.n	8000c1a <__aeabi_ddiv+0xb2>
 8000c18:	e2a6      	b.n	8001168 <__aeabi_ddiv+0x600>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_ddiv+0xb8>
 8000c1e:	e0df      	b.n	8000de0 <__aeabi_ddiv+0x278>
 8000c20:	2200      	movs	r2, #0
 8000c22:	2300      	movs	r3, #0
 8000c24:	2400      	movs	r4, #0
 8000c26:	4690      	mov	r8, r2
 8000c28:	051b      	lsls	r3, r3, #20
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	07f6      	lsls	r6, r6, #31
 8000c2e:	4333      	orrs	r3, r6
 8000c30:	4640      	mov	r0, r8
 8000c32:	0019      	movs	r1, r3
 8000c34:	b007      	add	sp, #28
 8000c36:	bcf0      	pop	{r4, r5, r6, r7}
 8000c38:	46bb      	mov	fp, r7
 8000c3a:	46b2      	mov	sl, r6
 8000c3c:	46a9      	mov	r9, r5
 8000c3e:	46a0      	mov	r8, r4
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	2200      	movs	r2, #0
 8000c44:	2400      	movs	r4, #0
 8000c46:	4690      	mov	r8, r2
 8000c48:	4ba6      	ldr	r3, [pc, #664]	@ (8000ee4 <__aeabi_ddiv+0x37c>)
 8000c4a:	e7ed      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	e7df      	b.n	8000c10 <__aeabi_ddiv+0xa8>
 8000c50:	45cb      	cmp	fp, r9
 8000c52:	d200      	bcs.n	8000c56 <__aeabi_ddiv+0xee>
 8000c54:	e1d4      	b.n	8001000 <__aeabi_ddiv+0x498>
 8000c56:	d100      	bne.n	8000c5a <__aeabi_ddiv+0xf2>
 8000c58:	e1cf      	b.n	8000ffa <__aeabi_ddiv+0x492>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	469c      	mov	ip, r3
 8000c60:	4644      	mov	r4, r8
 8000c62:	4648      	mov	r0, r9
 8000c64:	2700      	movs	r7, #0
 8000c66:	44e2      	add	sl, ip
 8000c68:	465b      	mov	r3, fp
 8000c6a:	0e15      	lsrs	r5, r2, #24
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	431d      	orrs	r5, r3
 8000c70:	0c19      	lsrs	r1, r3, #16
 8000c72:	042b      	lsls	r3, r5, #16
 8000c74:	0212      	lsls	r2, r2, #8
 8000c76:	9500      	str	r5, [sp, #0]
 8000c78:	0c1d      	lsrs	r5, r3, #16
 8000c7a:	4691      	mov	r9, r2
 8000c7c:	9102      	str	r1, [sp, #8]
 8000c7e:	9503      	str	r5, [sp, #12]
 8000c80:	f7ff fae0 	bl	8000244 <__aeabi_uidivmod>
 8000c84:	0002      	movs	r2, r0
 8000c86:	436a      	muls	r2, r5
 8000c88:	040b      	lsls	r3, r1, #16
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	4680      	mov	r8, r0
 8000c8e:	4319      	orrs	r1, r3
 8000c90:	428a      	cmp	r2, r1
 8000c92:	d909      	bls.n	8000ca8 <__aeabi_ddiv+0x140>
 8000c94:	9d00      	ldr	r5, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	46ac      	mov	ip, r5
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	4461      	add	r1, ip
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	44e0      	add	r8, ip
 8000ca2:	428d      	cmp	r5, r1
 8000ca4:	d800      	bhi.n	8000ca8 <__aeabi_ddiv+0x140>
 8000ca6:	e1fb      	b.n	80010a0 <__aeabi_ddiv+0x538>
 8000ca8:	1a88      	subs	r0, r1, r2
 8000caa:	9902      	ldr	r1, [sp, #8]
 8000cac:	f7ff faca 	bl	8000244 <__aeabi_uidivmod>
 8000cb0:	9a03      	ldr	r2, [sp, #12]
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	4342      	muls	r2, r0
 8000cb6:	0409      	lsls	r1, r1, #16
 8000cb8:	0c24      	lsrs	r4, r4, #16
 8000cba:	0003      	movs	r3, r0
 8000cbc:	430c      	orrs	r4, r1
 8000cbe:	42a2      	cmp	r2, r4
 8000cc0:	d906      	bls.n	8000cd0 <__aeabi_ddiv+0x168>
 8000cc2:	9900      	ldr	r1, [sp, #0]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	468c      	mov	ip, r1
 8000cc8:	4464      	add	r4, ip
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	d800      	bhi.n	8000cd0 <__aeabi_ddiv+0x168>
 8000cce:	e1e1      	b.n	8001094 <__aeabi_ddiv+0x52c>
 8000cd0:	1aa0      	subs	r0, r4, r2
 8000cd2:	4642      	mov	r2, r8
 8000cd4:	0412      	lsls	r2, r2, #16
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	4693      	mov	fp, r2
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4659      	mov	r1, fp
 8000cde:	0c1b      	lsrs	r3, r3, #16
 8000ce0:	001d      	movs	r5, r3
 8000ce2:	9304      	str	r3, [sp, #16]
 8000ce4:	040b      	lsls	r3, r1, #16
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	0409      	lsls	r1, r1, #16
 8000cea:	0c09      	lsrs	r1, r1, #16
 8000cec:	000c      	movs	r4, r1
 8000cee:	0c1b      	lsrs	r3, r3, #16
 8000cf0:	435c      	muls	r4, r3
 8000cf2:	0c12      	lsrs	r2, r2, #16
 8000cf4:	436b      	muls	r3, r5
 8000cf6:	4688      	mov	r8, r1
 8000cf8:	4351      	muls	r1, r2
 8000cfa:	436a      	muls	r2, r5
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	46ac      	mov	ip, r5
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	4463      	add	r3, ip
 8000d04:	4299      	cmp	r1, r3
 8000d06:	d903      	bls.n	8000d10 <__aeabi_ddiv+0x1a8>
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0249      	lsls	r1, r1, #9
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	4462      	add	r2, ip
 8000d10:	0c19      	lsrs	r1, r3, #16
 8000d12:	0424      	lsls	r4, r4, #16
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	0c24      	lsrs	r4, r4, #16
 8000d18:	188a      	adds	r2, r1, r2
 8000d1a:	191c      	adds	r4, r3, r4
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d302      	bcc.n	8000d26 <__aeabi_ddiv+0x1be>
 8000d20:	d116      	bne.n	8000d50 <__aeabi_ddiv+0x1e8>
 8000d22:	42a7      	cmp	r7, r4
 8000d24:	d214      	bcs.n	8000d50 <__aeabi_ddiv+0x1e8>
 8000d26:	465b      	mov	r3, fp
 8000d28:	9d00      	ldr	r5, [sp, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	444f      	add	r7, r9
 8000d2e:	9305      	str	r3, [sp, #20]
 8000d30:	454f      	cmp	r7, r9
 8000d32:	419b      	sbcs	r3, r3
 8000d34:	46ac      	mov	ip, r5
 8000d36:	425b      	negs	r3, r3
 8000d38:	4463      	add	r3, ip
 8000d3a:	18c0      	adds	r0, r0, r3
 8000d3c:	4285      	cmp	r5, r0
 8000d3e:	d300      	bcc.n	8000d42 <__aeabi_ddiv+0x1da>
 8000d40:	e1a1      	b.n	8001086 <__aeabi_ddiv+0x51e>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	d900      	bls.n	8000d48 <__aeabi_ddiv+0x1e0>
 8000d46:	e1f6      	b.n	8001136 <__aeabi_ddiv+0x5ce>
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x1e4>
 8000d4a:	e1f1      	b.n	8001130 <__aeabi_ddiv+0x5c8>
 8000d4c:	9b05      	ldr	r3, [sp, #20]
 8000d4e:	469b      	mov	fp, r3
 8000d50:	1b3c      	subs	r4, r7, r4
 8000d52:	42a7      	cmp	r7, r4
 8000d54:	41bf      	sbcs	r7, r7
 8000d56:	9d00      	ldr	r5, [sp, #0]
 8000d58:	1a80      	subs	r0, r0, r2
 8000d5a:	427f      	negs	r7, r7
 8000d5c:	1bc0      	subs	r0, r0, r7
 8000d5e:	4285      	cmp	r5, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_ddiv+0x1fc>
 8000d62:	e1d0      	b.n	8001106 <__aeabi_ddiv+0x59e>
 8000d64:	9902      	ldr	r1, [sp, #8]
 8000d66:	f7ff fa6d 	bl	8000244 <__aeabi_uidivmod>
 8000d6a:	9a03      	ldr	r2, [sp, #12]
 8000d6c:	040b      	lsls	r3, r1, #16
 8000d6e:	4342      	muls	r2, r0
 8000d70:	0c21      	lsrs	r1, r4, #16
 8000d72:	0007      	movs	r7, r0
 8000d74:	4319      	orrs	r1, r3
 8000d76:	428a      	cmp	r2, r1
 8000d78:	d900      	bls.n	8000d7c <__aeabi_ddiv+0x214>
 8000d7a:	e178      	b.n	800106e <__aeabi_ddiv+0x506>
 8000d7c:	1a88      	subs	r0, r1, r2
 8000d7e:	9902      	ldr	r1, [sp, #8]
 8000d80:	f7ff fa60 	bl	8000244 <__aeabi_uidivmod>
 8000d84:	9a03      	ldr	r2, [sp, #12]
 8000d86:	0424      	lsls	r4, r4, #16
 8000d88:	4342      	muls	r2, r0
 8000d8a:	0409      	lsls	r1, r1, #16
 8000d8c:	0c24      	lsrs	r4, r4, #16
 8000d8e:	0003      	movs	r3, r0
 8000d90:	430c      	orrs	r4, r1
 8000d92:	42a2      	cmp	r2, r4
 8000d94:	d900      	bls.n	8000d98 <__aeabi_ddiv+0x230>
 8000d96:	e15d      	b.n	8001054 <__aeabi_ddiv+0x4ec>
 8000d98:	4641      	mov	r1, r8
 8000d9a:	1aa4      	subs	r4, r4, r2
 8000d9c:	043a      	lsls	r2, r7, #16
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	9d04      	ldr	r5, [sp, #16]
 8000da2:	0413      	lsls	r3, r2, #16
 8000da4:	0c1b      	lsrs	r3, r3, #16
 8000da6:	4359      	muls	r1, r3
 8000da8:	4647      	mov	r7, r8
 8000daa:	436b      	muls	r3, r5
 8000dac:	469c      	mov	ip, r3
 8000dae:	0c10      	lsrs	r0, r2, #16
 8000db0:	4347      	muls	r7, r0
 8000db2:	0c0b      	lsrs	r3, r1, #16
 8000db4:	44bc      	add	ip, r7
 8000db6:	4463      	add	r3, ip
 8000db8:	4368      	muls	r0, r5
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d903      	bls.n	8000dc6 <__aeabi_ddiv+0x25e>
 8000dbe:	2580      	movs	r5, #128	@ 0x80
 8000dc0:	026d      	lsls	r5, r5, #9
 8000dc2:	46ac      	mov	ip, r5
 8000dc4:	4460      	add	r0, ip
 8000dc6:	0c1f      	lsrs	r7, r3, #16
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	0c09      	lsrs	r1, r1, #16
 8000dce:	183f      	adds	r7, r7, r0
 8000dd0:	185b      	adds	r3, r3, r1
 8000dd2:	42bc      	cmp	r4, r7
 8000dd4:	d200      	bcs.n	8000dd8 <__aeabi_ddiv+0x270>
 8000dd6:	e102      	b.n	8000fde <__aeabi_ddiv+0x476>
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_ddiv+0x274>
 8000dda:	e0fd      	b.n	8000fd8 <__aeabi_ddiv+0x470>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <__aeabi_ddiv+0x388>)
 8000de2:	4453      	add	r3, sl
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_ddiv+0x282>
 8000de8:	e0ae      	b.n	8000f48 <__aeabi_ddiv+0x3e0>
 8000dea:	0751      	lsls	r1, r2, #29
 8000dec:	d000      	beq.n	8000df0 <__aeabi_ddiv+0x288>
 8000dee:	e198      	b.n	8001122 <__aeabi_ddiv+0x5ba>
 8000df0:	4659      	mov	r1, fp
 8000df2:	01c9      	lsls	r1, r1, #7
 8000df4:	d506      	bpl.n	8000e04 <__aeabi_ddiv+0x29c>
 8000df6:	4659      	mov	r1, fp
 8000df8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef4 <__aeabi_ddiv+0x38c>)
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	468b      	mov	fp, r1
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4453      	add	r3, sl
 8000e04:	493c      	ldr	r1, [pc, #240]	@ (8000ef8 <__aeabi_ddiv+0x390>)
 8000e06:	428b      	cmp	r3, r1
 8000e08:	dd00      	ble.n	8000e0c <__aeabi_ddiv+0x2a4>
 8000e0a:	e71a      	b.n	8000c42 <__aeabi_ddiv+0xda>
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	08d2      	lsrs	r2, r2, #3
 8000e10:	0749      	lsls	r1, r1, #29
 8000e12:	4311      	orrs	r1, r2
 8000e14:	465a      	mov	r2, fp
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	0254      	lsls	r4, r2, #9
 8000e1a:	4688      	mov	r8, r1
 8000e1c:	0b24      	lsrs	r4, r4, #12
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	e702      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000e22:	465a      	mov	r2, fp
 8000e24:	9b00      	ldr	r3, [sp, #0]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x2c4>
 8000e2a:	e07e      	b.n	8000f2a <__aeabi_ddiv+0x3c2>
 8000e2c:	465b      	mov	r3, fp
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2cc>
 8000e32:	e100      	b.n	8001036 <__aeabi_ddiv+0x4ce>
 8000e34:	4658      	mov	r0, fp
 8000e36:	f001 fabb 	bl	80023b0 <__clzsi2>
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	3a0b      	subs	r2, #11
 8000e40:	271d      	movs	r7, #29
 8000e42:	9e00      	ldr	r6, [sp, #0]
 8000e44:	1aba      	subs	r2, r7, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	4658      	mov	r0, fp
 8000e4a:	40d6      	lsrs	r6, r2
 8000e4c:	3908      	subs	r1, #8
 8000e4e:	4088      	lsls	r0, r1
 8000e50:	0032      	movs	r2, r6
 8000e52:	4302      	orrs	r2, r0
 8000e54:	4693      	mov	fp, r2
 8000e56:	9a00      	ldr	r2, [sp, #0]
 8000e58:	408a      	lsls	r2, r1
 8000e5a:	4928      	ldr	r1, [pc, #160]	@ (8000efc <__aeabi_ddiv+0x394>)
 8000e5c:	4453      	add	r3, sl
 8000e5e:	468a      	mov	sl, r1
 8000e60:	449a      	add	sl, r3
 8000e62:	2300      	movs	r3, #0
 8000e64:	e6c8      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000e66:	465b      	mov	r3, fp
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	d056      	beq.n	8000f1c <__aeabi_ddiv+0x3b4>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x30e>
 8000e74:	e0cd      	b.n	8001012 <__aeabi_ddiv+0x4aa>
 8000e76:	4658      	mov	r0, fp
 8000e78:	f001 fa9a 	bl	80023b0 <__clzsi2>
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	425b      	negs	r3, r3
 8000e80:	469c      	mov	ip, r3
 8000e82:	0002      	movs	r2, r0
 8000e84:	4484      	add	ip, r0
 8000e86:	4666      	mov	r6, ip
 8000e88:	231d      	movs	r3, #29
 8000e8a:	1b9b      	subs	r3, r3, r6
 8000e8c:	0026      	movs	r6, r4
 8000e8e:	0011      	movs	r1, r2
 8000e90:	4658      	mov	r0, fp
 8000e92:	40de      	lsrs	r6, r3
 8000e94:	3908      	subs	r1, #8
 8000e96:	4088      	lsls	r0, r1
 8000e98:	0033      	movs	r3, r6
 8000e9a:	4303      	orrs	r3, r0
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	0023      	movs	r3, r4
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	4698      	mov	r8, r3
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <__aeabi_ddiv+0x398>)
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	469a      	mov	sl, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	e682      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000eb2:	465a      	mov	r2, fp
 8000eb4:	4302      	orrs	r2, r0
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	d12a      	bne.n	8000f10 <__aeabi_ddiv+0x3a8>
 8000eba:	2200      	movs	r2, #0
 8000ebc:	469a      	mov	sl, r3
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	2408      	movs	r4, #8
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	e677      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000ec8:	465a      	mov	r2, fp
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <__aeabi_ddiv+0x39c>)
 8000ed0:	469c      	mov	ip, r3
 8000ed2:	44e2      	add	sl, ip
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d117      	bne.n	8000f08 <__aeabi_ddiv+0x3a0>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	431c      	orrs	r4, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	469b      	mov	fp, r3
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	e689      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000ee4:	000007ff 	.word	0x000007ff
 8000ee8:	fffffc01 	.word	0xfffffc01
 8000eec:	08009ed0 	.word	0x08009ed0
 8000ef0:	000003ff 	.word	0x000003ff
 8000ef4:	feffffff 	.word	0xfeffffff
 8000ef8:	000007fe 	.word	0x000007fe
 8000efc:	000003f3 	.word	0x000003f3
 8000f00:	fffffc0d 	.word	0xfffffc0d
 8000f04:	fffff801 	.word	0xfffff801
 8000f08:	2303      	movs	r3, #3
 8000f0a:	0032      	movs	r2, r6
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	e673      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000f10:	469a      	mov	sl, r3
 8000f12:	2303      	movs	r3, #3
 8000f14:	46d9      	mov	r9, fp
 8000f16:	240c      	movs	r4, #12
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	e64d      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4698      	mov	r8, r3
 8000f20:	469a      	mov	sl, r3
 8000f22:	3301      	adds	r3, #1
 8000f24:	2404      	movs	r4, #4
 8000f26:	9303      	str	r3, [sp, #12]
 8000f28:	e646      	b.n	8000bb8 <__aeabi_ddiv+0x50>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	469b      	mov	fp, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	e660      	b.n	8000bf8 <__aeabi_ddiv+0x90>
 8000f36:	2300      	movs	r3, #0
 8000f38:	2480      	movs	r4, #128	@ 0x80
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	4b92      	ldr	r3, [pc, #584]	@ (8001188 <__aeabi_ddiv+0x620>)
 8000f40:	0324      	lsls	r4, r4, #12
 8000f42:	e671      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000f44:	2201      	movs	r2, #1
 8000f46:	4252      	negs	r2, r2
 8000f48:	2101      	movs	r1, #1
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	2938      	cmp	r1, #56	@ 0x38
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_ddiv+0x3ea>
 8000f50:	e666      	b.n	8000c20 <__aeabi_ddiv+0xb8>
 8000f52:	291f      	cmp	r1, #31
 8000f54:	dc00      	bgt.n	8000f58 <__aeabi_ddiv+0x3f0>
 8000f56:	e0ab      	b.n	80010b0 <__aeabi_ddiv+0x548>
 8000f58:	201f      	movs	r0, #31
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	1ac3      	subs	r3, r0, r3
 8000f5e:	4658      	mov	r0, fp
 8000f60:	40d8      	lsrs	r0, r3
 8000f62:	0003      	movs	r3, r0
 8000f64:	2920      	cmp	r1, #32
 8000f66:	d004      	beq.n	8000f72 <__aeabi_ddiv+0x40a>
 8000f68:	4658      	mov	r0, fp
 8000f6a:	4988      	ldr	r1, [pc, #544]	@ (800118c <__aeabi_ddiv+0x624>)
 8000f6c:	4451      	add	r1, sl
 8000f6e:	4088      	lsls	r0, r1
 8000f70:	4302      	orrs	r2, r0
 8000f72:	1e51      	subs	r1, r2, #1
 8000f74:	418a      	sbcs	r2, r1
 8000f76:	431a      	orrs	r2, r3
 8000f78:	2307      	movs	r3, #7
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	4011      	ands	r1, r2
 8000f80:	4213      	tst	r3, r2
 8000f82:	d00c      	beq.n	8000f9e <__aeabi_ddiv+0x436>
 8000f84:	230f      	movs	r3, #15
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x426>
 8000f8c:	e0f9      	b.n	8001182 <__aeabi_ddiv+0x61a>
 8000f8e:	1d11      	adds	r1, r2, #4
 8000f90:	4291      	cmp	r1, r2
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	000a      	movs	r2, r1
 8000f96:	425b      	negs	r3, r3
 8000f98:	0759      	lsls	r1, r3, #29
 8000f9a:	025b      	lsls	r3, r3, #9
 8000f9c:	0b1c      	lsrs	r4, r3, #12
 8000f9e:	08d2      	lsrs	r2, r2, #3
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	4690      	mov	r8, r2
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e63f      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000fa8:	2480      	movs	r4, #128	@ 0x80
 8000faa:	464b      	mov	r3, r9
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	4223      	tst	r3, r4
 8000fb0:	d009      	beq.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fb2:	465b      	mov	r3, fp
 8000fb4:	4223      	tst	r3, r4
 8000fb6:	d106      	bne.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fb8:	431c      	orrs	r4, r3
 8000fba:	0324      	lsls	r4, r4, #12
 8000fbc:	002e      	movs	r6, r5
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <__aeabi_ddiv+0x620>)
 8000fc2:	0b24      	lsrs	r4, r4, #12
 8000fc4:	e630      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000fc6:	2480      	movs	r4, #128	@ 0x80
 8000fc8:	464b      	mov	r3, r9
 8000fca:	0324      	lsls	r4, r4, #12
 8000fcc:	431c      	orrs	r4, r3
 8000fce:	0324      	lsls	r4, r4, #12
 8000fd0:	9e02      	ldr	r6, [sp, #8]
 8000fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8001188 <__aeabi_ddiv+0x620>)
 8000fd4:	0b24      	lsrs	r4, r4, #12
 8000fd6:	e627      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x476>
 8000fdc:	e700      	b.n	8000de0 <__aeabi_ddiv+0x278>
 8000fde:	9800      	ldr	r0, [sp, #0]
 8000fe0:	1e51      	subs	r1, r2, #1
 8000fe2:	4684      	mov	ip, r0
 8000fe4:	4464      	add	r4, ip
 8000fe6:	4284      	cmp	r4, r0
 8000fe8:	d200      	bcs.n	8000fec <__aeabi_ddiv+0x484>
 8000fea:	e084      	b.n	80010f6 <__aeabi_ddiv+0x58e>
 8000fec:	42bc      	cmp	r4, r7
 8000fee:	d200      	bcs.n	8000ff2 <__aeabi_ddiv+0x48a>
 8000ff0:	e0ae      	b.n	8001150 <__aeabi_ddiv+0x5e8>
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x48e>
 8000ff4:	e0c1      	b.n	800117a <__aeabi_ddiv+0x612>
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	e6f0      	b.n	8000ddc <__aeabi_ddiv+0x274>
 8000ffa:	4542      	cmp	r2, r8
 8000ffc:	d900      	bls.n	8001000 <__aeabi_ddiv+0x498>
 8000ffe:	e62c      	b.n	8000c5a <__aeabi_ddiv+0xf2>
 8001000:	464b      	mov	r3, r9
 8001002:	07dc      	lsls	r4, r3, #31
 8001004:	0858      	lsrs	r0, r3, #1
 8001006:	4643      	mov	r3, r8
 8001008:	085b      	lsrs	r3, r3, #1
 800100a:	431c      	orrs	r4, r3
 800100c:	4643      	mov	r3, r8
 800100e:	07df      	lsls	r7, r3, #31
 8001010:	e62a      	b.n	8000c68 <__aeabi_ddiv+0x100>
 8001012:	f001 f9cd 	bl	80023b0 <__clzsi2>
 8001016:	2315      	movs	r3, #21
 8001018:	469c      	mov	ip, r3
 800101a:	4484      	add	ip, r0
 800101c:	0002      	movs	r2, r0
 800101e:	4663      	mov	r3, ip
 8001020:	3220      	adds	r2, #32
 8001022:	2b1c      	cmp	r3, #28
 8001024:	dc00      	bgt.n	8001028 <__aeabi_ddiv+0x4c0>
 8001026:	e72e      	b.n	8000e86 <__aeabi_ddiv+0x31e>
 8001028:	0023      	movs	r3, r4
 800102a:	3808      	subs	r0, #8
 800102c:	4083      	lsls	r3, r0
 800102e:	4699      	mov	r9, r3
 8001030:	2300      	movs	r3, #0
 8001032:	4698      	mov	r8, r3
 8001034:	e736      	b.n	8000ea4 <__aeabi_ddiv+0x33c>
 8001036:	f001 f9bb 	bl	80023b0 <__clzsi2>
 800103a:	0002      	movs	r2, r0
 800103c:	0003      	movs	r3, r0
 800103e:	3215      	adds	r2, #21
 8001040:	3320      	adds	r3, #32
 8001042:	2a1c      	cmp	r2, #28
 8001044:	dc00      	bgt.n	8001048 <__aeabi_ddiv+0x4e0>
 8001046:	e6fb      	b.n	8000e40 <__aeabi_ddiv+0x2d8>
 8001048:	9900      	ldr	r1, [sp, #0]
 800104a:	3808      	subs	r0, #8
 800104c:	4081      	lsls	r1, r0
 800104e:	2200      	movs	r2, #0
 8001050:	468b      	mov	fp, r1
 8001052:	e702      	b.n	8000e5a <__aeabi_ddiv+0x2f2>
 8001054:	9900      	ldr	r1, [sp, #0]
 8001056:	3b01      	subs	r3, #1
 8001058:	468c      	mov	ip, r1
 800105a:	4464      	add	r4, ip
 800105c:	42a1      	cmp	r1, r4
 800105e:	d900      	bls.n	8001062 <__aeabi_ddiv+0x4fa>
 8001060:	e69a      	b.n	8000d98 <__aeabi_ddiv+0x230>
 8001062:	42a2      	cmp	r2, r4
 8001064:	d800      	bhi.n	8001068 <__aeabi_ddiv+0x500>
 8001066:	e697      	b.n	8000d98 <__aeabi_ddiv+0x230>
 8001068:	1e83      	subs	r3, r0, #2
 800106a:	4464      	add	r4, ip
 800106c:	e694      	b.n	8000d98 <__aeabi_ddiv+0x230>
 800106e:	46ac      	mov	ip, r5
 8001070:	4461      	add	r1, ip
 8001072:	3f01      	subs	r7, #1
 8001074:	428d      	cmp	r5, r1
 8001076:	d900      	bls.n	800107a <__aeabi_ddiv+0x512>
 8001078:	e680      	b.n	8000d7c <__aeabi_ddiv+0x214>
 800107a:	428a      	cmp	r2, r1
 800107c:	d800      	bhi.n	8001080 <__aeabi_ddiv+0x518>
 800107e:	e67d      	b.n	8000d7c <__aeabi_ddiv+0x214>
 8001080:	1e87      	subs	r7, r0, #2
 8001082:	4461      	add	r1, ip
 8001084:	e67a      	b.n	8000d7c <__aeabi_ddiv+0x214>
 8001086:	4285      	cmp	r5, r0
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0x524>
 800108a:	e65f      	b.n	8000d4c <__aeabi_ddiv+0x1e4>
 800108c:	45b9      	cmp	r9, r7
 800108e:	d900      	bls.n	8001092 <__aeabi_ddiv+0x52a>
 8001090:	e65c      	b.n	8000d4c <__aeabi_ddiv+0x1e4>
 8001092:	e656      	b.n	8000d42 <__aeabi_ddiv+0x1da>
 8001094:	42a2      	cmp	r2, r4
 8001096:	d800      	bhi.n	800109a <__aeabi_ddiv+0x532>
 8001098:	e61a      	b.n	8000cd0 <__aeabi_ddiv+0x168>
 800109a:	1e83      	subs	r3, r0, #2
 800109c:	4464      	add	r4, ip
 800109e:	e617      	b.n	8000cd0 <__aeabi_ddiv+0x168>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	d800      	bhi.n	80010a6 <__aeabi_ddiv+0x53e>
 80010a4:	e600      	b.n	8000ca8 <__aeabi_ddiv+0x140>
 80010a6:	46ac      	mov	ip, r5
 80010a8:	1e83      	subs	r3, r0, #2
 80010aa:	4698      	mov	r8, r3
 80010ac:	4461      	add	r1, ip
 80010ae:	e5fb      	b.n	8000ca8 <__aeabi_ddiv+0x140>
 80010b0:	4837      	ldr	r0, [pc, #220]	@ (8001190 <__aeabi_ddiv+0x628>)
 80010b2:	0014      	movs	r4, r2
 80010b4:	4450      	add	r0, sl
 80010b6:	4082      	lsls	r2, r0
 80010b8:	465b      	mov	r3, fp
 80010ba:	0017      	movs	r7, r2
 80010bc:	4083      	lsls	r3, r0
 80010be:	40cc      	lsrs	r4, r1
 80010c0:	1e7a      	subs	r2, r7, #1
 80010c2:	4197      	sbcs	r7, r2
 80010c4:	4323      	orrs	r3, r4
 80010c6:	433b      	orrs	r3, r7
 80010c8:	001a      	movs	r2, r3
 80010ca:	465b      	mov	r3, fp
 80010cc:	40cb      	lsrs	r3, r1
 80010ce:	0751      	lsls	r1, r2, #29
 80010d0:	d009      	beq.n	80010e6 <__aeabi_ddiv+0x57e>
 80010d2:	210f      	movs	r1, #15
 80010d4:	4011      	ands	r1, r2
 80010d6:	2904      	cmp	r1, #4
 80010d8:	d005      	beq.n	80010e6 <__aeabi_ddiv+0x57e>
 80010da:	1d11      	adds	r1, r2, #4
 80010dc:	4291      	cmp	r1, r2
 80010de:	4192      	sbcs	r2, r2
 80010e0:	4252      	negs	r2, r2
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	000a      	movs	r2, r1
 80010e6:	0219      	lsls	r1, r3, #8
 80010e8:	d400      	bmi.n	80010ec <__aeabi_ddiv+0x584>
 80010ea:	e755      	b.n	8000f98 <__aeabi_ddiv+0x430>
 80010ec:	2200      	movs	r2, #0
 80010ee:	2301      	movs	r3, #1
 80010f0:	2400      	movs	r4, #0
 80010f2:	4690      	mov	r8, r2
 80010f4:	e598      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 80010f6:	000a      	movs	r2, r1
 80010f8:	42bc      	cmp	r4, r7
 80010fa:	d000      	beq.n	80010fe <__aeabi_ddiv+0x596>
 80010fc:	e66e      	b.n	8000ddc <__aeabi_ddiv+0x274>
 80010fe:	454b      	cmp	r3, r9
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0x59c>
 8001102:	e66b      	b.n	8000ddc <__aeabi_ddiv+0x274>
 8001104:	e66c      	b.n	8000de0 <__aeabi_ddiv+0x278>
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <__aeabi_ddiv+0x62c>)
 8001108:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <__aeabi_ddiv+0x630>)
 800110a:	4453      	add	r3, sl
 800110c:	4592      	cmp	sl, r2
 800110e:	da00      	bge.n	8001112 <__aeabi_ddiv+0x5aa>
 8001110:	e718      	b.n	8000f44 <__aeabi_ddiv+0x3dc>
 8001112:	2101      	movs	r1, #1
 8001114:	4249      	negs	r1, r1
 8001116:	1d0a      	adds	r2, r1, #4
 8001118:	428a      	cmp	r2, r1
 800111a:	4189      	sbcs	r1, r1
 800111c:	4249      	negs	r1, r1
 800111e:	448b      	add	fp, r1
 8001120:	e666      	b.n	8000df0 <__aeabi_ddiv+0x288>
 8001122:	210f      	movs	r1, #15
 8001124:	4011      	ands	r1, r2
 8001126:	2904      	cmp	r1, #4
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0x5c4>
 800112a:	e661      	b.n	8000df0 <__aeabi_ddiv+0x288>
 800112c:	0011      	movs	r1, r2
 800112e:	e7f2      	b.n	8001116 <__aeabi_ddiv+0x5ae>
 8001130:	42bc      	cmp	r4, r7
 8001132:	d800      	bhi.n	8001136 <__aeabi_ddiv+0x5ce>
 8001134:	e60a      	b.n	8000d4c <__aeabi_ddiv+0x1e4>
 8001136:	2302      	movs	r3, #2
 8001138:	425b      	negs	r3, r3
 800113a:	469c      	mov	ip, r3
 800113c:	9900      	ldr	r1, [sp, #0]
 800113e:	444f      	add	r7, r9
 8001140:	454f      	cmp	r7, r9
 8001142:	419b      	sbcs	r3, r3
 8001144:	44e3      	add	fp, ip
 8001146:	468c      	mov	ip, r1
 8001148:	425b      	negs	r3, r3
 800114a:	4463      	add	r3, ip
 800114c:	18c0      	adds	r0, r0, r3
 800114e:	e5ff      	b.n	8000d50 <__aeabi_ddiv+0x1e8>
 8001150:	4649      	mov	r1, r9
 8001152:	9d00      	ldr	r5, [sp, #0]
 8001154:	0048      	lsls	r0, r1, #1
 8001156:	4548      	cmp	r0, r9
 8001158:	4189      	sbcs	r1, r1
 800115a:	46ac      	mov	ip, r5
 800115c:	4249      	negs	r1, r1
 800115e:	4461      	add	r1, ip
 8001160:	4681      	mov	r9, r0
 8001162:	3a02      	subs	r2, #2
 8001164:	1864      	adds	r4, r4, r1
 8001166:	e7c7      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8001168:	2480      	movs	r4, #128	@ 0x80
 800116a:	465b      	mov	r3, fp
 800116c:	0324      	lsls	r4, r4, #12
 800116e:	431c      	orrs	r4, r3
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	4690      	mov	r8, r2
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <__aeabi_ddiv+0x620>)
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	e556      	b.n	8000c28 <__aeabi_ddiv+0xc0>
 800117a:	4599      	cmp	r9, r3
 800117c:	d3e8      	bcc.n	8001150 <__aeabi_ddiv+0x5e8>
 800117e:	000a      	movs	r2, r1
 8001180:	e7bd      	b.n	80010fe <__aeabi_ddiv+0x596>
 8001182:	2300      	movs	r3, #0
 8001184:	e708      	b.n	8000f98 <__aeabi_ddiv+0x430>
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	000007ff 	.word	0x000007ff
 800118c:	0000043e 	.word	0x0000043e
 8001190:	0000041e 	.word	0x0000041e
 8001194:	000003ff 	.word	0x000003ff
 8001198:	fffffc02 	.word	0xfffffc02

0800119c <__eqdf2>:
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	4657      	mov	r7, sl
 80011a0:	46de      	mov	lr, fp
 80011a2:	464e      	mov	r6, r9
 80011a4:	4645      	mov	r5, r8
 80011a6:	b5e0      	push	{r5, r6, r7, lr}
 80011a8:	000d      	movs	r5, r1
 80011aa:	0004      	movs	r4, r0
 80011ac:	0fe8      	lsrs	r0, r5, #31
 80011ae:	4683      	mov	fp, r0
 80011b0:	0309      	lsls	r1, r1, #12
 80011b2:	0fd8      	lsrs	r0, r3, #31
 80011b4:	0b09      	lsrs	r1, r1, #12
 80011b6:	4682      	mov	sl, r0
 80011b8:	4819      	ldr	r0, [pc, #100]	@ (8001220 <__eqdf2+0x84>)
 80011ba:	468c      	mov	ip, r1
 80011bc:	031f      	lsls	r7, r3, #12
 80011be:	0069      	lsls	r1, r5, #1
 80011c0:	005e      	lsls	r6, r3, #1
 80011c2:	0d49      	lsrs	r1, r1, #21
 80011c4:	0b3f      	lsrs	r7, r7, #12
 80011c6:	0d76      	lsrs	r6, r6, #21
 80011c8:	4281      	cmp	r1, r0
 80011ca:	d018      	beq.n	80011fe <__eqdf2+0x62>
 80011cc:	4286      	cmp	r6, r0
 80011ce:	d00f      	beq.n	80011f0 <__eqdf2+0x54>
 80011d0:	2001      	movs	r0, #1
 80011d2:	42b1      	cmp	r1, r6
 80011d4:	d10d      	bne.n	80011f2 <__eqdf2+0x56>
 80011d6:	45bc      	cmp	ip, r7
 80011d8:	d10b      	bne.n	80011f2 <__eqdf2+0x56>
 80011da:	4294      	cmp	r4, r2
 80011dc:	d109      	bne.n	80011f2 <__eqdf2+0x56>
 80011de:	45d3      	cmp	fp, sl
 80011e0:	d01c      	beq.n	800121c <__eqdf2+0x80>
 80011e2:	2900      	cmp	r1, #0
 80011e4:	d105      	bne.n	80011f2 <__eqdf2+0x56>
 80011e6:	4660      	mov	r0, ip
 80011e8:	4320      	orrs	r0, r4
 80011ea:	1e43      	subs	r3, r0, #1
 80011ec:	4198      	sbcs	r0, r3
 80011ee:	e000      	b.n	80011f2 <__eqdf2+0x56>
 80011f0:	2001      	movs	r0, #1
 80011f2:	bcf0      	pop	{r4, r5, r6, r7}
 80011f4:	46bb      	mov	fp, r7
 80011f6:	46b2      	mov	sl, r6
 80011f8:	46a9      	mov	r9, r5
 80011fa:	46a0      	mov	r8, r4
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	2001      	movs	r0, #1
 8001200:	428e      	cmp	r6, r1
 8001202:	d1f6      	bne.n	80011f2 <__eqdf2+0x56>
 8001204:	4661      	mov	r1, ip
 8001206:	4339      	orrs	r1, r7
 8001208:	000f      	movs	r7, r1
 800120a:	4317      	orrs	r7, r2
 800120c:	4327      	orrs	r7, r4
 800120e:	d1f0      	bne.n	80011f2 <__eqdf2+0x56>
 8001210:	465b      	mov	r3, fp
 8001212:	4652      	mov	r2, sl
 8001214:	1a98      	subs	r0, r3, r2
 8001216:	1e43      	subs	r3, r0, #1
 8001218:	4198      	sbcs	r0, r3
 800121a:	e7ea      	b.n	80011f2 <__eqdf2+0x56>
 800121c:	2000      	movs	r0, #0
 800121e:	e7e8      	b.n	80011f2 <__eqdf2+0x56>
 8001220:	000007ff 	.word	0x000007ff

08001224 <__gedf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	464e      	mov	r6, r9
 800122a:	4645      	mov	r5, r8
 800122c:	46de      	mov	lr, fp
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	000d      	movs	r5, r1
 8001232:	030f      	lsls	r7, r1, #12
 8001234:	0b39      	lsrs	r1, r7, #12
 8001236:	b083      	sub	sp, #12
 8001238:	0004      	movs	r4, r0
 800123a:	4680      	mov	r8, r0
 800123c:	9101      	str	r1, [sp, #4]
 800123e:	0058      	lsls	r0, r3, #1
 8001240:	0fe9      	lsrs	r1, r5, #31
 8001242:	4f31      	ldr	r7, [pc, #196]	@ (8001308 <__gedf2+0xe4>)
 8001244:	0d40      	lsrs	r0, r0, #21
 8001246:	468c      	mov	ip, r1
 8001248:	006e      	lsls	r6, r5, #1
 800124a:	0319      	lsls	r1, r3, #12
 800124c:	4682      	mov	sl, r0
 800124e:	4691      	mov	r9, r2
 8001250:	0d76      	lsrs	r6, r6, #21
 8001252:	0b09      	lsrs	r1, r1, #12
 8001254:	0fd8      	lsrs	r0, r3, #31
 8001256:	42be      	cmp	r6, r7
 8001258:	d01f      	beq.n	800129a <__gedf2+0x76>
 800125a:	45ba      	cmp	sl, r7
 800125c:	d00f      	beq.n	800127e <__gedf2+0x5a>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d12f      	bne.n	80012c2 <__gedf2+0x9e>
 8001262:	4655      	mov	r5, sl
 8001264:	9e01      	ldr	r6, [sp, #4]
 8001266:	4334      	orrs	r4, r6
 8001268:	2d00      	cmp	r5, #0
 800126a:	d127      	bne.n	80012bc <__gedf2+0x98>
 800126c:	430a      	orrs	r2, r1
 800126e:	d03a      	beq.n	80012e6 <__gedf2+0xc2>
 8001270:	2c00      	cmp	r4, #0
 8001272:	d145      	bne.n	8001300 <__gedf2+0xdc>
 8001274:	2800      	cmp	r0, #0
 8001276:	d11a      	bne.n	80012ae <__gedf2+0x8a>
 8001278:	2001      	movs	r0, #1
 800127a:	4240      	negs	r0, r0
 800127c:	e017      	b.n	80012ae <__gedf2+0x8a>
 800127e:	4311      	orrs	r1, r2
 8001280:	d13b      	bne.n	80012fa <__gedf2+0xd6>
 8001282:	2e00      	cmp	r6, #0
 8001284:	d102      	bne.n	800128c <__gedf2+0x68>
 8001286:	9f01      	ldr	r7, [sp, #4]
 8001288:	4327      	orrs	r7, r4
 800128a:	d0f3      	beq.n	8001274 <__gedf2+0x50>
 800128c:	4584      	cmp	ip, r0
 800128e:	d109      	bne.n	80012a4 <__gedf2+0x80>
 8001290:	4663      	mov	r3, ip
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <__gedf2+0x54>
 8001296:	4660      	mov	r0, ip
 8001298:	e009      	b.n	80012ae <__gedf2+0x8a>
 800129a:	9f01      	ldr	r7, [sp, #4]
 800129c:	4327      	orrs	r7, r4
 800129e:	d12c      	bne.n	80012fa <__gedf2+0xd6>
 80012a0:	45b2      	cmp	sl, r6
 80012a2:	d024      	beq.n	80012ee <__gedf2+0xca>
 80012a4:	4663      	mov	r3, ip
 80012a6:	2002      	movs	r0, #2
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4018      	ands	r0, r3
 80012ac:	3801      	subs	r0, #1
 80012ae:	b003      	add	sp, #12
 80012b0:	bcf0      	pop	{r4, r5, r6, r7}
 80012b2:	46bb      	mov	fp, r7
 80012b4:	46b2      	mov	sl, r6
 80012b6:	46a9      	mov	r9, r5
 80012b8:	46a0      	mov	r8, r4
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d0d9      	beq.n	8001274 <__gedf2+0x50>
 80012c0:	e7e4      	b.n	800128c <__gedf2+0x68>
 80012c2:	4654      	mov	r4, sl
 80012c4:	2c00      	cmp	r4, #0
 80012c6:	d0ed      	beq.n	80012a4 <__gedf2+0x80>
 80012c8:	4584      	cmp	ip, r0
 80012ca:	d1eb      	bne.n	80012a4 <__gedf2+0x80>
 80012cc:	4556      	cmp	r6, sl
 80012ce:	dce9      	bgt.n	80012a4 <__gedf2+0x80>
 80012d0:	dbde      	blt.n	8001290 <__gedf2+0x6c>
 80012d2:	9b01      	ldr	r3, [sp, #4]
 80012d4:	428b      	cmp	r3, r1
 80012d6:	d8e5      	bhi.n	80012a4 <__gedf2+0x80>
 80012d8:	d1da      	bne.n	8001290 <__gedf2+0x6c>
 80012da:	45c8      	cmp	r8, r9
 80012dc:	d8e2      	bhi.n	80012a4 <__gedf2+0x80>
 80012de:	2000      	movs	r0, #0
 80012e0:	45c8      	cmp	r8, r9
 80012e2:	d2e4      	bcs.n	80012ae <__gedf2+0x8a>
 80012e4:	e7d4      	b.n	8001290 <__gedf2+0x6c>
 80012e6:	2000      	movs	r0, #0
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d0e0      	beq.n	80012ae <__gedf2+0x8a>
 80012ec:	e7da      	b.n	80012a4 <__gedf2+0x80>
 80012ee:	4311      	orrs	r1, r2
 80012f0:	d103      	bne.n	80012fa <__gedf2+0xd6>
 80012f2:	4584      	cmp	ip, r0
 80012f4:	d1d6      	bne.n	80012a4 <__gedf2+0x80>
 80012f6:	2000      	movs	r0, #0
 80012f8:	e7d9      	b.n	80012ae <__gedf2+0x8a>
 80012fa:	2002      	movs	r0, #2
 80012fc:	4240      	negs	r0, r0
 80012fe:	e7d6      	b.n	80012ae <__gedf2+0x8a>
 8001300:	4584      	cmp	ip, r0
 8001302:	d0e6      	beq.n	80012d2 <__gedf2+0xae>
 8001304:	e7ce      	b.n	80012a4 <__gedf2+0x80>
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	000007ff 	.word	0x000007ff

0800130c <__ledf2>:
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	4657      	mov	r7, sl
 8001310:	464e      	mov	r6, r9
 8001312:	4645      	mov	r5, r8
 8001314:	46de      	mov	lr, fp
 8001316:	b5e0      	push	{r5, r6, r7, lr}
 8001318:	000d      	movs	r5, r1
 800131a:	030f      	lsls	r7, r1, #12
 800131c:	0004      	movs	r4, r0
 800131e:	4680      	mov	r8, r0
 8001320:	0fe8      	lsrs	r0, r5, #31
 8001322:	0b39      	lsrs	r1, r7, #12
 8001324:	4684      	mov	ip, r0
 8001326:	b083      	sub	sp, #12
 8001328:	0058      	lsls	r0, r3, #1
 800132a:	4f30      	ldr	r7, [pc, #192]	@ (80013ec <__ledf2+0xe0>)
 800132c:	0d40      	lsrs	r0, r0, #21
 800132e:	9101      	str	r1, [sp, #4]
 8001330:	031e      	lsls	r6, r3, #12
 8001332:	0069      	lsls	r1, r5, #1
 8001334:	4682      	mov	sl, r0
 8001336:	4691      	mov	r9, r2
 8001338:	0d49      	lsrs	r1, r1, #21
 800133a:	0b36      	lsrs	r6, r6, #12
 800133c:	0fd8      	lsrs	r0, r3, #31
 800133e:	42b9      	cmp	r1, r7
 8001340:	d020      	beq.n	8001384 <__ledf2+0x78>
 8001342:	45ba      	cmp	sl, r7
 8001344:	d00f      	beq.n	8001366 <__ledf2+0x5a>
 8001346:	2900      	cmp	r1, #0
 8001348:	d12b      	bne.n	80013a2 <__ledf2+0x96>
 800134a:	9901      	ldr	r1, [sp, #4]
 800134c:	430c      	orrs	r4, r1
 800134e:	4651      	mov	r1, sl
 8001350:	2900      	cmp	r1, #0
 8001352:	d137      	bne.n	80013c4 <__ledf2+0xb8>
 8001354:	4332      	orrs	r2, r6
 8001356:	d038      	beq.n	80013ca <__ledf2+0xbe>
 8001358:	2c00      	cmp	r4, #0
 800135a:	d144      	bne.n	80013e6 <__ledf2+0xda>
 800135c:	2800      	cmp	r0, #0
 800135e:	d119      	bne.n	8001394 <__ledf2+0x88>
 8001360:	2001      	movs	r0, #1
 8001362:	4240      	negs	r0, r0
 8001364:	e016      	b.n	8001394 <__ledf2+0x88>
 8001366:	4316      	orrs	r6, r2
 8001368:	d113      	bne.n	8001392 <__ledf2+0x86>
 800136a:	2900      	cmp	r1, #0
 800136c:	d102      	bne.n	8001374 <__ledf2+0x68>
 800136e:	9f01      	ldr	r7, [sp, #4]
 8001370:	4327      	orrs	r7, r4
 8001372:	d0f3      	beq.n	800135c <__ledf2+0x50>
 8001374:	4584      	cmp	ip, r0
 8001376:	d020      	beq.n	80013ba <__ledf2+0xae>
 8001378:	4663      	mov	r3, ip
 800137a:	2002      	movs	r0, #2
 800137c:	3b01      	subs	r3, #1
 800137e:	4018      	ands	r0, r3
 8001380:	3801      	subs	r0, #1
 8001382:	e007      	b.n	8001394 <__ledf2+0x88>
 8001384:	9f01      	ldr	r7, [sp, #4]
 8001386:	4327      	orrs	r7, r4
 8001388:	d103      	bne.n	8001392 <__ledf2+0x86>
 800138a:	458a      	cmp	sl, r1
 800138c:	d1f4      	bne.n	8001378 <__ledf2+0x6c>
 800138e:	4316      	orrs	r6, r2
 8001390:	d01f      	beq.n	80013d2 <__ledf2+0xc6>
 8001392:	2002      	movs	r0, #2
 8001394:	b003      	add	sp, #12
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	4654      	mov	r4, sl
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d0e7      	beq.n	8001378 <__ledf2+0x6c>
 80013a8:	4584      	cmp	ip, r0
 80013aa:	d1e5      	bne.n	8001378 <__ledf2+0x6c>
 80013ac:	4551      	cmp	r1, sl
 80013ae:	dce3      	bgt.n	8001378 <__ledf2+0x6c>
 80013b0:	db03      	blt.n	80013ba <__ledf2+0xae>
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	42b3      	cmp	r3, r6
 80013b6:	d8df      	bhi.n	8001378 <__ledf2+0x6c>
 80013b8:	d00f      	beq.n	80013da <__ledf2+0xce>
 80013ba:	4663      	mov	r3, ip
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0cf      	beq.n	8001360 <__ledf2+0x54>
 80013c0:	4660      	mov	r0, ip
 80013c2:	e7e7      	b.n	8001394 <__ledf2+0x88>
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d0c9      	beq.n	800135c <__ledf2+0x50>
 80013c8:	e7d4      	b.n	8001374 <__ledf2+0x68>
 80013ca:	2000      	movs	r0, #0
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0e1      	beq.n	8001394 <__ledf2+0x88>
 80013d0:	e7d2      	b.n	8001378 <__ledf2+0x6c>
 80013d2:	4584      	cmp	ip, r0
 80013d4:	d1d0      	bne.n	8001378 <__ledf2+0x6c>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7dc      	b.n	8001394 <__ledf2+0x88>
 80013da:	45c8      	cmp	r8, r9
 80013dc:	d8cc      	bhi.n	8001378 <__ledf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	45c8      	cmp	r8, r9
 80013e2:	d2d7      	bcs.n	8001394 <__ledf2+0x88>
 80013e4:	e7e9      	b.n	80013ba <__ledf2+0xae>
 80013e6:	4584      	cmp	ip, r0
 80013e8:	d0e3      	beq.n	80013b2 <__ledf2+0xa6>
 80013ea:	e7c5      	b.n	8001378 <__ledf2+0x6c>
 80013ec:	000007ff 	.word	0x000007ff

080013f0 <__aeabi_dmul>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	4657      	mov	r7, sl
 80013f4:	46de      	mov	lr, fp
 80013f6:	464e      	mov	r6, r9
 80013f8:	4645      	mov	r5, r8
 80013fa:	b5e0      	push	{r5, r6, r7, lr}
 80013fc:	001f      	movs	r7, r3
 80013fe:	030b      	lsls	r3, r1, #12
 8001400:	0b1b      	lsrs	r3, r3, #12
 8001402:	0016      	movs	r6, r2
 8001404:	469a      	mov	sl, r3
 8001406:	0fca      	lsrs	r2, r1, #31
 8001408:	004b      	lsls	r3, r1, #1
 800140a:	0004      	movs	r4, r0
 800140c:	4693      	mov	fp, r2
 800140e:	b087      	sub	sp, #28
 8001410:	0d5b      	lsrs	r3, r3, #21
 8001412:	d100      	bne.n	8001416 <__aeabi_dmul+0x26>
 8001414:	e0d5      	b.n	80015c2 <__aeabi_dmul+0x1d2>
 8001416:	4abb      	ldr	r2, [pc, #748]	@ (8001704 <__aeabi_dmul+0x314>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x2e>
 800141c:	e0f8      	b.n	8001610 <__aeabi_dmul+0x220>
 800141e:	4651      	mov	r1, sl
 8001420:	0f42      	lsrs	r2, r0, #29
 8001422:	00c9      	lsls	r1, r1, #3
 8001424:	430a      	orrs	r2, r1
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	0409      	lsls	r1, r1, #16
 800142a:	4311      	orrs	r1, r2
 800142c:	00c2      	lsls	r2, r0, #3
 800142e:	4691      	mov	r9, r2
 8001430:	4ab5      	ldr	r2, [pc, #724]	@ (8001708 <__aeabi_dmul+0x318>)
 8001432:	468a      	mov	sl, r1
 8001434:	189d      	adds	r5, r3, r2
 8001436:	2300      	movs	r3, #0
 8001438:	4698      	mov	r8, r3
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	033c      	lsls	r4, r7, #12
 800143e:	007b      	lsls	r3, r7, #1
 8001440:	0ffa      	lsrs	r2, r7, #31
 8001442:	0030      	movs	r0, r6
 8001444:	0b24      	lsrs	r4, r4, #12
 8001446:	0d5b      	lsrs	r3, r3, #21
 8001448:	9200      	str	r2, [sp, #0]
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x5e>
 800144c:	e096      	b.n	800157c <__aeabi_dmul+0x18c>
 800144e:	4aad      	ldr	r2, [pc, #692]	@ (8001704 <__aeabi_dmul+0x314>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d031      	beq.n	80014b8 <__aeabi_dmul+0xc8>
 8001454:	0f72      	lsrs	r2, r6, #29
 8001456:	00e4      	lsls	r4, r4, #3
 8001458:	4322      	orrs	r2, r4
 800145a:	2480      	movs	r4, #128	@ 0x80
 800145c:	0424      	lsls	r4, r4, #16
 800145e:	4314      	orrs	r4, r2
 8001460:	4aa9      	ldr	r2, [pc, #676]	@ (8001708 <__aeabi_dmul+0x318>)
 8001462:	00f0      	lsls	r0, r6, #3
 8001464:	4694      	mov	ip, r2
 8001466:	4463      	add	r3, ip
 8001468:	195b      	adds	r3, r3, r5
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	4642      	mov	r2, r8
 8001470:	2600      	movs	r6, #0
 8001472:	2a0a      	cmp	r2, #10
 8001474:	dc42      	bgt.n	80014fc <__aeabi_dmul+0x10c>
 8001476:	465a      	mov	r2, fp
 8001478:	9900      	ldr	r1, [sp, #0]
 800147a:	404a      	eors	r2, r1
 800147c:	4693      	mov	fp, r2
 800147e:	4642      	mov	r2, r8
 8001480:	2a02      	cmp	r2, #2
 8001482:	dc32      	bgt.n	80014ea <__aeabi_dmul+0xfa>
 8001484:	3a01      	subs	r2, #1
 8001486:	2a01      	cmp	r2, #1
 8001488:	d900      	bls.n	800148c <__aeabi_dmul+0x9c>
 800148a:	e149      	b.n	8001720 <__aeabi_dmul+0x330>
 800148c:	2e02      	cmp	r6, #2
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0xa2>
 8001490:	e0ca      	b.n	8001628 <__aeabi_dmul+0x238>
 8001492:	2e01      	cmp	r6, #1
 8001494:	d13d      	bne.n	8001512 <__aeabi_dmul+0x122>
 8001496:	2300      	movs	r3, #0
 8001498:	2400      	movs	r4, #0
 800149a:	2200      	movs	r2, #0
 800149c:	0010      	movs	r0, r2
 800149e:	465a      	mov	r2, fp
 80014a0:	051b      	lsls	r3, r3, #20
 80014a2:	4323      	orrs	r3, r4
 80014a4:	07d2      	lsls	r2, r2, #31
 80014a6:	4313      	orrs	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	b007      	add	sp, #28
 80014ac:	bcf0      	pop	{r4, r5, r6, r7}
 80014ae:	46bb      	mov	fp, r7
 80014b0:	46b2      	mov	sl, r6
 80014b2:	46a9      	mov	r9, r5
 80014b4:	46a0      	mov	r8, r4
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <__aeabi_dmul+0x314>)
 80014ba:	4326      	orrs	r6, r4
 80014bc:	18eb      	adds	r3, r5, r3
 80014be:	2e00      	cmp	r6, #0
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0xd4>
 80014c2:	e0bb      	b.n	800163c <__aeabi_dmul+0x24c>
 80014c4:	2203      	movs	r2, #3
 80014c6:	4641      	mov	r1, r8
 80014c8:	4311      	orrs	r1, r2
 80014ca:	465a      	mov	r2, fp
 80014cc:	4688      	mov	r8, r1
 80014ce:	9900      	ldr	r1, [sp, #0]
 80014d0:	404a      	eors	r2, r1
 80014d2:	2180      	movs	r1, #128	@ 0x80
 80014d4:	0109      	lsls	r1, r1, #4
 80014d6:	468c      	mov	ip, r1
 80014d8:	0029      	movs	r1, r5
 80014da:	4461      	add	r1, ip
 80014dc:	9101      	str	r1, [sp, #4]
 80014de:	4641      	mov	r1, r8
 80014e0:	290a      	cmp	r1, #10
 80014e2:	dd00      	ble.n	80014e6 <__aeabi_dmul+0xf6>
 80014e4:	e233      	b.n	800194e <__aeabi_dmul+0x55e>
 80014e6:	4693      	mov	fp, r2
 80014e8:	2603      	movs	r6, #3
 80014ea:	4642      	mov	r2, r8
 80014ec:	2701      	movs	r7, #1
 80014ee:	4097      	lsls	r7, r2
 80014f0:	21a6      	movs	r1, #166	@ 0xa6
 80014f2:	003a      	movs	r2, r7
 80014f4:	00c9      	lsls	r1, r1, #3
 80014f6:	400a      	ands	r2, r1
 80014f8:	420f      	tst	r7, r1
 80014fa:	d031      	beq.n	8001560 <__aeabi_dmul+0x170>
 80014fc:	9e02      	ldr	r6, [sp, #8]
 80014fe:	2e02      	cmp	r6, #2
 8001500:	d100      	bne.n	8001504 <__aeabi_dmul+0x114>
 8001502:	e235      	b.n	8001970 <__aeabi_dmul+0x580>
 8001504:	2e03      	cmp	r6, #3
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x11a>
 8001508:	e1d2      	b.n	80018b0 <__aeabi_dmul+0x4c0>
 800150a:	4654      	mov	r4, sl
 800150c:	4648      	mov	r0, r9
 800150e:	2e01      	cmp	r6, #1
 8001510:	d0c1      	beq.n	8001496 <__aeabi_dmul+0xa6>
 8001512:	9a01      	ldr	r2, [sp, #4]
 8001514:	4b7d      	ldr	r3, [pc, #500]	@ (800170c <__aeabi_dmul+0x31c>)
 8001516:	4694      	mov	ip, r2
 8001518:	4463      	add	r3, ip
 800151a:	2b00      	cmp	r3, #0
 800151c:	dc00      	bgt.n	8001520 <__aeabi_dmul+0x130>
 800151e:	e0c0      	b.n	80016a2 <__aeabi_dmul+0x2b2>
 8001520:	0742      	lsls	r2, r0, #29
 8001522:	d009      	beq.n	8001538 <__aeabi_dmul+0x148>
 8001524:	220f      	movs	r2, #15
 8001526:	4002      	ands	r2, r0
 8001528:	2a04      	cmp	r2, #4
 800152a:	d005      	beq.n	8001538 <__aeabi_dmul+0x148>
 800152c:	1d02      	adds	r2, r0, #4
 800152e:	4282      	cmp	r2, r0
 8001530:	4180      	sbcs	r0, r0
 8001532:	4240      	negs	r0, r0
 8001534:	1824      	adds	r4, r4, r0
 8001536:	0010      	movs	r0, r2
 8001538:	01e2      	lsls	r2, r4, #7
 800153a:	d506      	bpl.n	800154a <__aeabi_dmul+0x15a>
 800153c:	4b74      	ldr	r3, [pc, #464]	@ (8001710 <__aeabi_dmul+0x320>)
 800153e:	9a01      	ldr	r2, [sp, #4]
 8001540:	401c      	ands	r4, r3
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	4694      	mov	ip, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4463      	add	r3, ip
 800154a:	4a72      	ldr	r2, [pc, #456]	@ (8001714 <__aeabi_dmul+0x324>)
 800154c:	4293      	cmp	r3, r2
 800154e:	dc6b      	bgt.n	8001628 <__aeabi_dmul+0x238>
 8001550:	0762      	lsls	r2, r4, #29
 8001552:	08c0      	lsrs	r0, r0, #3
 8001554:	0264      	lsls	r4, r4, #9
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	4302      	orrs	r2, r0
 800155a:	0b24      	lsrs	r4, r4, #12
 800155c:	0d5b      	lsrs	r3, r3, #21
 800155e:	e79d      	b.n	800149c <__aeabi_dmul+0xac>
 8001560:	2190      	movs	r1, #144	@ 0x90
 8001562:	0089      	lsls	r1, r1, #2
 8001564:	420f      	tst	r7, r1
 8001566:	d163      	bne.n	8001630 <__aeabi_dmul+0x240>
 8001568:	2288      	movs	r2, #136	@ 0x88
 800156a:	423a      	tst	r2, r7
 800156c:	d100      	bne.n	8001570 <__aeabi_dmul+0x180>
 800156e:	e0d7      	b.n	8001720 <__aeabi_dmul+0x330>
 8001570:	9b00      	ldr	r3, [sp, #0]
 8001572:	46a2      	mov	sl, r4
 8001574:	469b      	mov	fp, r3
 8001576:	4681      	mov	r9, r0
 8001578:	9602      	str	r6, [sp, #8]
 800157a:	e7bf      	b.n	80014fc <__aeabi_dmul+0x10c>
 800157c:	0023      	movs	r3, r4
 800157e:	4333      	orrs	r3, r6
 8001580:	d100      	bne.n	8001584 <__aeabi_dmul+0x194>
 8001582:	e07f      	b.n	8001684 <__aeabi_dmul+0x294>
 8001584:	2c00      	cmp	r4, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0x19a>
 8001588:	e1ad      	b.n	80018e6 <__aeabi_dmul+0x4f6>
 800158a:	0020      	movs	r0, r4
 800158c:	f000 ff10 	bl	80023b0 <__clzsi2>
 8001590:	0002      	movs	r2, r0
 8001592:	0003      	movs	r3, r0
 8001594:	3a0b      	subs	r2, #11
 8001596:	201d      	movs	r0, #29
 8001598:	0019      	movs	r1, r3
 800159a:	1a82      	subs	r2, r0, r2
 800159c:	0030      	movs	r0, r6
 800159e:	3908      	subs	r1, #8
 80015a0:	40d0      	lsrs	r0, r2
 80015a2:	408c      	lsls	r4, r1
 80015a4:	4304      	orrs	r4, r0
 80015a6:	0030      	movs	r0, r6
 80015a8:	4088      	lsls	r0, r1
 80015aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <__aeabi_dmul+0x328>)
 80015ac:	1aeb      	subs	r3, r5, r3
 80015ae:	4694      	mov	ip, r2
 80015b0:	4463      	add	r3, ip
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	4642      	mov	r2, r8
 80015b8:	2600      	movs	r6, #0
 80015ba:	2a0a      	cmp	r2, #10
 80015bc:	dc00      	bgt.n	80015c0 <__aeabi_dmul+0x1d0>
 80015be:	e75a      	b.n	8001476 <__aeabi_dmul+0x86>
 80015c0:	e79c      	b.n	80014fc <__aeabi_dmul+0x10c>
 80015c2:	4653      	mov	r3, sl
 80015c4:	4303      	orrs	r3, r0
 80015c6:	4699      	mov	r9, r3
 80015c8:	d054      	beq.n	8001674 <__aeabi_dmul+0x284>
 80015ca:	4653      	mov	r3, sl
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x1e2>
 80015d0:	e177      	b.n	80018c2 <__aeabi_dmul+0x4d2>
 80015d2:	4650      	mov	r0, sl
 80015d4:	f000 feec 	bl	80023b0 <__clzsi2>
 80015d8:	230b      	movs	r3, #11
 80015da:	425b      	negs	r3, r3
 80015dc:	469c      	mov	ip, r3
 80015de:	0002      	movs	r2, r0
 80015e0:	4484      	add	ip, r0
 80015e2:	0011      	movs	r1, r2
 80015e4:	4650      	mov	r0, sl
 80015e6:	3908      	subs	r1, #8
 80015e8:	4088      	lsls	r0, r1
 80015ea:	231d      	movs	r3, #29
 80015ec:	4680      	mov	r8, r0
 80015ee:	4660      	mov	r0, ip
 80015f0:	1a1b      	subs	r3, r3, r0
 80015f2:	0020      	movs	r0, r4
 80015f4:	40d8      	lsrs	r0, r3
 80015f6:	0003      	movs	r3, r0
 80015f8:	4640      	mov	r0, r8
 80015fa:	4303      	orrs	r3, r0
 80015fc:	469a      	mov	sl, r3
 80015fe:	0023      	movs	r3, r4
 8001600:	408b      	lsls	r3, r1
 8001602:	4699      	mov	r9, r3
 8001604:	2300      	movs	r3, #0
 8001606:	4d44      	ldr	r5, [pc, #272]	@ (8001718 <__aeabi_dmul+0x328>)
 8001608:	4698      	mov	r8, r3
 800160a:	1aad      	subs	r5, r5, r2
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	e715      	b.n	800143c <__aeabi_dmul+0x4c>
 8001610:	4652      	mov	r2, sl
 8001612:	4302      	orrs	r2, r0
 8001614:	4691      	mov	r9, r2
 8001616:	d126      	bne.n	8001666 <__aeabi_dmul+0x276>
 8001618:	2200      	movs	r2, #0
 800161a:	001d      	movs	r5, r3
 800161c:	2302      	movs	r3, #2
 800161e:	4692      	mov	sl, r2
 8001620:	3208      	adds	r2, #8
 8001622:	4690      	mov	r8, r2
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	e709      	b.n	800143c <__aeabi_dmul+0x4c>
 8001628:	2400      	movs	r4, #0
 800162a:	2200      	movs	r2, #0
 800162c:	4b35      	ldr	r3, [pc, #212]	@ (8001704 <__aeabi_dmul+0x314>)
 800162e:	e735      	b.n	800149c <__aeabi_dmul+0xac>
 8001630:	2300      	movs	r3, #0
 8001632:	2480      	movs	r4, #128	@ 0x80
 8001634:	469b      	mov	fp, r3
 8001636:	0324      	lsls	r4, r4, #12
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <__aeabi_dmul+0x314>)
 800163a:	e72f      	b.n	800149c <__aeabi_dmul+0xac>
 800163c:	2202      	movs	r2, #2
 800163e:	4641      	mov	r1, r8
 8001640:	4311      	orrs	r1, r2
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	4694      	mov	ip, r2
 8001648:	002a      	movs	r2, r5
 800164a:	4462      	add	r2, ip
 800164c:	4688      	mov	r8, r1
 800164e:	9201      	str	r2, [sp, #4]
 8001650:	290a      	cmp	r1, #10
 8001652:	dd00      	ble.n	8001656 <__aeabi_dmul+0x266>
 8001654:	e752      	b.n	80014fc <__aeabi_dmul+0x10c>
 8001656:	465a      	mov	r2, fp
 8001658:	2000      	movs	r0, #0
 800165a:	9900      	ldr	r1, [sp, #0]
 800165c:	0004      	movs	r4, r0
 800165e:	404a      	eors	r2, r1
 8001660:	4693      	mov	fp, r2
 8001662:	2602      	movs	r6, #2
 8001664:	e70b      	b.n	800147e <__aeabi_dmul+0x8e>
 8001666:	220c      	movs	r2, #12
 8001668:	001d      	movs	r5, r3
 800166a:	2303      	movs	r3, #3
 800166c:	4681      	mov	r9, r0
 800166e:	4690      	mov	r8, r2
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	e6e3      	b.n	800143c <__aeabi_dmul+0x4c>
 8001674:	2300      	movs	r3, #0
 8001676:	469a      	mov	sl, r3
 8001678:	3304      	adds	r3, #4
 800167a:	4698      	mov	r8, r3
 800167c:	3b03      	subs	r3, #3
 800167e:	2500      	movs	r5, #0
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	e6db      	b.n	800143c <__aeabi_dmul+0x4c>
 8001684:	4642      	mov	r2, r8
 8001686:	3301      	adds	r3, #1
 8001688:	431a      	orrs	r2, r3
 800168a:	002b      	movs	r3, r5
 800168c:	4690      	mov	r8, r2
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	4642      	mov	r2, r8
 8001694:	2400      	movs	r4, #0
 8001696:	2000      	movs	r0, #0
 8001698:	2601      	movs	r6, #1
 800169a:	2a0a      	cmp	r2, #10
 800169c:	dc00      	bgt.n	80016a0 <__aeabi_dmul+0x2b0>
 800169e:	e6ea      	b.n	8001476 <__aeabi_dmul+0x86>
 80016a0:	e72c      	b.n	80014fc <__aeabi_dmul+0x10c>
 80016a2:	2201      	movs	r2, #1
 80016a4:	1ad2      	subs	r2, r2, r3
 80016a6:	2a38      	cmp	r2, #56	@ 0x38
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x2bc>
 80016aa:	e6f4      	b.n	8001496 <__aeabi_dmul+0xa6>
 80016ac:	2a1f      	cmp	r2, #31
 80016ae:	dc00      	bgt.n	80016b2 <__aeabi_dmul+0x2c2>
 80016b0:	e12a      	b.n	8001908 <__aeabi_dmul+0x518>
 80016b2:	211f      	movs	r1, #31
 80016b4:	4249      	negs	r1, r1
 80016b6:	1acb      	subs	r3, r1, r3
 80016b8:	0021      	movs	r1, r4
 80016ba:	40d9      	lsrs	r1, r3
 80016bc:	000b      	movs	r3, r1
 80016be:	2a20      	cmp	r2, #32
 80016c0:	d005      	beq.n	80016ce <__aeabi_dmul+0x2de>
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <__aeabi_dmul+0x32c>)
 80016c4:	9d01      	ldr	r5, [sp, #4]
 80016c6:	4694      	mov	ip, r2
 80016c8:	4465      	add	r5, ip
 80016ca:	40ac      	lsls	r4, r5
 80016cc:	4320      	orrs	r0, r4
 80016ce:	1e42      	subs	r2, r0, #1
 80016d0:	4190      	sbcs	r0, r2
 80016d2:	4318      	orrs	r0, r3
 80016d4:	2307      	movs	r3, #7
 80016d6:	0019      	movs	r1, r3
 80016d8:	2400      	movs	r4, #0
 80016da:	4001      	ands	r1, r0
 80016dc:	4203      	tst	r3, r0
 80016de:	d00c      	beq.n	80016fa <__aeabi_dmul+0x30a>
 80016e0:	230f      	movs	r3, #15
 80016e2:	4003      	ands	r3, r0
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x2fa>
 80016e8:	e140      	b.n	800196c <__aeabi_dmul+0x57c>
 80016ea:	1d03      	adds	r3, r0, #4
 80016ec:	4283      	cmp	r3, r0
 80016ee:	41a4      	sbcs	r4, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	4264      	negs	r4, r4
 80016f4:	0761      	lsls	r1, r4, #29
 80016f6:	0264      	lsls	r4, r4, #9
 80016f8:	0b24      	lsrs	r4, r4, #12
 80016fa:	08c2      	lsrs	r2, r0, #3
 80016fc:	2300      	movs	r3, #0
 80016fe:	430a      	orrs	r2, r1
 8001700:	e6cc      	b.n	800149c <__aeabi_dmul+0xac>
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	000007ff 	.word	0x000007ff
 8001708:	fffffc01 	.word	0xfffffc01
 800170c:	000003ff 	.word	0x000003ff
 8001710:	feffffff 	.word	0xfeffffff
 8001714:	000007fe 	.word	0x000007fe
 8001718:	fffffc0d 	.word	0xfffffc0d
 800171c:	0000043e 	.word	0x0000043e
 8001720:	4649      	mov	r1, r9
 8001722:	464a      	mov	r2, r9
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	0c09      	lsrs	r1, r1, #16
 8001728:	000d      	movs	r5, r1
 800172a:	0c16      	lsrs	r6, r2, #16
 800172c:	0c02      	lsrs	r2, r0, #16
 800172e:	0400      	lsls	r0, r0, #16
 8001730:	0c00      	lsrs	r0, r0, #16
 8001732:	4345      	muls	r5, r0
 8001734:	46ac      	mov	ip, r5
 8001736:	0005      	movs	r5, r0
 8001738:	4375      	muls	r5, r6
 800173a:	46a8      	mov	r8, r5
 800173c:	0015      	movs	r5, r2
 800173e:	000f      	movs	r7, r1
 8001740:	4375      	muls	r5, r6
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	9502      	str	r5, [sp, #8]
 8001746:	002a      	movs	r2, r5
 8001748:	9d00      	ldr	r5, [sp, #0]
 800174a:	436f      	muls	r7, r5
 800174c:	4665      	mov	r5, ip
 800174e:	0c2d      	lsrs	r5, r5, #16
 8001750:	46a9      	mov	r9, r5
 8001752:	4447      	add	r7, r8
 8001754:	444f      	add	r7, r9
 8001756:	45b8      	cmp	r8, r7
 8001758:	d905      	bls.n	8001766 <__aeabi_dmul+0x376>
 800175a:	0015      	movs	r5, r2
 800175c:	2280      	movs	r2, #128	@ 0x80
 800175e:	0252      	lsls	r2, r2, #9
 8001760:	4690      	mov	r8, r2
 8001762:	4445      	add	r5, r8
 8001764:	9502      	str	r5, [sp, #8]
 8001766:	0c3d      	lsrs	r5, r7, #16
 8001768:	9503      	str	r5, [sp, #12]
 800176a:	4665      	mov	r5, ip
 800176c:	042d      	lsls	r5, r5, #16
 800176e:	043f      	lsls	r7, r7, #16
 8001770:	0c2d      	lsrs	r5, r5, #16
 8001772:	46ac      	mov	ip, r5
 8001774:	003d      	movs	r5, r7
 8001776:	4465      	add	r5, ip
 8001778:	9504      	str	r5, [sp, #16]
 800177a:	0c25      	lsrs	r5, r4, #16
 800177c:	0424      	lsls	r4, r4, #16
 800177e:	0c24      	lsrs	r4, r4, #16
 8001780:	46ac      	mov	ip, r5
 8001782:	0025      	movs	r5, r4
 8001784:	4375      	muls	r5, r6
 8001786:	46a8      	mov	r8, r5
 8001788:	4665      	mov	r5, ip
 800178a:	000f      	movs	r7, r1
 800178c:	4369      	muls	r1, r5
 800178e:	4441      	add	r1, r8
 8001790:	4689      	mov	r9, r1
 8001792:	4367      	muls	r7, r4
 8001794:	0c39      	lsrs	r1, r7, #16
 8001796:	4449      	add	r1, r9
 8001798:	436e      	muls	r6, r5
 800179a:	4588      	cmp	r8, r1
 800179c:	d903      	bls.n	80017a6 <__aeabi_dmul+0x3b6>
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	0252      	lsls	r2, r2, #9
 80017a2:	4690      	mov	r8, r2
 80017a4:	4446      	add	r6, r8
 80017a6:	0c0d      	lsrs	r5, r1, #16
 80017a8:	46a8      	mov	r8, r5
 80017aa:	0035      	movs	r5, r6
 80017ac:	4445      	add	r5, r8
 80017ae:	9505      	str	r5, [sp, #20]
 80017b0:	9d03      	ldr	r5, [sp, #12]
 80017b2:	043f      	lsls	r7, r7, #16
 80017b4:	46a8      	mov	r8, r5
 80017b6:	0c3f      	lsrs	r7, r7, #16
 80017b8:	0409      	lsls	r1, r1, #16
 80017ba:	19c9      	adds	r1, r1, r7
 80017bc:	4488      	add	r8, r1
 80017be:	4645      	mov	r5, r8
 80017c0:	9503      	str	r5, [sp, #12]
 80017c2:	4655      	mov	r5, sl
 80017c4:	042e      	lsls	r6, r5, #16
 80017c6:	0c36      	lsrs	r6, r6, #16
 80017c8:	0c2f      	lsrs	r7, r5, #16
 80017ca:	0035      	movs	r5, r6
 80017cc:	4345      	muls	r5, r0
 80017ce:	4378      	muls	r0, r7
 80017d0:	4681      	mov	r9, r0
 80017d2:	0038      	movs	r0, r7
 80017d4:	46a8      	mov	r8, r5
 80017d6:	0c2d      	lsrs	r5, r5, #16
 80017d8:	46aa      	mov	sl, r5
 80017da:	9a00      	ldr	r2, [sp, #0]
 80017dc:	4350      	muls	r0, r2
 80017de:	4372      	muls	r2, r6
 80017e0:	444a      	add	r2, r9
 80017e2:	4452      	add	r2, sl
 80017e4:	4591      	cmp	r9, r2
 80017e6:	d903      	bls.n	80017f0 <__aeabi_dmul+0x400>
 80017e8:	2580      	movs	r5, #128	@ 0x80
 80017ea:	026d      	lsls	r5, r5, #9
 80017ec:	46a9      	mov	r9, r5
 80017ee:	4448      	add	r0, r9
 80017f0:	0c15      	lsrs	r5, r2, #16
 80017f2:	46a9      	mov	r9, r5
 80017f4:	4645      	mov	r5, r8
 80017f6:	042d      	lsls	r5, r5, #16
 80017f8:	0c2d      	lsrs	r5, r5, #16
 80017fa:	46a8      	mov	r8, r5
 80017fc:	4665      	mov	r5, ip
 80017fe:	437d      	muls	r5, r7
 8001800:	0412      	lsls	r2, r2, #16
 8001802:	4448      	add	r0, r9
 8001804:	4490      	add	r8, r2
 8001806:	46a9      	mov	r9, r5
 8001808:	0032      	movs	r2, r6
 800180a:	4665      	mov	r5, ip
 800180c:	4362      	muls	r2, r4
 800180e:	436e      	muls	r6, r5
 8001810:	437c      	muls	r4, r7
 8001812:	0c17      	lsrs	r7, r2, #16
 8001814:	1936      	adds	r6, r6, r4
 8001816:	19bf      	adds	r7, r7, r6
 8001818:	42bc      	cmp	r4, r7
 800181a:	d903      	bls.n	8001824 <__aeabi_dmul+0x434>
 800181c:	2480      	movs	r4, #128	@ 0x80
 800181e:	0264      	lsls	r4, r4, #9
 8001820:	46a4      	mov	ip, r4
 8001822:	44e1      	add	r9, ip
 8001824:	9c02      	ldr	r4, [sp, #8]
 8001826:	9e03      	ldr	r6, [sp, #12]
 8001828:	46a4      	mov	ip, r4
 800182a:	9d05      	ldr	r5, [sp, #20]
 800182c:	4466      	add	r6, ip
 800182e:	428e      	cmp	r6, r1
 8001830:	4189      	sbcs	r1, r1
 8001832:	46ac      	mov	ip, r5
 8001834:	0412      	lsls	r2, r2, #16
 8001836:	043c      	lsls	r4, r7, #16
 8001838:	0c12      	lsrs	r2, r2, #16
 800183a:	18a2      	adds	r2, r4, r2
 800183c:	4462      	add	r2, ip
 800183e:	4249      	negs	r1, r1
 8001840:	1854      	adds	r4, r2, r1
 8001842:	4446      	add	r6, r8
 8001844:	46a4      	mov	ip, r4
 8001846:	4546      	cmp	r6, r8
 8001848:	41a4      	sbcs	r4, r4
 800184a:	4682      	mov	sl, r0
 800184c:	4264      	negs	r4, r4
 800184e:	46a0      	mov	r8, r4
 8001850:	42aa      	cmp	r2, r5
 8001852:	4192      	sbcs	r2, r2
 8001854:	458c      	cmp	ip, r1
 8001856:	4189      	sbcs	r1, r1
 8001858:	44e2      	add	sl, ip
 800185a:	44d0      	add	r8, sl
 800185c:	4249      	negs	r1, r1
 800185e:	4252      	negs	r2, r2
 8001860:	430a      	orrs	r2, r1
 8001862:	45a0      	cmp	r8, r4
 8001864:	41a4      	sbcs	r4, r4
 8001866:	4582      	cmp	sl, r0
 8001868:	4189      	sbcs	r1, r1
 800186a:	4264      	negs	r4, r4
 800186c:	4249      	negs	r1, r1
 800186e:	430c      	orrs	r4, r1
 8001870:	4641      	mov	r1, r8
 8001872:	0c3f      	lsrs	r7, r7, #16
 8001874:	19d2      	adds	r2, r2, r7
 8001876:	1912      	adds	r2, r2, r4
 8001878:	0dcc      	lsrs	r4, r1, #23
 800187a:	9904      	ldr	r1, [sp, #16]
 800187c:	0270      	lsls	r0, r6, #9
 800187e:	4308      	orrs	r0, r1
 8001880:	1e41      	subs	r1, r0, #1
 8001882:	4188      	sbcs	r0, r1
 8001884:	4641      	mov	r1, r8
 8001886:	444a      	add	r2, r9
 8001888:	0df6      	lsrs	r6, r6, #23
 800188a:	0252      	lsls	r2, r2, #9
 800188c:	4330      	orrs	r0, r6
 800188e:	0249      	lsls	r1, r1, #9
 8001890:	4314      	orrs	r4, r2
 8001892:	4308      	orrs	r0, r1
 8001894:	01d2      	lsls	r2, r2, #7
 8001896:	d535      	bpl.n	8001904 <__aeabi_dmul+0x514>
 8001898:	2201      	movs	r2, #1
 800189a:	0843      	lsrs	r3, r0, #1
 800189c:	4002      	ands	r2, r0
 800189e:	4313      	orrs	r3, r2
 80018a0:	07e0      	lsls	r0, r4, #31
 80018a2:	4318      	orrs	r0, r3
 80018a4:	0864      	lsrs	r4, r4, #1
 80018a6:	e634      	b.n	8001512 <__aeabi_dmul+0x122>
 80018a8:	9b00      	ldr	r3, [sp, #0]
 80018aa:	46a2      	mov	sl, r4
 80018ac:	469b      	mov	fp, r3
 80018ae:	4681      	mov	r9, r0
 80018b0:	2480      	movs	r4, #128	@ 0x80
 80018b2:	4653      	mov	r3, sl
 80018b4:	0324      	lsls	r4, r4, #12
 80018b6:	431c      	orrs	r4, r3
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	464a      	mov	r2, r9
 80018bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <__aeabi_dmul+0x588>)
 80018be:	0b24      	lsrs	r4, r4, #12
 80018c0:	e5ec      	b.n	800149c <__aeabi_dmul+0xac>
 80018c2:	f000 fd75 	bl	80023b0 <__clzsi2>
 80018c6:	2315      	movs	r3, #21
 80018c8:	469c      	mov	ip, r3
 80018ca:	4484      	add	ip, r0
 80018cc:	0002      	movs	r2, r0
 80018ce:	4663      	mov	r3, ip
 80018d0:	3220      	adds	r2, #32
 80018d2:	2b1c      	cmp	r3, #28
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_dmul+0x4e8>
 80018d6:	e684      	b.n	80015e2 <__aeabi_dmul+0x1f2>
 80018d8:	2300      	movs	r3, #0
 80018da:	4699      	mov	r9, r3
 80018dc:	0023      	movs	r3, r4
 80018de:	3808      	subs	r0, #8
 80018e0:	4083      	lsls	r3, r0
 80018e2:	469a      	mov	sl, r3
 80018e4:	e68e      	b.n	8001604 <__aeabi_dmul+0x214>
 80018e6:	f000 fd63 	bl	80023b0 <__clzsi2>
 80018ea:	0002      	movs	r2, r0
 80018ec:	0003      	movs	r3, r0
 80018ee:	3215      	adds	r2, #21
 80018f0:	3320      	adds	r3, #32
 80018f2:	2a1c      	cmp	r2, #28
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x508>
 80018f6:	e64e      	b.n	8001596 <__aeabi_dmul+0x1a6>
 80018f8:	0002      	movs	r2, r0
 80018fa:	0034      	movs	r4, r6
 80018fc:	3a08      	subs	r2, #8
 80018fe:	2000      	movs	r0, #0
 8001900:	4094      	lsls	r4, r2
 8001902:	e652      	b.n	80015aa <__aeabi_dmul+0x1ba>
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	e604      	b.n	8001512 <__aeabi_dmul+0x122>
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <__aeabi_dmul+0x58c>)
 800190a:	0021      	movs	r1, r4
 800190c:	469c      	mov	ip, r3
 800190e:	0003      	movs	r3, r0
 8001910:	9d01      	ldr	r5, [sp, #4]
 8001912:	40d3      	lsrs	r3, r2
 8001914:	4465      	add	r5, ip
 8001916:	40a9      	lsls	r1, r5
 8001918:	4319      	orrs	r1, r3
 800191a:	0003      	movs	r3, r0
 800191c:	40ab      	lsls	r3, r5
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	4183      	sbcs	r3, r0
 8001922:	4319      	orrs	r1, r3
 8001924:	0008      	movs	r0, r1
 8001926:	40d4      	lsrs	r4, r2
 8001928:	074b      	lsls	r3, r1, #29
 800192a:	d009      	beq.n	8001940 <__aeabi_dmul+0x550>
 800192c:	230f      	movs	r3, #15
 800192e:	400b      	ands	r3, r1
 8001930:	2b04      	cmp	r3, #4
 8001932:	d005      	beq.n	8001940 <__aeabi_dmul+0x550>
 8001934:	1d0b      	adds	r3, r1, #4
 8001936:	428b      	cmp	r3, r1
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	1824      	adds	r4, r4, r0
 800193e:	0018      	movs	r0, r3
 8001940:	0223      	lsls	r3, r4, #8
 8001942:	d400      	bmi.n	8001946 <__aeabi_dmul+0x556>
 8001944:	e6d6      	b.n	80016f4 <__aeabi_dmul+0x304>
 8001946:	2301      	movs	r3, #1
 8001948:	2400      	movs	r4, #0
 800194a:	2200      	movs	r2, #0
 800194c:	e5a6      	b.n	800149c <__aeabi_dmul+0xac>
 800194e:	290f      	cmp	r1, #15
 8001950:	d1aa      	bne.n	80018a8 <__aeabi_dmul+0x4b8>
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	4652      	mov	r2, sl
 8001956:	031b      	lsls	r3, r3, #12
 8001958:	421a      	tst	r2, r3
 800195a:	d0a9      	beq.n	80018b0 <__aeabi_dmul+0x4c0>
 800195c:	421c      	tst	r4, r3
 800195e:	d1a7      	bne.n	80018b0 <__aeabi_dmul+0x4c0>
 8001960:	431c      	orrs	r4, r3
 8001962:	9b00      	ldr	r3, [sp, #0]
 8001964:	0002      	movs	r2, r0
 8001966:	469b      	mov	fp, r3
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <__aeabi_dmul+0x588>)
 800196a:	e597      	b.n	800149c <__aeabi_dmul+0xac>
 800196c:	2400      	movs	r4, #0
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0x304>
 8001970:	2400      	movs	r4, #0
 8001972:	4b01      	ldr	r3, [pc, #4]	@ (8001978 <__aeabi_dmul+0x588>)
 8001974:	0022      	movs	r2, r4
 8001976:	e591      	b.n	800149c <__aeabi_dmul+0xac>
 8001978:	000007ff 	.word	0x000007ff
 800197c:	0000041e 	.word	0x0000041e

08001980 <__aeabi_dsub>:
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	464e      	mov	r6, r9
 8001984:	4645      	mov	r5, r8
 8001986:	46de      	mov	lr, fp
 8001988:	4657      	mov	r7, sl
 800198a:	b5e0      	push	{r5, r6, r7, lr}
 800198c:	b085      	sub	sp, #20
 800198e:	9000      	str	r0, [sp, #0]
 8001990:	9101      	str	r1, [sp, #4]
 8001992:	030c      	lsls	r4, r1, #12
 8001994:	004f      	lsls	r7, r1, #1
 8001996:	0fce      	lsrs	r6, r1, #31
 8001998:	0a61      	lsrs	r1, r4, #9
 800199a:	9c00      	ldr	r4, [sp, #0]
 800199c:	46b0      	mov	r8, r6
 800199e:	0f64      	lsrs	r4, r4, #29
 80019a0:	430c      	orrs	r4, r1
 80019a2:	9900      	ldr	r1, [sp, #0]
 80019a4:	0d7f      	lsrs	r7, r7, #21
 80019a6:	00c8      	lsls	r0, r1, #3
 80019a8:	0011      	movs	r1, r2
 80019aa:	001a      	movs	r2, r3
 80019ac:	031b      	lsls	r3, r3, #12
 80019ae:	469c      	mov	ip, r3
 80019b0:	9100      	str	r1, [sp, #0]
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	0051      	lsls	r1, r2, #1
 80019b6:	0d4b      	lsrs	r3, r1, #21
 80019b8:	4699      	mov	r9, r3
 80019ba:	9b01      	ldr	r3, [sp, #4]
 80019bc:	9d00      	ldr	r5, [sp, #0]
 80019be:	0fd9      	lsrs	r1, r3, #31
 80019c0:	4663      	mov	r3, ip
 80019c2:	0f6a      	lsrs	r2, r5, #29
 80019c4:	0a5b      	lsrs	r3, r3, #9
 80019c6:	4313      	orrs	r3, r2
 80019c8:	00ea      	lsls	r2, r5, #3
 80019ca:	4694      	mov	ip, r2
 80019cc:	4693      	mov	fp, r2
 80019ce:	4ac1      	ldr	r2, [pc, #772]	@ (8001cd4 <__aeabi_dsub+0x354>)
 80019d0:	9003      	str	r0, [sp, #12]
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	4591      	cmp	r9, r2
 80019d6:	d100      	bne.n	80019da <__aeabi_dsub+0x5a>
 80019d8:	e0cd      	b.n	8001b76 <__aeabi_dsub+0x1f6>
 80019da:	2501      	movs	r5, #1
 80019dc:	4069      	eors	r1, r5
 80019de:	464d      	mov	r5, r9
 80019e0:	1b7d      	subs	r5, r7, r5
 80019e2:	46aa      	mov	sl, r5
 80019e4:	428e      	cmp	r6, r1
 80019e6:	d100      	bne.n	80019ea <__aeabi_dsub+0x6a>
 80019e8:	e080      	b.n	8001aec <__aeabi_dsub+0x16c>
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dsub+0x70>
 80019ee:	e335      	b.n	800205c <__aeabi_dsub+0x6dc>
 80019f0:	4649      	mov	r1, r9
 80019f2:	2900      	cmp	r1, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x78>
 80019f6:	e0df      	b.n	8001bb8 <__aeabi_dsub+0x238>
 80019f8:	4297      	cmp	r7, r2
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x7e>
 80019fc:	e194      	b.n	8001d28 <__aeabi_dsub+0x3a8>
 80019fe:	4652      	mov	r2, sl
 8001a00:	2501      	movs	r5, #1
 8001a02:	2a38      	cmp	r2, #56	@ 0x38
 8001a04:	dc19      	bgt.n	8001a3a <__aeabi_dsub+0xba>
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	9b02      	ldr	r3, [sp, #8]
 8001a0a:	0412      	lsls	r2, r2, #16
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	4652      	mov	r2, sl
 8001a12:	2a1f      	cmp	r2, #31
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dsub+0x98>
 8001a16:	e1e3      	b.n	8001de0 <__aeabi_dsub+0x460>
 8001a18:	4653      	mov	r3, sl
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	4661      	mov	r1, ip
 8001a1e:	9d02      	ldr	r5, [sp, #8]
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	4095      	lsls	r5, r2
 8001a24:	40d9      	lsrs	r1, r3
 8001a26:	430d      	orrs	r5, r1
 8001a28:	4661      	mov	r1, ip
 8001a2a:	4091      	lsls	r1, r2
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	1e51      	subs	r1, r2, #1
 8001a30:	418a      	sbcs	r2, r1
 8001a32:	4315      	orrs	r5, r2
 8001a34:	9a02      	ldr	r2, [sp, #8]
 8001a36:	40da      	lsrs	r2, r3
 8001a38:	1aa4      	subs	r4, r4, r2
 8001a3a:	1b45      	subs	r5, r0, r5
 8001a3c:	42a8      	cmp	r0, r5
 8001a3e:	4180      	sbcs	r0, r0
 8001a40:	4240      	negs	r0, r0
 8001a42:	1a24      	subs	r4, r4, r0
 8001a44:	0223      	lsls	r3, r4, #8
 8001a46:	d400      	bmi.n	8001a4a <__aeabi_dsub+0xca>
 8001a48:	e13d      	b.n	8001cc6 <__aeabi_dsub+0x346>
 8001a4a:	0264      	lsls	r4, r4, #9
 8001a4c:	0a64      	lsrs	r4, r4, #9
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0xd4>
 8001a52:	e147      	b.n	8001ce4 <__aeabi_dsub+0x364>
 8001a54:	0020      	movs	r0, r4
 8001a56:	f000 fcab 	bl	80023b0 <__clzsi2>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	3b08      	subs	r3, #8
 8001a5e:	2120      	movs	r1, #32
 8001a60:	0028      	movs	r0, r5
 8001a62:	1aca      	subs	r2, r1, r3
 8001a64:	40d0      	lsrs	r0, r2
 8001a66:	409c      	lsls	r4, r3
 8001a68:	0002      	movs	r2, r0
 8001a6a:	409d      	lsls	r5, r3
 8001a6c:	4322      	orrs	r2, r4
 8001a6e:	429f      	cmp	r7, r3
 8001a70:	dd00      	ble.n	8001a74 <__aeabi_dsub+0xf4>
 8001a72:	e177      	b.n	8001d64 <__aeabi_dsub+0x3e4>
 8001a74:	1bd8      	subs	r0, r3, r7
 8001a76:	3001      	adds	r0, #1
 8001a78:	1a09      	subs	r1, r1, r0
 8001a7a:	002c      	movs	r4, r5
 8001a7c:	408d      	lsls	r5, r1
 8001a7e:	40c4      	lsrs	r4, r0
 8001a80:	1e6b      	subs	r3, r5, #1
 8001a82:	419d      	sbcs	r5, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	40c2      	lsrs	r2, r0
 8001a88:	408b      	lsls	r3, r1
 8001a8a:	4325      	orrs	r5, r4
 8001a8c:	2700      	movs	r7, #0
 8001a8e:	0014      	movs	r4, r2
 8001a90:	431d      	orrs	r5, r3
 8001a92:	076b      	lsls	r3, r5, #29
 8001a94:	d009      	beq.n	8001aaa <__aeabi_dsub+0x12a>
 8001a96:	230f      	movs	r3, #15
 8001a98:	402b      	ands	r3, r5
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d005      	beq.n	8001aaa <__aeabi_dsub+0x12a>
 8001a9e:	1d2b      	adds	r3, r5, #4
 8001aa0:	42ab      	cmp	r3, r5
 8001aa2:	41ad      	sbcs	r5, r5
 8001aa4:	426d      	negs	r5, r5
 8001aa6:	1964      	adds	r4, r4, r5
 8001aa8:	001d      	movs	r5, r3
 8001aaa:	0223      	lsls	r3, r4, #8
 8001aac:	d400      	bmi.n	8001ab0 <__aeabi_dsub+0x130>
 8001aae:	e140      	b.n	8001d32 <__aeabi_dsub+0x3b2>
 8001ab0:	4a88      	ldr	r2, [pc, #544]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001ab2:	3701      	adds	r7, #1
 8001ab4:	4297      	cmp	r7, r2
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dsub+0x13a>
 8001ab8:	e101      	b.n	8001cbe <__aeabi_dsub+0x33e>
 8001aba:	2601      	movs	r6, #1
 8001abc:	4643      	mov	r3, r8
 8001abe:	4986      	ldr	r1, [pc, #536]	@ (8001cd8 <__aeabi_dsub+0x358>)
 8001ac0:	08ed      	lsrs	r5, r5, #3
 8001ac2:	4021      	ands	r1, r4
 8001ac4:	074a      	lsls	r2, r1, #29
 8001ac6:	432a      	orrs	r2, r5
 8001ac8:	057c      	lsls	r4, r7, #21
 8001aca:	024d      	lsls	r5, r1, #9
 8001acc:	0b2d      	lsrs	r5, r5, #12
 8001ace:	0d64      	lsrs	r4, r4, #21
 8001ad0:	401e      	ands	r6, r3
 8001ad2:	0524      	lsls	r4, r4, #20
 8001ad4:	432c      	orrs	r4, r5
 8001ad6:	07f6      	lsls	r6, r6, #31
 8001ad8:	4334      	orrs	r4, r6
 8001ada:	0010      	movs	r0, r2
 8001adc:	0021      	movs	r1, r4
 8001ade:	b005      	add	sp, #20
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	46bb      	mov	fp, r7
 8001ae4:	46b2      	mov	sl, r6
 8001ae6:	46a9      	mov	r9, r5
 8001ae8:	46a0      	mov	r8, r4
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dsub+0x172>
 8001af0:	e2d0      	b.n	8002094 <__aeabi_dsub+0x714>
 8001af2:	4649      	mov	r1, r9
 8001af4:	2900      	cmp	r1, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x17a>
 8001af8:	e0d4      	b.n	8001ca4 <__aeabi_dsub+0x324>
 8001afa:	4661      	mov	r1, ip
 8001afc:	9b02      	ldr	r3, [sp, #8]
 8001afe:	4319      	orrs	r1, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x184>
 8001b02:	e12b      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001b04:	1e69      	subs	r1, r5, #1
 8001b06:	2d01      	cmp	r5, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x18c>
 8001b0a:	e1d9      	b.n	8001ec0 <__aeabi_dsub+0x540>
 8001b0c:	4295      	cmp	r5, r2
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x192>
 8001b10:	e10a      	b.n	8001d28 <__aeabi_dsub+0x3a8>
 8001b12:	2501      	movs	r5, #1
 8001b14:	2938      	cmp	r1, #56	@ 0x38
 8001b16:	dc17      	bgt.n	8001b48 <__aeabi_dsub+0x1c8>
 8001b18:	468a      	mov	sl, r1
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dsub+0x1a2>
 8001b20:	e1e7      	b.n	8001ef2 <__aeabi_dsub+0x572>
 8001b22:	2220      	movs	r2, #32
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	9b02      	ldr	r3, [sp, #8]
 8001b28:	4661      	mov	r1, ip
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	001d      	movs	r5, r3
 8001b2e:	4653      	mov	r3, sl
 8001b30:	40d9      	lsrs	r1, r3
 8001b32:	4663      	mov	r3, ip
 8001b34:	4093      	lsls	r3, r2
 8001b36:	001a      	movs	r2, r3
 8001b38:	430d      	orrs	r5, r1
 8001b3a:	1e51      	subs	r1, r2, #1
 8001b3c:	418a      	sbcs	r2, r1
 8001b3e:	4653      	mov	r3, sl
 8001b40:	4315      	orrs	r5, r2
 8001b42:	9a02      	ldr	r2, [sp, #8]
 8001b44:	40da      	lsrs	r2, r3
 8001b46:	18a4      	adds	r4, r4, r2
 8001b48:	182d      	adds	r5, r5, r0
 8001b4a:	4285      	cmp	r5, r0
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	4240      	negs	r0, r0
 8001b50:	1824      	adds	r4, r4, r0
 8001b52:	0223      	lsls	r3, r4, #8
 8001b54:	d400      	bmi.n	8001b58 <__aeabi_dsub+0x1d8>
 8001b56:	e0b6      	b.n	8001cc6 <__aeabi_dsub+0x346>
 8001b58:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001b5a:	3701      	adds	r7, #1
 8001b5c:	429f      	cmp	r7, r3
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x1e2>
 8001b60:	e0ad      	b.n	8001cbe <__aeabi_dsub+0x33e>
 8001b62:	2101      	movs	r1, #1
 8001b64:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd8 <__aeabi_dsub+0x358>)
 8001b66:	086a      	lsrs	r2, r5, #1
 8001b68:	401c      	ands	r4, r3
 8001b6a:	4029      	ands	r1, r5
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	07e5      	lsls	r5, r4, #31
 8001b70:	4315      	orrs	r5, r2
 8001b72:	0864      	lsrs	r4, r4, #1
 8001b74:	e78d      	b.n	8001a92 <__aeabi_dsub+0x112>
 8001b76:	4a59      	ldr	r2, [pc, #356]	@ (8001cdc <__aeabi_dsub+0x35c>)
 8001b78:	9b02      	ldr	r3, [sp, #8]
 8001b7a:	4692      	mov	sl, r2
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	44ba      	add	sl, r7
 8001b80:	431a      	orrs	r2, r3
 8001b82:	d02c      	beq.n	8001bde <__aeabi_dsub+0x25e>
 8001b84:	428e      	cmp	r6, r1
 8001b86:	d02e      	beq.n	8001be6 <__aeabi_dsub+0x266>
 8001b88:	4652      	mov	r2, sl
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	d060      	beq.n	8001c50 <__aeabi_dsub+0x2d0>
 8001b8e:	2f00      	cmp	r7, #0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x214>
 8001b92:	e0db      	b.n	8001d4c <__aeabi_dsub+0x3cc>
 8001b94:	4663      	mov	r3, ip
 8001b96:	000e      	movs	r6, r1
 8001b98:	9c02      	ldr	r4, [sp, #8]
 8001b9a:	08d8      	lsrs	r0, r3, #3
 8001b9c:	0762      	lsls	r2, r4, #29
 8001b9e:	4302      	orrs	r2, r0
 8001ba0:	08e4      	lsrs	r4, r4, #3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	4323      	orrs	r3, r4
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x22a>
 8001ba8:	e254      	b.n	8002054 <__aeabi_dsub+0x6d4>
 8001baa:	2580      	movs	r5, #128	@ 0x80
 8001bac:	032d      	lsls	r5, r5, #12
 8001bae:	4325      	orrs	r5, r4
 8001bb0:	032d      	lsls	r5, r5, #12
 8001bb2:	4c48      	ldr	r4, [pc, #288]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001bb4:	0b2d      	lsrs	r5, r5, #12
 8001bb6:	e78c      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001bb8:	4661      	mov	r1, ip
 8001bba:	9b02      	ldr	r3, [sp, #8]
 8001bbc:	4319      	orrs	r1, r3
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x242>
 8001bc0:	e0cc      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001bc2:	0029      	movs	r1, r5
 8001bc4:	3901      	subs	r1, #1
 8001bc6:	2d01      	cmp	r5, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x24c>
 8001bca:	e188      	b.n	8001ede <__aeabi_dsub+0x55e>
 8001bcc:	4295      	cmp	r5, r2
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x252>
 8001bd0:	e0aa      	b.n	8001d28 <__aeabi_dsub+0x3a8>
 8001bd2:	2501      	movs	r5, #1
 8001bd4:	2938      	cmp	r1, #56	@ 0x38
 8001bd6:	dd00      	ble.n	8001bda <__aeabi_dsub+0x25a>
 8001bd8:	e72f      	b.n	8001a3a <__aeabi_dsub+0xba>
 8001bda:	468a      	mov	sl, r1
 8001bdc:	e718      	b.n	8001a10 <__aeabi_dsub+0x90>
 8001bde:	2201      	movs	r2, #1
 8001be0:	4051      	eors	r1, r2
 8001be2:	428e      	cmp	r6, r1
 8001be4:	d1d0      	bne.n	8001b88 <__aeabi_dsub+0x208>
 8001be6:	4653      	mov	r3, sl
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x26e>
 8001bec:	e0be      	b.n	8001d6c <__aeabi_dsub+0x3ec>
 8001bee:	2f00      	cmp	r7, #0
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x274>
 8001bf2:	e138      	b.n	8001e66 <__aeabi_dsub+0x4e6>
 8001bf4:	46ca      	mov	sl, r9
 8001bf6:	0022      	movs	r2, r4
 8001bf8:	4302      	orrs	r2, r0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x27e>
 8001bfc:	e1e2      	b.n	8001fc4 <__aeabi_dsub+0x644>
 8001bfe:	4653      	mov	r3, sl
 8001c00:	1e59      	subs	r1, r3, #1
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d100      	bne.n	8001c08 <__aeabi_dsub+0x288>
 8001c06:	e20d      	b.n	8002024 <__aeabi_dsub+0x6a4>
 8001c08:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <__aeabi_dsub+0x354>)
 8001c0a:	4592      	cmp	sl, r2
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x290>
 8001c0e:	e1d2      	b.n	8001fb6 <__aeabi_dsub+0x636>
 8001c10:	2701      	movs	r7, #1
 8001c12:	2938      	cmp	r1, #56	@ 0x38
 8001c14:	dc13      	bgt.n	8001c3e <__aeabi_dsub+0x2be>
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dsub+0x29c>
 8001c1a:	e1ee      	b.n	8001ffa <__aeabi_dsub+0x67a>
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	9b02      	ldr	r3, [sp, #8]
 8001c20:	1a52      	subs	r2, r2, r1
 8001c22:	0025      	movs	r5, r4
 8001c24:	0007      	movs	r7, r0
 8001c26:	469a      	mov	sl, r3
 8001c28:	40cc      	lsrs	r4, r1
 8001c2a:	4090      	lsls	r0, r2
 8001c2c:	4095      	lsls	r5, r2
 8001c2e:	40cf      	lsrs	r7, r1
 8001c30:	44a2      	add	sl, r4
 8001c32:	1e42      	subs	r2, r0, #1
 8001c34:	4190      	sbcs	r0, r2
 8001c36:	4653      	mov	r3, sl
 8001c38:	432f      	orrs	r7, r5
 8001c3a:	4307      	orrs	r7, r0
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	003d      	movs	r5, r7
 8001c40:	4465      	add	r5, ip
 8001c42:	4565      	cmp	r5, ip
 8001c44:	4192      	sbcs	r2, r2
 8001c46:	9b02      	ldr	r3, [sp, #8]
 8001c48:	4252      	negs	r2, r2
 8001c4a:	464f      	mov	r7, r9
 8001c4c:	18d4      	adds	r4, r2, r3
 8001c4e:	e780      	b.n	8001b52 <__aeabi_dsub+0x1d2>
 8001c50:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <__aeabi_dsub+0x360>)
 8001c52:	1c7d      	adds	r5, r7, #1
 8001c54:	4215      	tst	r5, r2
 8001c56:	d000      	beq.n	8001c5a <__aeabi_dsub+0x2da>
 8001c58:	e0aa      	b.n	8001db0 <__aeabi_dsub+0x430>
 8001c5a:	4662      	mov	r2, ip
 8001c5c:	0025      	movs	r5, r4
 8001c5e:	9b02      	ldr	r3, [sp, #8]
 8001c60:	4305      	orrs	r5, r0
 8001c62:	431a      	orrs	r2, r3
 8001c64:	2f00      	cmp	r7, #0
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x2ea>
 8001c68:	e0f5      	b.n	8001e56 <__aeabi_dsub+0x4d6>
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x2f0>
 8001c6e:	e16b      	b.n	8001f48 <__aeabi_dsub+0x5c8>
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x2f6>
 8001c74:	e152      	b.n	8001f1c <__aeabi_dsub+0x59c>
 8001c76:	4663      	mov	r3, ip
 8001c78:	1ac5      	subs	r5, r0, r3
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	1ae2      	subs	r2, r4, r3
 8001c7e:	42a8      	cmp	r0, r5
 8001c80:	419b      	sbcs	r3, r3
 8001c82:	425b      	negs	r3, r3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	021a      	lsls	r2, r3, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_dsub+0x30c>
 8001c8a:	e1d5      	b.n	8002038 <__aeabi_dsub+0x6b8>
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	1a1d      	subs	r5, r3, r0
 8001c90:	45ac      	cmp	ip, r5
 8001c92:	4192      	sbcs	r2, r2
 8001c94:	2601      	movs	r6, #1
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	4252      	negs	r2, r2
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	4688      	mov	r8, r1
 8001c9e:	1aa4      	subs	r4, r4, r2
 8001ca0:	400e      	ands	r6, r1
 8001ca2:	e6f6      	b.n	8001a92 <__aeabi_dsub+0x112>
 8001ca4:	4297      	cmp	r7, r2
 8001ca6:	d03f      	beq.n	8001d28 <__aeabi_dsub+0x3a8>
 8001ca8:	4652      	mov	r2, sl
 8001caa:	2501      	movs	r5, #1
 8001cac:	2a38      	cmp	r2, #56	@ 0x38
 8001cae:	dd00      	ble.n	8001cb2 <__aeabi_dsub+0x332>
 8001cb0:	e74a      	b.n	8001b48 <__aeabi_dsub+0x1c8>
 8001cb2:	2280      	movs	r2, #128	@ 0x80
 8001cb4:	9b02      	ldr	r3, [sp, #8]
 8001cb6:	0412      	lsls	r2, r2, #16
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dsub+0x19a>
 8001cbe:	003c      	movs	r4, r7
 8001cc0:	2500      	movs	r5, #0
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	e705      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	402b      	ands	r3, r5
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dsub+0x350>
 8001cce:	e6e2      	b.n	8001a96 <__aeabi_dsub+0x116>
 8001cd0:	e06b      	b.n	8001daa <__aeabi_dsub+0x42a>
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	ff7fffff 	.word	0xff7fffff
 8001cdc:	fffff801 	.word	0xfffff801
 8001ce0:	000007fe 	.word	0x000007fe
 8001ce4:	0028      	movs	r0, r5
 8001ce6:	f000 fb63 	bl	80023b0 <__clzsi2>
 8001cea:	0003      	movs	r3, r0
 8001cec:	3318      	adds	r3, #24
 8001cee:	2b1f      	cmp	r3, #31
 8001cf0:	dc00      	bgt.n	8001cf4 <__aeabi_dsub+0x374>
 8001cf2:	e6b4      	b.n	8001a5e <__aeabi_dsub+0xde>
 8001cf4:	002a      	movs	r2, r5
 8001cf6:	3808      	subs	r0, #8
 8001cf8:	4082      	lsls	r2, r0
 8001cfa:	429f      	cmp	r7, r3
 8001cfc:	dd00      	ble.n	8001d00 <__aeabi_dsub+0x380>
 8001cfe:	e0b9      	b.n	8001e74 <__aeabi_dsub+0x4f4>
 8001d00:	1bdb      	subs	r3, r3, r7
 8001d02:	1c58      	adds	r0, r3, #1
 8001d04:	281f      	cmp	r0, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x38a>
 8001d08:	e1a0      	b.n	800204c <__aeabi_dsub+0x6cc>
 8001d0a:	0015      	movs	r5, r2
 8001d0c:	3b1f      	subs	r3, #31
 8001d0e:	40dd      	lsrs	r5, r3
 8001d10:	2820      	cmp	r0, #32
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x3a0>
 8001d14:	2340      	movs	r3, #64	@ 0x40
 8001d16:	1a1b      	subs	r3, r3, r0
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	1e53      	subs	r3, r2, #1
 8001d1c:	419a      	sbcs	r2, r3
 8001d1e:	4315      	orrs	r5, r2
 8001d20:	2307      	movs	r3, #7
 8001d22:	2700      	movs	r7, #0
 8001d24:	402b      	ands	r3, r5
 8001d26:	e7d0      	b.n	8001cca <__aeabi_dsub+0x34a>
 8001d28:	08c0      	lsrs	r0, r0, #3
 8001d2a:	0762      	lsls	r2, r4, #29
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	08e4      	lsrs	r4, r4, #3
 8001d30:	e737      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001d32:	08ea      	lsrs	r2, r5, #3
 8001d34:	0763      	lsls	r3, r4, #29
 8001d36:	431a      	orrs	r2, r3
 8001d38:	4bd3      	ldr	r3, [pc, #844]	@ (8002088 <__aeabi_dsub+0x708>)
 8001d3a:	08e4      	lsrs	r4, r4, #3
 8001d3c:	429f      	cmp	r7, r3
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x3c2>
 8001d40:	e72f      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001d42:	0324      	lsls	r4, r4, #12
 8001d44:	0b25      	lsrs	r5, r4, #12
 8001d46:	057c      	lsls	r4, r7, #21
 8001d48:	0d64      	lsrs	r4, r4, #21
 8001d4a:	e6c2      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001d4c:	46ca      	mov	sl, r9
 8001d4e:	0022      	movs	r2, r4
 8001d50:	4302      	orrs	r2, r0
 8001d52:	d158      	bne.n	8001e06 <__aeabi_dsub+0x486>
 8001d54:	4663      	mov	r3, ip
 8001d56:	000e      	movs	r6, r1
 8001d58:	9c02      	ldr	r4, [sp, #8]
 8001d5a:	9303      	str	r3, [sp, #12]
 8001d5c:	9b03      	ldr	r3, [sp, #12]
 8001d5e:	4657      	mov	r7, sl
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	e7e7      	b.n	8001d34 <__aeabi_dsub+0x3b4>
 8001d64:	4cc9      	ldr	r4, [pc, #804]	@ (800208c <__aeabi_dsub+0x70c>)
 8001d66:	1aff      	subs	r7, r7, r3
 8001d68:	4014      	ands	r4, r2
 8001d6a:	e692      	b.n	8001a92 <__aeabi_dsub+0x112>
 8001d6c:	4dc8      	ldr	r5, [pc, #800]	@ (8002090 <__aeabi_dsub+0x710>)
 8001d6e:	1c7a      	adds	r2, r7, #1
 8001d70:	422a      	tst	r2, r5
 8001d72:	d000      	beq.n	8001d76 <__aeabi_dsub+0x3f6>
 8001d74:	e084      	b.n	8001e80 <__aeabi_dsub+0x500>
 8001d76:	0022      	movs	r2, r4
 8001d78:	4302      	orrs	r2, r0
 8001d7a:	2f00      	cmp	r7, #0
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dsub+0x400>
 8001d7e:	e0ef      	b.n	8001f60 <__aeabi_dsub+0x5e0>
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x406>
 8001d84:	e0e5      	b.n	8001f52 <__aeabi_dsub+0x5d2>
 8001d86:	4662      	mov	r2, ip
 8001d88:	9902      	ldr	r1, [sp, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dsub+0x410>
 8001d8e:	e0c5      	b.n	8001f1c <__aeabi_dsub+0x59c>
 8001d90:	4663      	mov	r3, ip
 8001d92:	18c5      	adds	r5, r0, r3
 8001d94:	468c      	mov	ip, r1
 8001d96:	4285      	cmp	r5, r0
 8001d98:	4180      	sbcs	r0, r0
 8001d9a:	4464      	add	r4, ip
 8001d9c:	4240      	negs	r0, r0
 8001d9e:	1824      	adds	r4, r4, r0
 8001da0:	0223      	lsls	r3, r4, #8
 8001da2:	d502      	bpl.n	8001daa <__aeabi_dsub+0x42a>
 8001da4:	4bb9      	ldr	r3, [pc, #740]	@ (800208c <__aeabi_dsub+0x70c>)
 8001da6:	3701      	adds	r7, #1
 8001da8:	401c      	ands	r4, r3
 8001daa:	46ba      	mov	sl, r7
 8001dac:	9503      	str	r5, [sp, #12]
 8001dae:	e7d5      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001db0:	4662      	mov	r2, ip
 8001db2:	1a85      	subs	r5, r0, r2
 8001db4:	42a8      	cmp	r0, r5
 8001db6:	4192      	sbcs	r2, r2
 8001db8:	4252      	negs	r2, r2
 8001dba:	4691      	mov	r9, r2
 8001dbc:	9b02      	ldr	r3, [sp, #8]
 8001dbe:	1ae3      	subs	r3, r4, r3
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	4691      	mov	r9, r2
 8001dca:	021a      	lsls	r2, r3, #8
 8001dcc:	d46c      	bmi.n	8001ea8 <__aeabi_dsub+0x528>
 8001dce:	464a      	mov	r2, r9
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	432a      	orrs	r2, r5
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x458>
 8001dd6:	e63a      	b.n	8001a4e <__aeabi_dsub+0xce>
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e678      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8001de0:	9902      	ldr	r1, [sp, #8]
 8001de2:	4653      	mov	r3, sl
 8001de4:	000d      	movs	r5, r1
 8001de6:	3a20      	subs	r2, #32
 8001de8:	40d5      	lsrs	r5, r2
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d006      	beq.n	8001dfc <__aeabi_dsub+0x47c>
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	000b      	movs	r3, r1
 8001df4:	4093      	lsls	r3, r2
 8001df6:	4662      	mov	r2, ip
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	4693      	mov	fp, r2
 8001dfc:	465b      	mov	r3, fp
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	4193      	sbcs	r3, r2
 8001e02:	431d      	orrs	r5, r3
 8001e04:	e619      	b.n	8001a3a <__aeabi_dsub+0xba>
 8001e06:	4653      	mov	r3, sl
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x490>
 8001e0e:	e0c6      	b.n	8001f9e <__aeabi_dsub+0x61e>
 8001e10:	4e9d      	ldr	r6, [pc, #628]	@ (8002088 <__aeabi_dsub+0x708>)
 8001e12:	45b2      	cmp	sl, r6
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x498>
 8001e16:	e6bd      	b.n	8001b94 <__aeabi_dsub+0x214>
 8001e18:	4688      	mov	r8, r1
 8001e1a:	000e      	movs	r6, r1
 8001e1c:	2501      	movs	r5, #1
 8001e1e:	2a38      	cmp	r2, #56	@ 0x38
 8001e20:	dc10      	bgt.n	8001e44 <__aeabi_dsub+0x4c4>
 8001e22:	2a1f      	cmp	r2, #31
 8001e24:	dc7f      	bgt.n	8001f26 <__aeabi_dsub+0x5a6>
 8001e26:	2120      	movs	r1, #32
 8001e28:	0025      	movs	r5, r4
 8001e2a:	1a89      	subs	r1, r1, r2
 8001e2c:	0007      	movs	r7, r0
 8001e2e:	4088      	lsls	r0, r1
 8001e30:	408d      	lsls	r5, r1
 8001e32:	40d7      	lsrs	r7, r2
 8001e34:	40d4      	lsrs	r4, r2
 8001e36:	1e41      	subs	r1, r0, #1
 8001e38:	4188      	sbcs	r0, r1
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	433d      	orrs	r5, r7
 8001e3e:	1b1b      	subs	r3, r3, r4
 8001e40:	4305      	orrs	r5, r0
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	4662      	mov	r2, ip
 8001e46:	1b55      	subs	r5, r2, r5
 8001e48:	45ac      	cmp	ip, r5
 8001e4a:	4192      	sbcs	r2, r2
 8001e4c:	9b02      	ldr	r3, [sp, #8]
 8001e4e:	4252      	negs	r2, r2
 8001e50:	464f      	mov	r7, r9
 8001e52:	1a9c      	subs	r4, r3, r2
 8001e54:	e5f6      	b.n	8001a44 <__aeabi_dsub+0xc4>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d000      	beq.n	8001e5c <__aeabi_dsub+0x4dc>
 8001e5a:	e0b7      	b.n	8001fcc <__aeabi_dsub+0x64c>
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x4e2>
 8001e60:	e0f0      	b.n	8002044 <__aeabi_dsub+0x6c4>
 8001e62:	2601      	movs	r6, #1
 8001e64:	400e      	ands	r6, r1
 8001e66:	4663      	mov	r3, ip
 8001e68:	9802      	ldr	r0, [sp, #8]
 8001e6a:	08d9      	lsrs	r1, r3, #3
 8001e6c:	0742      	lsls	r2, r0, #29
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	08c4      	lsrs	r4, r0, #3
 8001e72:	e696      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001e74:	4c85      	ldr	r4, [pc, #532]	@ (800208c <__aeabi_dsub+0x70c>)
 8001e76:	1aff      	subs	r7, r7, r3
 8001e78:	4014      	ands	r4, r2
 8001e7a:	0762      	lsls	r2, r4, #29
 8001e7c:	08e4      	lsrs	r4, r4, #3
 8001e7e:	e760      	b.n	8001d42 <__aeabi_dsub+0x3c2>
 8001e80:	4981      	ldr	r1, [pc, #516]	@ (8002088 <__aeabi_dsub+0x708>)
 8001e82:	428a      	cmp	r2, r1
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x508>
 8001e86:	e0c9      	b.n	800201c <__aeabi_dsub+0x69c>
 8001e88:	4663      	mov	r3, ip
 8001e8a:	18c1      	adds	r1, r0, r3
 8001e8c:	4281      	cmp	r1, r0
 8001e8e:	4180      	sbcs	r0, r0
 8001e90:	9b02      	ldr	r3, [sp, #8]
 8001e92:	4240      	negs	r0, r0
 8001e94:	18e3      	adds	r3, r4, r3
 8001e96:	181b      	adds	r3, r3, r0
 8001e98:	07dd      	lsls	r5, r3, #31
 8001e9a:	085c      	lsrs	r4, r3, #1
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	0849      	lsrs	r1, r1, #1
 8001ea0:	430d      	orrs	r5, r1
 8001ea2:	0017      	movs	r7, r2
 8001ea4:	402b      	ands	r3, r5
 8001ea6:	e710      	b.n	8001cca <__aeabi_dsub+0x34a>
 8001ea8:	4663      	mov	r3, ip
 8001eaa:	1a1d      	subs	r5, r3, r0
 8001eac:	45ac      	cmp	ip, r5
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	9b02      	ldr	r3, [sp, #8]
 8001eb4:	4252      	negs	r2, r2
 8001eb6:	1b1c      	subs	r4, r3, r4
 8001eb8:	4688      	mov	r8, r1
 8001eba:	1aa4      	subs	r4, r4, r2
 8001ebc:	400e      	ands	r6, r1
 8001ebe:	e5c6      	b.n	8001a4e <__aeabi_dsub+0xce>
 8001ec0:	4663      	mov	r3, ip
 8001ec2:	18c5      	adds	r5, r0, r3
 8001ec4:	9b02      	ldr	r3, [sp, #8]
 8001ec6:	4285      	cmp	r5, r0
 8001ec8:	4180      	sbcs	r0, r0
 8001eca:	469c      	mov	ip, r3
 8001ecc:	4240      	negs	r0, r0
 8001ece:	4464      	add	r4, ip
 8001ed0:	1824      	adds	r4, r4, r0
 8001ed2:	2701      	movs	r7, #1
 8001ed4:	0223      	lsls	r3, r4, #8
 8001ed6:	d400      	bmi.n	8001eda <__aeabi_dsub+0x55a>
 8001ed8:	e6f5      	b.n	8001cc6 <__aeabi_dsub+0x346>
 8001eda:	2702      	movs	r7, #2
 8001edc:	e641      	b.n	8001b62 <__aeabi_dsub+0x1e2>
 8001ede:	4663      	mov	r3, ip
 8001ee0:	1ac5      	subs	r5, r0, r3
 8001ee2:	42a8      	cmp	r0, r5
 8001ee4:	4180      	sbcs	r0, r0
 8001ee6:	9b02      	ldr	r3, [sp, #8]
 8001ee8:	4240      	negs	r0, r0
 8001eea:	1ae4      	subs	r4, r4, r3
 8001eec:	2701      	movs	r7, #1
 8001eee:	1a24      	subs	r4, r4, r0
 8001ef0:	e5a8      	b.n	8001a44 <__aeabi_dsub+0xc4>
 8001ef2:	9d02      	ldr	r5, [sp, #8]
 8001ef4:	4652      	mov	r2, sl
 8001ef6:	002b      	movs	r3, r5
 8001ef8:	3a20      	subs	r2, #32
 8001efa:	40d3      	lsrs	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	4653      	mov	r3, sl
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d006      	beq.n	8001f12 <__aeabi_dsub+0x592>
 8001f04:	2240      	movs	r2, #64	@ 0x40
 8001f06:	1ad2      	subs	r2, r2, r3
 8001f08:	002b      	movs	r3, r5
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	4662      	mov	r2, ip
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	4693      	mov	fp, r2
 8001f12:	465d      	mov	r5, fp
 8001f14:	1e6b      	subs	r3, r5, #1
 8001f16:	419d      	sbcs	r5, r3
 8001f18:	430d      	orrs	r5, r1
 8001f1a:	e615      	b.n	8001b48 <__aeabi_dsub+0x1c8>
 8001f1c:	0762      	lsls	r2, r4, #29
 8001f1e:	08c0      	lsrs	r0, r0, #3
 8001f20:	4302      	orrs	r2, r0
 8001f22:	08e4      	lsrs	r4, r4, #3
 8001f24:	e70d      	b.n	8001d42 <__aeabi_dsub+0x3c2>
 8001f26:	0011      	movs	r1, r2
 8001f28:	0027      	movs	r7, r4
 8001f2a:	3920      	subs	r1, #32
 8001f2c:	40cf      	lsrs	r7, r1
 8001f2e:	2a20      	cmp	r2, #32
 8001f30:	d005      	beq.n	8001f3e <__aeabi_dsub+0x5be>
 8001f32:	2140      	movs	r1, #64	@ 0x40
 8001f34:	1a8a      	subs	r2, r1, r2
 8001f36:	4094      	lsls	r4, r2
 8001f38:	0025      	movs	r5, r4
 8001f3a:	4305      	orrs	r5, r0
 8001f3c:	9503      	str	r5, [sp, #12]
 8001f3e:	9d03      	ldr	r5, [sp, #12]
 8001f40:	1e6a      	subs	r2, r5, #1
 8001f42:	4195      	sbcs	r5, r2
 8001f44:	433d      	orrs	r5, r7
 8001f46:	e77d      	b.n	8001e44 <__aeabi_dsub+0x4c4>
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_dsub+0x5ce>
 8001f4c:	e744      	b.n	8001dd8 <__aeabi_dsub+0x458>
 8001f4e:	2601      	movs	r6, #1
 8001f50:	400e      	ands	r6, r1
 8001f52:	4663      	mov	r3, ip
 8001f54:	08d9      	lsrs	r1, r3, #3
 8001f56:	9b02      	ldr	r3, [sp, #8]
 8001f58:	075a      	lsls	r2, r3, #29
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	08dc      	lsrs	r4, r3, #3
 8001f5e:	e6f0      	b.n	8001d42 <__aeabi_dsub+0x3c2>
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d028      	beq.n	8001fb6 <__aeabi_dsub+0x636>
 8001f64:	4662      	mov	r2, ip
 8001f66:	9f02      	ldr	r7, [sp, #8]
 8001f68:	08c0      	lsrs	r0, r0, #3
 8001f6a:	433a      	orrs	r2, r7
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x5f0>
 8001f6e:	e6dc      	b.n	8001d2a <__aeabi_dsub+0x3aa>
 8001f70:	0762      	lsls	r2, r4, #29
 8001f72:	4310      	orrs	r0, r2
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	08e4      	lsrs	r4, r4, #3
 8001f78:	0312      	lsls	r2, r2, #12
 8001f7a:	4214      	tst	r4, r2
 8001f7c:	d009      	beq.n	8001f92 <__aeabi_dsub+0x612>
 8001f7e:	08fd      	lsrs	r5, r7, #3
 8001f80:	4215      	tst	r5, r2
 8001f82:	d106      	bne.n	8001f92 <__aeabi_dsub+0x612>
 8001f84:	4663      	mov	r3, ip
 8001f86:	2601      	movs	r6, #1
 8001f88:	002c      	movs	r4, r5
 8001f8a:	08d8      	lsrs	r0, r3, #3
 8001f8c:	077b      	lsls	r3, r7, #29
 8001f8e:	4318      	orrs	r0, r3
 8001f90:	400e      	ands	r6, r1
 8001f92:	0f42      	lsrs	r2, r0, #29
 8001f94:	00c0      	lsls	r0, r0, #3
 8001f96:	08c0      	lsrs	r0, r0, #3
 8001f98:	0752      	lsls	r2, r2, #29
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	e601      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	1a1d      	subs	r5, r3, r0
 8001fa2:	45ac      	cmp	ip, r5
 8001fa4:	4192      	sbcs	r2, r2
 8001fa6:	9b02      	ldr	r3, [sp, #8]
 8001fa8:	4252      	negs	r2, r2
 8001faa:	1b1c      	subs	r4, r3, r4
 8001fac:	000e      	movs	r6, r1
 8001fae:	4688      	mov	r8, r1
 8001fb0:	2701      	movs	r7, #1
 8001fb2:	1aa4      	subs	r4, r4, r2
 8001fb4:	e546      	b.n	8001a44 <__aeabi_dsub+0xc4>
 8001fb6:	4663      	mov	r3, ip
 8001fb8:	08d9      	lsrs	r1, r3, #3
 8001fba:	9b02      	ldr	r3, [sp, #8]
 8001fbc:	075a      	lsls	r2, r3, #29
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	08dc      	lsrs	r4, r3, #3
 8001fc2:	e5ee      	b.n	8001ba2 <__aeabi_dsub+0x222>
 8001fc4:	4663      	mov	r3, ip
 8001fc6:	9c02      	ldr	r4, [sp, #8]
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	e6c7      	b.n	8001d5c <__aeabi_dsub+0x3dc>
 8001fcc:	08c0      	lsrs	r0, r0, #3
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x654>
 8001fd2:	e6aa      	b.n	8001d2a <__aeabi_dsub+0x3aa>
 8001fd4:	0762      	lsls	r2, r4, #29
 8001fd6:	4310      	orrs	r0, r2
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	0312      	lsls	r2, r2, #12
 8001fde:	4214      	tst	r4, r2
 8001fe0:	d0d7      	beq.n	8001f92 <__aeabi_dsub+0x612>
 8001fe2:	9f02      	ldr	r7, [sp, #8]
 8001fe4:	08fd      	lsrs	r5, r7, #3
 8001fe6:	4215      	tst	r5, r2
 8001fe8:	d1d3      	bne.n	8001f92 <__aeabi_dsub+0x612>
 8001fea:	4663      	mov	r3, ip
 8001fec:	2601      	movs	r6, #1
 8001fee:	08d8      	lsrs	r0, r3, #3
 8001ff0:	077b      	lsls	r3, r7, #29
 8001ff2:	002c      	movs	r4, r5
 8001ff4:	4318      	orrs	r0, r3
 8001ff6:	400e      	ands	r6, r1
 8001ff8:	e7cb      	b.n	8001f92 <__aeabi_dsub+0x612>
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	0027      	movs	r7, r4
 8001ffe:	3a20      	subs	r2, #32
 8002000:	40d7      	lsrs	r7, r2
 8002002:	2920      	cmp	r1, #32
 8002004:	d005      	beq.n	8002012 <__aeabi_dsub+0x692>
 8002006:	2240      	movs	r2, #64	@ 0x40
 8002008:	1a52      	subs	r2, r2, r1
 800200a:	4094      	lsls	r4, r2
 800200c:	0025      	movs	r5, r4
 800200e:	4305      	orrs	r5, r0
 8002010:	9503      	str	r5, [sp, #12]
 8002012:	9d03      	ldr	r5, [sp, #12]
 8002014:	1e6a      	subs	r2, r5, #1
 8002016:	4195      	sbcs	r5, r2
 8002018:	432f      	orrs	r7, r5
 800201a:	e610      	b.n	8001c3e <__aeabi_dsub+0x2be>
 800201c:	0014      	movs	r4, r2
 800201e:	2500      	movs	r5, #0
 8002020:	2200      	movs	r2, #0
 8002022:	e556      	b.n	8001ad2 <__aeabi_dsub+0x152>
 8002024:	9b02      	ldr	r3, [sp, #8]
 8002026:	4460      	add	r0, ip
 8002028:	4699      	mov	r9, r3
 800202a:	4560      	cmp	r0, ip
 800202c:	4192      	sbcs	r2, r2
 800202e:	444c      	add	r4, r9
 8002030:	4252      	negs	r2, r2
 8002032:	0005      	movs	r5, r0
 8002034:	18a4      	adds	r4, r4, r2
 8002036:	e74c      	b.n	8001ed2 <__aeabi_dsub+0x552>
 8002038:	001a      	movs	r2, r3
 800203a:	001c      	movs	r4, r3
 800203c:	432a      	orrs	r2, r5
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x6c2>
 8002040:	e6b3      	b.n	8001daa <__aeabi_dsub+0x42a>
 8002042:	e6c9      	b.n	8001dd8 <__aeabi_dsub+0x458>
 8002044:	2480      	movs	r4, #128	@ 0x80
 8002046:	2600      	movs	r6, #0
 8002048:	0324      	lsls	r4, r4, #12
 800204a:	e5ae      	b.n	8001baa <__aeabi_dsub+0x22a>
 800204c:	2120      	movs	r1, #32
 800204e:	2500      	movs	r5, #0
 8002050:	1a09      	subs	r1, r1, r0
 8002052:	e517      	b.n	8001a84 <__aeabi_dsub+0x104>
 8002054:	2200      	movs	r2, #0
 8002056:	2500      	movs	r5, #0
 8002058:	4c0b      	ldr	r4, [pc, #44]	@ (8002088 <__aeabi_dsub+0x708>)
 800205a:	e53a      	b.n	8001ad2 <__aeabi_dsub+0x152>
 800205c:	2d00      	cmp	r5, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x6e2>
 8002060:	e5f6      	b.n	8001c50 <__aeabi_dsub+0x2d0>
 8002062:	464b      	mov	r3, r9
 8002064:	1bda      	subs	r2, r3, r7
 8002066:	4692      	mov	sl, r2
 8002068:	2f00      	cmp	r7, #0
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x6ee>
 800206c:	e66f      	b.n	8001d4e <__aeabi_dsub+0x3ce>
 800206e:	2a38      	cmp	r2, #56	@ 0x38
 8002070:	dc05      	bgt.n	800207e <__aeabi_dsub+0x6fe>
 8002072:	2680      	movs	r6, #128	@ 0x80
 8002074:	0436      	lsls	r6, r6, #16
 8002076:	4334      	orrs	r4, r6
 8002078:	4688      	mov	r8, r1
 800207a:	000e      	movs	r6, r1
 800207c:	e6d1      	b.n	8001e22 <__aeabi_dsub+0x4a2>
 800207e:	4688      	mov	r8, r1
 8002080:	000e      	movs	r6, r1
 8002082:	2501      	movs	r5, #1
 8002084:	e6de      	b.n	8001e44 <__aeabi_dsub+0x4c4>
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	000007ff 	.word	0x000007ff
 800208c:	ff7fffff 	.word	0xff7fffff
 8002090:	000007fe 	.word	0x000007fe
 8002094:	2d00      	cmp	r5, #0
 8002096:	d100      	bne.n	800209a <__aeabi_dsub+0x71a>
 8002098:	e668      	b.n	8001d6c <__aeabi_dsub+0x3ec>
 800209a:	464b      	mov	r3, r9
 800209c:	1bd9      	subs	r1, r3, r7
 800209e:	2f00      	cmp	r7, #0
 80020a0:	d101      	bne.n	80020a6 <__aeabi_dsub+0x726>
 80020a2:	468a      	mov	sl, r1
 80020a4:	e5a7      	b.n	8001bf6 <__aeabi_dsub+0x276>
 80020a6:	2701      	movs	r7, #1
 80020a8:	2938      	cmp	r1, #56	@ 0x38
 80020aa:	dd00      	ble.n	80020ae <__aeabi_dsub+0x72e>
 80020ac:	e5c7      	b.n	8001c3e <__aeabi_dsub+0x2be>
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	0412      	lsls	r2, r2, #16
 80020b2:	4314      	orrs	r4, r2
 80020b4:	e5af      	b.n	8001c16 <__aeabi_dsub+0x296>
 80020b6:	46c0      	nop			@ (mov r8, r8)

080020b8 <__aeabi_dcmpun>:
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	46c6      	mov	lr, r8
 80020bc:	031e      	lsls	r6, r3, #12
 80020be:	0b36      	lsrs	r6, r6, #12
 80020c0:	46b0      	mov	r8, r6
 80020c2:	4e0d      	ldr	r6, [pc, #52]	@ (80020f8 <__aeabi_dcmpun+0x40>)
 80020c4:	030c      	lsls	r4, r1, #12
 80020c6:	004d      	lsls	r5, r1, #1
 80020c8:	005f      	lsls	r7, r3, #1
 80020ca:	b500      	push	{lr}
 80020cc:	0b24      	lsrs	r4, r4, #12
 80020ce:	0d6d      	lsrs	r5, r5, #21
 80020d0:	0d7f      	lsrs	r7, r7, #21
 80020d2:	42b5      	cmp	r5, r6
 80020d4:	d00b      	beq.n	80020ee <__aeabi_dcmpun+0x36>
 80020d6:	4908      	ldr	r1, [pc, #32]	@ (80020f8 <__aeabi_dcmpun+0x40>)
 80020d8:	2000      	movs	r0, #0
 80020da:	428f      	cmp	r7, r1
 80020dc:	d104      	bne.n	80020e8 <__aeabi_dcmpun+0x30>
 80020de:	4646      	mov	r6, r8
 80020e0:	4316      	orrs	r6, r2
 80020e2:	0030      	movs	r0, r6
 80020e4:	1e43      	subs	r3, r0, #1
 80020e6:	4198      	sbcs	r0, r3
 80020e8:	bc80      	pop	{r7}
 80020ea:	46b8      	mov	r8, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	4304      	orrs	r4, r0
 80020f0:	2001      	movs	r0, #1
 80020f2:	2c00      	cmp	r4, #0
 80020f4:	d1f8      	bne.n	80020e8 <__aeabi_dcmpun+0x30>
 80020f6:	e7ee      	b.n	80020d6 <__aeabi_dcmpun+0x1e>
 80020f8:	000007ff 	.word	0x000007ff

080020fc <__aeabi_d2iz>:
 80020fc:	000b      	movs	r3, r1
 80020fe:	0002      	movs	r2, r0
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	4d16      	ldr	r5, [pc, #88]	@ (800215c <__aeabi_d2iz+0x60>)
 8002104:	030c      	lsls	r4, r1, #12
 8002106:	b082      	sub	sp, #8
 8002108:	0049      	lsls	r1, r1, #1
 800210a:	2000      	movs	r0, #0
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	0b24      	lsrs	r4, r4, #12
 8002112:	0d49      	lsrs	r1, r1, #21
 8002114:	0fde      	lsrs	r6, r3, #31
 8002116:	42a9      	cmp	r1, r5
 8002118:	dd04      	ble.n	8002124 <__aeabi_d2iz+0x28>
 800211a:	4811      	ldr	r0, [pc, #68]	@ (8002160 <__aeabi_d2iz+0x64>)
 800211c:	4281      	cmp	r1, r0
 800211e:	dd03      	ble.n	8002128 <__aeabi_d2iz+0x2c>
 8002120:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <__aeabi_d2iz+0x68>)
 8002122:	18f0      	adds	r0, r6, r3
 8002124:	b002      	add	sp, #8
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	2080      	movs	r0, #128	@ 0x80
 800212a:	0340      	lsls	r0, r0, #13
 800212c:	4320      	orrs	r0, r4
 800212e:	4c0e      	ldr	r4, [pc, #56]	@ (8002168 <__aeabi_d2iz+0x6c>)
 8002130:	1a64      	subs	r4, r4, r1
 8002132:	2c1f      	cmp	r4, #31
 8002134:	dd08      	ble.n	8002148 <__aeabi_d2iz+0x4c>
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <__aeabi_d2iz+0x70>)
 8002138:	1a5b      	subs	r3, r3, r1
 800213a:	40d8      	lsrs	r0, r3
 800213c:	0003      	movs	r3, r0
 800213e:	4258      	negs	r0, r3
 8002140:	2e00      	cmp	r6, #0
 8002142:	d1ef      	bne.n	8002124 <__aeabi_d2iz+0x28>
 8002144:	0018      	movs	r0, r3
 8002146:	e7ed      	b.n	8002124 <__aeabi_d2iz+0x28>
 8002148:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <__aeabi_d2iz+0x74>)
 800214a:	9a00      	ldr	r2, [sp, #0]
 800214c:	469c      	mov	ip, r3
 800214e:	0003      	movs	r3, r0
 8002150:	4461      	add	r1, ip
 8002152:	408b      	lsls	r3, r1
 8002154:	40e2      	lsrs	r2, r4
 8002156:	4313      	orrs	r3, r2
 8002158:	e7f1      	b.n	800213e <__aeabi_d2iz+0x42>
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	000003fe 	.word	0x000003fe
 8002160:	0000041d 	.word	0x0000041d
 8002164:	7fffffff 	.word	0x7fffffff
 8002168:	00000433 	.word	0x00000433
 800216c:	00000413 	.word	0x00000413
 8002170:	fffffbed 	.word	0xfffffbed

08002174 <__aeabi_i2d>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	2800      	cmp	r0, #0
 8002178:	d016      	beq.n	80021a8 <__aeabi_i2d+0x34>
 800217a:	17c3      	asrs	r3, r0, #31
 800217c:	18c5      	adds	r5, r0, r3
 800217e:	405d      	eors	r5, r3
 8002180:	0fc4      	lsrs	r4, r0, #31
 8002182:	0028      	movs	r0, r5
 8002184:	f000 f914 	bl	80023b0 <__clzsi2>
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <__aeabi_i2d+0x58>)
 800218a:	1a1b      	subs	r3, r3, r0
 800218c:	055b      	lsls	r3, r3, #21
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	280a      	cmp	r0, #10
 8002192:	dc14      	bgt.n	80021be <__aeabi_i2d+0x4a>
 8002194:	0002      	movs	r2, r0
 8002196:	002e      	movs	r6, r5
 8002198:	3215      	adds	r2, #21
 800219a:	4096      	lsls	r6, r2
 800219c:	220b      	movs	r2, #11
 800219e:	1a12      	subs	r2, r2, r0
 80021a0:	40d5      	lsrs	r5, r2
 80021a2:	032d      	lsls	r5, r5, #12
 80021a4:	0b2d      	lsrs	r5, r5, #12
 80021a6:	e003      	b.n	80021b0 <__aeabi_i2d+0x3c>
 80021a8:	2400      	movs	r4, #0
 80021aa:	2300      	movs	r3, #0
 80021ac:	2500      	movs	r5, #0
 80021ae:	2600      	movs	r6, #0
 80021b0:	051b      	lsls	r3, r3, #20
 80021b2:	432b      	orrs	r3, r5
 80021b4:	07e4      	lsls	r4, r4, #31
 80021b6:	4323      	orrs	r3, r4
 80021b8:	0030      	movs	r0, r6
 80021ba:	0019      	movs	r1, r3
 80021bc:	bd70      	pop	{r4, r5, r6, pc}
 80021be:	380b      	subs	r0, #11
 80021c0:	4085      	lsls	r5, r0
 80021c2:	032d      	lsls	r5, r5, #12
 80021c4:	2600      	movs	r6, #0
 80021c6:	0b2d      	lsrs	r5, r5, #12
 80021c8:	e7f2      	b.n	80021b0 <__aeabi_i2d+0x3c>
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	0000041e 	.word	0x0000041e

080021d0 <__aeabi_ui2d>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	1e04      	subs	r4, r0, #0
 80021d4:	d010      	beq.n	80021f8 <__aeabi_ui2d+0x28>
 80021d6:	f000 f8eb 	bl	80023b0 <__clzsi2>
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <__aeabi_ui2d+0x44>)
 80021dc:	1a1b      	subs	r3, r3, r0
 80021de:	055b      	lsls	r3, r3, #21
 80021e0:	0d5b      	lsrs	r3, r3, #21
 80021e2:	280a      	cmp	r0, #10
 80021e4:	dc0f      	bgt.n	8002206 <__aeabi_ui2d+0x36>
 80021e6:	220b      	movs	r2, #11
 80021e8:	0021      	movs	r1, r4
 80021ea:	1a12      	subs	r2, r2, r0
 80021ec:	40d1      	lsrs	r1, r2
 80021ee:	3015      	adds	r0, #21
 80021f0:	030a      	lsls	r2, r1, #12
 80021f2:	4084      	lsls	r4, r0
 80021f4:	0b12      	lsrs	r2, r2, #12
 80021f6:	e001      	b.n	80021fc <__aeabi_ui2d+0x2c>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2200      	movs	r2, #0
 80021fc:	051b      	lsls	r3, r3, #20
 80021fe:	4313      	orrs	r3, r2
 8002200:	0020      	movs	r0, r4
 8002202:	0019      	movs	r1, r3
 8002204:	bd10      	pop	{r4, pc}
 8002206:	0022      	movs	r2, r4
 8002208:	380b      	subs	r0, #11
 800220a:	4082      	lsls	r2, r0
 800220c:	0312      	lsls	r2, r2, #12
 800220e:	2400      	movs	r4, #0
 8002210:	0b12      	lsrs	r2, r2, #12
 8002212:	e7f3      	b.n	80021fc <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__aeabi_f2d>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	0242      	lsls	r2, r0, #9
 800221c:	0043      	lsls	r3, r0, #1
 800221e:	0fc4      	lsrs	r4, r0, #31
 8002220:	20fe      	movs	r0, #254	@ 0xfe
 8002222:	0e1b      	lsrs	r3, r3, #24
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	0a55      	lsrs	r5, r2, #9
 8002228:	4208      	tst	r0, r1
 800222a:	d00c      	beq.n	8002246 <__aeabi_f2d+0x2e>
 800222c:	21e0      	movs	r1, #224	@ 0xe0
 800222e:	0089      	lsls	r1, r1, #2
 8002230:	468c      	mov	ip, r1
 8002232:	076d      	lsls	r5, r5, #29
 8002234:	0b12      	lsrs	r2, r2, #12
 8002236:	4463      	add	r3, ip
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	4313      	orrs	r3, r2
 800223c:	07e4      	lsls	r4, r4, #31
 800223e:	4323      	orrs	r3, r4
 8002240:	0028      	movs	r0, r5
 8002242:	0019      	movs	r1, r3
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	2b00      	cmp	r3, #0
 8002248:	d114      	bne.n	8002274 <__aeabi_f2d+0x5c>
 800224a:	2d00      	cmp	r5, #0
 800224c:	d01b      	beq.n	8002286 <__aeabi_f2d+0x6e>
 800224e:	0028      	movs	r0, r5
 8002250:	f000 f8ae 	bl	80023b0 <__clzsi2>
 8002254:	280a      	cmp	r0, #10
 8002256:	dc1c      	bgt.n	8002292 <__aeabi_f2d+0x7a>
 8002258:	230b      	movs	r3, #11
 800225a:	002a      	movs	r2, r5
 800225c:	1a1b      	subs	r3, r3, r0
 800225e:	40da      	lsrs	r2, r3
 8002260:	0003      	movs	r3, r0
 8002262:	3315      	adds	r3, #21
 8002264:	409d      	lsls	r5, r3
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <__aeabi_f2d+0x88>)
 8002268:	0312      	lsls	r2, r2, #12
 800226a:	1a1b      	subs	r3, r3, r0
 800226c:	055b      	lsls	r3, r3, #21
 800226e:	0b12      	lsrs	r2, r2, #12
 8002270:	0d5b      	lsrs	r3, r3, #21
 8002272:	e7e1      	b.n	8002238 <__aeabi_f2d+0x20>
 8002274:	2d00      	cmp	r5, #0
 8002276:	d009      	beq.n	800228c <__aeabi_f2d+0x74>
 8002278:	0b13      	lsrs	r3, r2, #12
 800227a:	2280      	movs	r2, #128	@ 0x80
 800227c:	0312      	lsls	r2, r2, #12
 800227e:	431a      	orrs	r2, r3
 8002280:	076d      	lsls	r5, r5, #29
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <__aeabi_f2d+0x8c>)
 8002284:	e7d8      	b.n	8002238 <__aeabi_f2d+0x20>
 8002286:	2300      	movs	r3, #0
 8002288:	2200      	movs	r2, #0
 800228a:	e7d5      	b.n	8002238 <__aeabi_f2d+0x20>
 800228c:	2200      	movs	r2, #0
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <__aeabi_f2d+0x8c>)
 8002290:	e7d2      	b.n	8002238 <__aeabi_f2d+0x20>
 8002292:	0003      	movs	r3, r0
 8002294:	002a      	movs	r2, r5
 8002296:	3b0b      	subs	r3, #11
 8002298:	409a      	lsls	r2, r3
 800229a:	2500      	movs	r5, #0
 800229c:	e7e3      	b.n	8002266 <__aeabi_f2d+0x4e>
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	00000389 	.word	0x00000389
 80022a4:	000007ff 	.word	0x000007ff

080022a8 <__aeabi_d2f>:
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	004b      	lsls	r3, r1, #1
 80022ac:	030f      	lsls	r7, r1, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4c3b      	ldr	r4, [pc, #236]	@ (80023a0 <__aeabi_d2f+0xf8>)
 80022b2:	0f45      	lsrs	r5, r0, #29
 80022b4:	b083      	sub	sp, #12
 80022b6:	0a7f      	lsrs	r7, r7, #9
 80022b8:	1c5e      	adds	r6, r3, #1
 80022ba:	432f      	orrs	r7, r5
 80022bc:	9000      	str	r0, [sp, #0]
 80022be:	9101      	str	r1, [sp, #4]
 80022c0:	0fca      	lsrs	r2, r1, #31
 80022c2:	00c5      	lsls	r5, r0, #3
 80022c4:	4226      	tst	r6, r4
 80022c6:	d00b      	beq.n	80022e0 <__aeabi_d2f+0x38>
 80022c8:	4936      	ldr	r1, [pc, #216]	@ (80023a4 <__aeabi_d2f+0xfc>)
 80022ca:	185c      	adds	r4, r3, r1
 80022cc:	2cfe      	cmp	r4, #254	@ 0xfe
 80022ce:	dd13      	ble.n	80022f8 <__aeabi_d2f+0x50>
 80022d0:	20ff      	movs	r0, #255	@ 0xff
 80022d2:	2300      	movs	r3, #0
 80022d4:	05c0      	lsls	r0, r0, #23
 80022d6:	4318      	orrs	r0, r3
 80022d8:	07d2      	lsls	r2, r2, #31
 80022da:	4310      	orrs	r0, r2
 80022dc:	b003      	add	sp, #12
 80022de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <__aeabi_d2f+0x42>
 80022e4:	2000      	movs	r0, #0
 80022e6:	2300      	movs	r3, #0
 80022e8:	e7f4      	b.n	80022d4 <__aeabi_d2f+0x2c>
 80022ea:	433d      	orrs	r5, r7
 80022ec:	d0f0      	beq.n	80022d0 <__aeabi_d2f+0x28>
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	03db      	lsls	r3, r3, #15
 80022f2:	20ff      	movs	r0, #255	@ 0xff
 80022f4:	433b      	orrs	r3, r7
 80022f6:	e7ed      	b.n	80022d4 <__aeabi_d2f+0x2c>
 80022f8:	2c00      	cmp	r4, #0
 80022fa:	dd14      	ble.n	8002326 <__aeabi_d2f+0x7e>
 80022fc:	9b00      	ldr	r3, [sp, #0]
 80022fe:	00ff      	lsls	r7, r7, #3
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	4183      	sbcs	r3, r0
 8002306:	0f69      	lsrs	r1, r5, #29
 8002308:	433b      	orrs	r3, r7
 800230a:	430b      	orrs	r3, r1
 800230c:	0759      	lsls	r1, r3, #29
 800230e:	d041      	beq.n	8002394 <__aeabi_d2f+0xec>
 8002310:	210f      	movs	r1, #15
 8002312:	4019      	ands	r1, r3
 8002314:	2904      	cmp	r1, #4
 8002316:	d028      	beq.n	800236a <__aeabi_d2f+0xc2>
 8002318:	3304      	adds	r3, #4
 800231a:	0159      	lsls	r1, r3, #5
 800231c:	d525      	bpl.n	800236a <__aeabi_d2f+0xc2>
 800231e:	3401      	adds	r4, #1
 8002320:	2300      	movs	r3, #0
 8002322:	b2e0      	uxtb	r0, r4
 8002324:	e7d6      	b.n	80022d4 <__aeabi_d2f+0x2c>
 8002326:	0021      	movs	r1, r4
 8002328:	3117      	adds	r1, #23
 800232a:	dbdb      	blt.n	80022e4 <__aeabi_d2f+0x3c>
 800232c:	2180      	movs	r1, #128	@ 0x80
 800232e:	201e      	movs	r0, #30
 8002330:	0409      	lsls	r1, r1, #16
 8002332:	4339      	orrs	r1, r7
 8002334:	1b00      	subs	r0, r0, r4
 8002336:	281f      	cmp	r0, #31
 8002338:	dd1b      	ble.n	8002372 <__aeabi_d2f+0xca>
 800233a:	2602      	movs	r6, #2
 800233c:	4276      	negs	r6, r6
 800233e:	1b34      	subs	r4, r6, r4
 8002340:	000e      	movs	r6, r1
 8002342:	40e6      	lsrs	r6, r4
 8002344:	0034      	movs	r4, r6
 8002346:	2820      	cmp	r0, #32
 8002348:	d004      	beq.n	8002354 <__aeabi_d2f+0xac>
 800234a:	4817      	ldr	r0, [pc, #92]	@ (80023a8 <__aeabi_d2f+0x100>)
 800234c:	4684      	mov	ip, r0
 800234e:	4463      	add	r3, ip
 8002350:	4099      	lsls	r1, r3
 8002352:	430d      	orrs	r5, r1
 8002354:	002b      	movs	r3, r5
 8002356:	1e59      	subs	r1, r3, #1
 8002358:	418b      	sbcs	r3, r1
 800235a:	4323      	orrs	r3, r4
 800235c:	0759      	lsls	r1, r3, #29
 800235e:	d015      	beq.n	800238c <__aeabi_d2f+0xe4>
 8002360:	210f      	movs	r1, #15
 8002362:	2400      	movs	r4, #0
 8002364:	4019      	ands	r1, r3
 8002366:	2904      	cmp	r1, #4
 8002368:	d117      	bne.n	800239a <__aeabi_d2f+0xf2>
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	0a5b      	lsrs	r3, r3, #9
 800236e:	b2e0      	uxtb	r0, r4
 8002370:	e7b0      	b.n	80022d4 <__aeabi_d2f+0x2c>
 8002372:	4c0e      	ldr	r4, [pc, #56]	@ (80023ac <__aeabi_d2f+0x104>)
 8002374:	191c      	adds	r4, r3, r4
 8002376:	002b      	movs	r3, r5
 8002378:	40a5      	lsls	r5, r4
 800237a:	40c3      	lsrs	r3, r0
 800237c:	40a1      	lsls	r1, r4
 800237e:	1e68      	subs	r0, r5, #1
 8002380:	4185      	sbcs	r5, r0
 8002382:	4329      	orrs	r1, r5
 8002384:	430b      	orrs	r3, r1
 8002386:	2400      	movs	r4, #0
 8002388:	0759      	lsls	r1, r3, #29
 800238a:	d1c1      	bne.n	8002310 <__aeabi_d2f+0x68>
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	2000      	movs	r0, #0
 8002390:	0a5b      	lsrs	r3, r3, #9
 8002392:	e79f      	b.n	80022d4 <__aeabi_d2f+0x2c>
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	b2e0      	uxtb	r0, r4
 8002398:	e79c      	b.n	80022d4 <__aeabi_d2f+0x2c>
 800239a:	3304      	adds	r3, #4
 800239c:	e7e5      	b.n	800236a <__aeabi_d2f+0xc2>
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	000007fe 	.word	0x000007fe
 80023a4:	fffffc80 	.word	0xfffffc80
 80023a8:	fffffca2 	.word	0xfffffca2
 80023ac:	fffffc82 	.word	0xfffffc82

080023b0 <__clzsi2>:
 80023b0:	211c      	movs	r1, #28
 80023b2:	2301      	movs	r3, #1
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	4298      	cmp	r0, r3
 80023b8:	d301      	bcc.n	80023be <__clzsi2+0xe>
 80023ba:	0c00      	lsrs	r0, r0, #16
 80023bc:	3910      	subs	r1, #16
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	4298      	cmp	r0, r3
 80023c2:	d301      	bcc.n	80023c8 <__clzsi2+0x18>
 80023c4:	0a00      	lsrs	r0, r0, #8
 80023c6:	3908      	subs	r1, #8
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	4298      	cmp	r0, r3
 80023cc:	d301      	bcc.n	80023d2 <__clzsi2+0x22>
 80023ce:	0900      	lsrs	r0, r0, #4
 80023d0:	3904      	subs	r1, #4
 80023d2:	a202      	add	r2, pc, #8	@ (adr r2, 80023dc <__clzsi2+0x2c>)
 80023d4:	5c10      	ldrb	r0, [r2, r0]
 80023d6:	1840      	adds	r0, r0, r1
 80023d8:	4770      	bx	lr
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	02020304 	.word	0x02020304
 80023e0:	01010101 	.word	0x01010101
	...

080023ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	0018      	movs	r0, r3
 80023f6:	230c      	movs	r3, #12
 80023f8:	001a      	movs	r2, r3
 80023fa:	2100      	movs	r1, #0
 80023fc:	f005 fbcc 	bl	8007b98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002400:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002402:	4a2e      	ldr	r2, [pc, #184]	@ (80024bc <MX_ADC1_Init+0xd0>)
 8002404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002406:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002408:	2280      	movs	r2, #128	@ 0x80
 800240a:	05d2      	lsls	r2, r2, #23
 800240c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800241a:	4b27      	ldr	r3, [pc, #156]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002422:	2204      	movs	r2, #4
 8002424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002426:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002428:	2200      	movs	r2, #0
 800242a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800242c:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800242e:	2200      	movs	r2, #0
 8002430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002432:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002434:	2200      	movs	r2, #0
 8002436:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002438:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800243a:	2201      	movs	r2, #1
 800243c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002440:	2220      	movs	r2, #32
 8002442:	2100      	movs	r1, #0
 8002444:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002446:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002448:	2200      	movs	r2, #0
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002454:	222c      	movs	r2, #44	@ 0x2c
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800245a:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002460:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002466:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002468:	2200      	movs	r2, #0
 800246a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800246e:	223c      	movs	r2, #60	@ 0x3c
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002474:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 8002476:	2200      	movs	r2, #0
 8002478:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800247a:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 800247c:	0018      	movs	r0, r3
 800247e:	f001 f8d3 	bl	8003628 <HAL_ADC_Init>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002486:	f000 fa49 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2200      	movs	r2, #0
 8002494:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800249c:	1d3a      	adds	r2, r7, #4
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <MX_ADC1_Init+0xcc>)
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f001 fa68 	bl	8003978 <HAL_ADC_ConfigChannel>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d001      	beq.n	80024b0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80024ac:	f000 fa36 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200001f0 	.word	0x200001f0
 80024bc:	40012400 	.word	0x40012400

080024c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08b      	sub	sp, #44	@ 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	2414      	movs	r4, #20
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	0018      	movs	r0, r3
 80024ce:	2314      	movs	r3, #20
 80024d0:	001a      	movs	r2, r3
 80024d2:	2100      	movs	r1, #0
 80024d4:	f005 fb60 	bl	8007b98 <memset>
  if(adcHandle->Instance==ADC1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_ADC_MspInit+0x80>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d129      	bne.n	8002536 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_ADC_MspInit+0x84>)
 80024e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_ADC_MspInit+0x84>)
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	0349      	lsls	r1, r1, #13
 80024ec:	430a      	orrs	r2, r1
 80024ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80024f0:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <HAL_ADC_MspInit+0x84>)
 80024f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	035b      	lsls	r3, r3, #13
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_ADC_MspInit+0x84>)
 8002500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <HAL_ADC_MspInit+0x84>)
 8002504:	2101      	movs	r1, #1
 8002506:	430a      	orrs	r2, r1
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_ADC_MspInit+0x84>)
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002516:	193b      	adds	r3, r7, r4
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251c:	193b      	adds	r3, r7, r4
 800251e:	2203      	movs	r2, #3
 8002520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	193b      	adds	r3, r7, r4
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	193a      	adds	r2, r7, r4
 800252a:	23a0      	movs	r3, #160	@ 0xa0
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f001 fcad 	bl	8003e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b00b      	add	sp, #44	@ 0x2c
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	40012400 	.word	0x40012400
 8002544:	40021000 	.word	0x40021000

08002548 <ADT_Read>:
extern SPI_HandleTypeDef hpsil;

#define GPIO_CS_PIN GPIO_PIN_4
#define GPIO_CS_PORT GPIO_4

void ADT_Read(uint8_t Reg,uint8_t *Buffer,size_t len){
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	210f      	movs	r1, #15
 8002554:	187b      	adds	r3, r7, r1
 8002556:	1c02      	adds	r2, r0, #0
 8002558:	701a      	strb	r2, [r3, #0]
	Reg|=0x80;
 800255a:	187b      	adds	r3, r7, r1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	4252      	negs	r2, r2
 8002562:	4313      	orrs	r3, r2
 8002564:	b2da      	uxtb	r2, r3
 8002566:	187b      	adds	r3, r7, r1
 8002568:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,&Reg,1,500);
 800256a:	23fa      	movs	r3, #250	@ 0xfa
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	1879      	adds	r1, r7, r1
 8002570:	480a      	ldr	r0, [pc, #40]	@ (800259c <ADT_Read+0x54>)
 8002572:	2201      	movs	r2, #1
 8002574:	f003 f9f8 	bl	8005968 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,Buffer,len,100);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	b29a      	uxth	r2, r3
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4807      	ldr	r0, [pc, #28]	@ (800259c <ADT_Read+0x54>)
 8002580:	2364      	movs	r3, #100	@ 0x64
 8002582:	f003 fb51 	bl	8005c28 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8002586:	23a0      	movs	r3, #160	@ 0xa0
 8002588:	05db      	lsls	r3, r3, #23
 800258a:	2201      	movs	r2, #1
 800258c:	2110      	movs	r1, #16
 800258e:	0018      	movs	r0, r3
 8002590:	f001 fde2 	bl	8004158 <HAL_GPIO_WritePin>
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200002b0 	.word	0x200002b0

080025a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a6:	240c      	movs	r4, #12
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	0018      	movs	r0, r3
 80025ac:	2314      	movs	r3, #20
 80025ae:	001a      	movs	r2, r3
 80025b0:	2100      	movs	r1, #0
 80025b2:	f005 faf1 	bl	8007b98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <MX_GPIO_Init+0x80>)
 80025b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <MX_GPIO_Init+0x80>)
 80025bc:	2101      	movs	r1, #1
 80025be:	430a      	orrs	r2, r1
 80025c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <MX_GPIO_Init+0x80>)
 80025c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c6:	2201      	movs	r2, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <MX_GPIO_Init+0x80>)
 80025d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d2:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <MX_GPIO_Init+0x80>)
 80025d4:	2102      	movs	r1, #2
 80025d6:	430a      	orrs	r2, r1
 80025d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025da:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <MX_GPIO_Init+0x80>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025de:	2202      	movs	r2, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <MX_GPIO_Init+0x84>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	2103      	movs	r1, #3
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 fdb3 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025f2:	0021      	movs	r1, r4
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2203      	movs	r2, #3
 80025f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2201      	movs	r2, #1
 80025fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	187b      	adds	r3, r7, r1
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <MX_GPIO_Init+0x84>)
 8002610:	0019      	movs	r1, r3
 8002612:	0010      	movs	r0, r2
 8002614:	f001 fc3c 	bl	8003e90 <HAL_GPIO_Init>

}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b009      	add	sp, #36	@ 0x24
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	50000400 	.word	0x50000400

08002628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <MX_I2C1_Init+0x74>)
 800262e:	4a1c      	ldr	r2, [pc, #112]	@ (80026a0 <MX_I2C1_Init+0x78>)
 8002630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8002632:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <MX_I2C1_Init+0x74>)
 8002634:	4a1b      	ldr	r2, [pc, #108]	@ (80026a4 <MX_I2C1_Init+0x7c>)
 8002636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002638:	4b18      	ldr	r3, [pc, #96]	@ (800269c <MX_I2C1_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800263e:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_I2C1_Init+0x74>)
 8002640:	2201      	movs	r2, #1
 8002642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002644:	4b15      	ldr	r3, [pc, #84]	@ (800269c <MX_I2C1_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_I2C1_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_I2C1_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_I2C1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_I2C1_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_I2C1_Init+0x74>)
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fd95 	bl	8004194 <HAL_I2C_Init>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800266e:	f000 f955 	bl	800291c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002672:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <MX_I2C1_Init+0x74>)
 8002674:	2100      	movs	r1, #0
 8002676:	0018      	movs	r0, r3
 8002678:	f002 f9fa 	bl	8004a70 <HAL_I2CEx_ConfigAnalogFilter>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002680:	f000 f94c 	bl	800291c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <MX_I2C1_Init+0x74>)
 8002686:	2100      	movs	r1, #0
 8002688:	0018      	movs	r0, r3
 800268a:	f002 fa3d 	bl	8004b08 <HAL_I2CEx_ConfigDigitalFilter>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002692:	f000 f943 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000254 	.word	0x20000254
 80026a0:	40005400 	.word	0x40005400
 80026a4:	00503d58 	.word	0x00503d58

080026a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b091      	sub	sp, #68	@ 0x44
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	232c      	movs	r3, #44	@ 0x2c
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f005 fa6c 	bl	8007b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c0:	2414      	movs	r4, #20
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	0018      	movs	r0, r3
 80026c6:	2318      	movs	r3, #24
 80026c8:	001a      	movs	r2, r3
 80026ca:	2100      	movs	r1, #0
 80026cc:	f005 fa64 	bl	8007b98 <memset>
  if(i2cHandle->Instance==I2C1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a22      	ldr	r2, [pc, #136]	@ (8002760 <HAL_I2C_MspInit+0xb8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d13d      	bne.n	8002756 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	2220      	movs	r2, #32
 80026de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	0018      	movs	r0, r3
 80026ea:	f002 ff5f 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026f2:	f000 f913 	bl	800291c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_I2C_MspInit+0xbc>)
 80026f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <HAL_I2C_MspInit+0xbc>)
 80026fc:	2102      	movs	r1, #2
 80026fe:	430a      	orrs	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_I2C_MspInit+0xbc>)
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002706:	2202      	movs	r2, #2
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800270e:	212c      	movs	r1, #44	@ 0x2c
 8002710:	187b      	adds	r3, r7, r1
 8002712:	22c0      	movs	r2, #192	@ 0xc0
 8002714:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2212      	movs	r2, #18
 800271a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2206      	movs	r2, #6
 800272c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	187b      	adds	r3, r7, r1
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <HAL_I2C_MspInit+0xc0>)
 8002732:	0019      	movs	r1, r3
 8002734:	0010      	movs	r0, r2
 8002736:	f001 fbab 	bl	8003e90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_I2C_MspInit+0xbc>)
 800273c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_I2C_MspInit+0xbc>)
 8002740:	2180      	movs	r1, #128	@ 0x80
 8002742:	0389      	lsls	r1, r1, #14
 8002744:	430a      	orrs	r2, r1
 8002746:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002748:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_I2C_MspInit+0xbc>)
 800274a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	039b      	lsls	r3, r3, #14
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b011      	add	sp, #68	@ 0x44
 800275c:	bd90      	pop	{r4, r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	40005400 	.word	0x40005400
 8002764:	40021000 	.word	0x40021000
 8002768:	50000400 	.word	0x50000400

0800276c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002772:	f000 fdb1 	bl	80032d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002776:	f000 f889 	bl	800288c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800277a:	f7ff ff11 	bl	80025a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800277e:	f7ff fe35 	bl	80023ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8002782:	f7ff ff51 	bl	8002628 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002786:	f000 f8cf 	bl	8002928 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800278a:	f000 fa57 	bl	8002c3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800278e:	f000 fb67 	bl	8002e60 <ssd1306_Init>
  //ssd1306_UpdateScreen();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


       HAL_Delay(1000);
 8002792:	23fa      	movs	r3, #250	@ 0xfa
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fe24 	bl	80033e4 <HAL_Delay>
//	  ssd1306_WriteString("Temp: ", Font_11x18, White);
//	  ssd1306_WriteString(contempStr, Font_11x18, White);
//	  ssd1306_UpdateScreen();
//
//	  HAL_Delay(1000);
	  ADT_Read(0x00, ADT_Buffer, 2);
 800279c:	4b33      	ldr	r3, [pc, #204]	@ (800286c <main+0x100>)
 800279e:	2202      	movs	r2, #2
 80027a0:	0019      	movs	r1, r3
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff fed0 	bl	8002548 <ADT_Read>
	    rawTemperature = (ADT_Buffer[0] << 8) | ADT_Buffer[1];
 80027a8:	4b30      	ldr	r3, [pc, #192]	@ (800286c <main+0x100>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <main+0x100>)
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002870 <main+0x104>)
 80027be:	801a      	strh	r2, [r3, #0]
	    if (rawTemperature & 0x8000) { // Check for negative temperature
 80027c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <main+0x104>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	da03      	bge.n	80027d2 <main+0x66>
	        rawTemperature -= 65536;
 80027ca:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <main+0x104>)
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <main+0x104>)
 80027d0:	801a      	strh	r2, [r3, #0]
	    }
	    contemp = rawTemperature / 32.0;
 80027d2:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <main+0x104>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff fccc 	bl	8002174 <__aeabi_i2d>
 80027dc:	2200      	movs	r2, #0
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <main+0x108>)
 80027e0:	f7fe f9c2 	bl	8000b68 <__aeabi_ddiv>
 80027e4:	0002      	movs	r2, r0
 80027e6:	000b      	movs	r3, r1
 80027e8:	0010      	movs	r0, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	f7ff fd5c 	bl	80022a8 <__aeabi_d2f>
 80027f0:	1c02      	adds	r2, r0, #0
 80027f2:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <main+0x10c>)
 80027f4:	601a      	str	r2, [r3, #0]

	     // Debug output via UART
	    printf("Raw Temp: %d, Converted Temp: %.2f°C\n", rawTemperature, contemp);
 80027f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <main+0x104>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	001c      	movs	r4, r3
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <main+0x10c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c18      	adds	r0, r3, #0
 8002802:	f7ff fd09 	bl	8002218 <__aeabi_f2d>
 8002806:	0002      	movs	r2, r0
 8002808:	000b      	movs	r3, r1
 800280a:	481c      	ldr	r0, [pc, #112]	@ (800287c <main+0x110>)
 800280c:	0021      	movs	r1, r4
 800280e:	f005 f947 	bl	8007aa0 <iprintf>

	     // Update OLED display
	    ssd1306_Fill(Black);
 8002812:	2000      	movs	r0, #0
 8002814:	f000 fb90 	bl	8002f38 <ssd1306_Fill>
	    ssd1306_SetCursor(5, 5);
 8002818:	2105      	movs	r1, #5
 800281a:	2005      	movs	r0, #5
 800281c:	f000 fd04 	bl	8003228 <ssd1306_SetCursor>
	    sprintf(contempStr, "%.2f", contemp); // Format temperature
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <main+0x10c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1c18      	adds	r0, r3, #0
 8002826:	f7ff fcf7 	bl	8002218 <__aeabi_f2d>
 800282a:	0002      	movs	r2, r0
 800282c:	000b      	movs	r3, r1
 800282e:	4914      	ldr	r1, [pc, #80]	@ (8002880 <main+0x114>)
 8002830:	1d38      	adds	r0, r7, #4
 8002832:	f005 f945 	bl	8007ac0 <siprintf>
	    ssd1306_WriteString("Temp: ", Font_11x18, White);
 8002836:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <main+0x118>)
 8002838:	4813      	ldr	r0, [pc, #76]	@ (8002888 <main+0x11c>)
 800283a:	2201      	movs	r2, #1
 800283c:	9200      	str	r2, [sp, #0]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f000 fcc4 	bl	80031d0 <ssd1306_WriteString>
	    ssd1306_WriteString(contempStr, Font_11x18, White);
 8002848:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <main+0x118>)
 800284a:	1d38      	adds	r0, r7, #4
 800284c:	2201      	movs	r2, #1
 800284e:	9200      	str	r2, [sp, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f000 fcbb 	bl	80031d0 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 800285a:	f000 fb87 	bl	8002f6c <ssd1306_UpdateScreen>

	     HAL_Delay(1000);
 800285e:	23fa      	movs	r3, #250	@ 0xfa
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fdbe 	bl	80033e4 <HAL_Delay>
  {
 8002868:	e798      	b.n	800279c <main+0x30>
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	200002a8 	.word	0x200002a8
 8002870:	200002aa 	.word	0x200002aa
 8002874:	40400000 	.word	0x40400000
 8002878:	200002ac 	.word	0x200002ac
 800287c:	08009e98 	.word	0x08009e98
 8002880:	08009ec0 	.word	0x08009ec0
 8002884:	0800accc 	.word	0x0800accc
 8002888:	08009ec8 	.word	0x08009ec8

0800288c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b093      	sub	sp, #76	@ 0x4c
 8002890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002892:	2414      	movs	r4, #20
 8002894:	193b      	adds	r3, r7, r4
 8002896:	0018      	movs	r0, r3
 8002898:	2334      	movs	r3, #52	@ 0x34
 800289a:	001a      	movs	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	f005 f97b 	bl	8007b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	0018      	movs	r0, r3
 80028a6:	2310      	movs	r3, #16
 80028a8:	001a      	movs	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f005 f974 	bl	8007b98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f002 f973 	bl	8004ba0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2202      	movs	r2, #2
 80028be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	0052      	lsls	r2, r2, #1
 80028c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	2240      	movs	r2, #64	@ 0x40
 80028d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	0018      	movs	r0, r3
 80028de:	f002 f9ab 	bl	8004c38 <HAL_RCC_OscConfig>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d001      	beq.n	80028ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80028e6:	f000 f819 	bl	800291c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	2100      	movs	r1, #0
 8002906:	0018      	movs	r0, r3
 8002908:	f002 fca6 	bl	8005258 <HAL_RCC_ClockConfig>
 800290c:	1e03      	subs	r3, r0, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002910:	f000 f804 	bl	800291c <Error_Handler>
  }
}
 8002914:	46c0      	nop			@ (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b013      	add	sp, #76	@ 0x4c
 800291a:	bd90      	pop	{r4, r7, pc}

0800291c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	e7fd      	b.n	8002924 <Error_Handler+0x8>

08002928 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <MX_SPI1_Init+0x74>)
 800292e:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <MX_SPI1_Init+0x78>)
 8002930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <MX_SPI1_Init+0x74>)
 8002934:	2282      	movs	r2, #130	@ 0x82
 8002936:	0052      	lsls	r2, r2, #1
 8002938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800293a:	4b18      	ldr	r3, [pc, #96]	@ (800299c <MX_SPI1_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002940:	4b16      	ldr	r3, [pc, #88]	@ (800299c <MX_SPI1_Init+0x74>)
 8002942:	22e0      	movs	r2, #224	@ 0xe0
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <MX_SPI1_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <MX_SPI1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_SPI1_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_SPI1_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <MX_SPI1_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <MX_SPI1_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <MX_SPI1_Init+0x74>)
 8002974:	2207      	movs	r2, #7
 8002976:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <MX_SPI1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <MX_SPI1_Init+0x74>)
 8002980:	2208      	movs	r2, #8
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <MX_SPI1_Init+0x74>)
 8002986:	0018      	movs	r0, r3
 8002988:	f002 ff36 	bl	80057f8 <HAL_SPI_Init>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8002990:	f7ff ffc4 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	200002b0 	.word	0x200002b0
 80029a0:	40013000 	.word	0x40013000

080029a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b08b      	sub	sp, #44	@ 0x2c
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	2414      	movs	r4, #20
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	0018      	movs	r0, r3
 80029b2:	2314      	movs	r3, #20
 80029b4:	001a      	movs	r2, r3
 80029b6:	2100      	movs	r1, #0
 80029b8:	f005 f8ee 	bl	8007b98 <memset>
  if(spiHandle->Instance==SPI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <HAL_SPI_MspInit+0x8c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d130      	bne.n	8002a28 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029cc:	2180      	movs	r1, #128	@ 0x80
 80029ce:	0149      	lsls	r1, r1, #5
 80029d0:	430a      	orrs	r2, r1
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80029d4:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e6:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80029ee:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029fa:	0021      	movs	r1, r4
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	22f0      	movs	r2, #240	@ 0xf0
 8002a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2202      	movs	r2, #2
 8002a06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	187a      	adds	r2, r7, r1
 8002a1c:	23a0      	movs	r3, #160	@ 0xa0
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f001 fa34 	bl	8003e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b00b      	add	sp, #44	@ 0x2c
 8002a2e:	bd90      	pop	{r4, r7, pc}
 8002a30:	40013000 	.word	0x40013000
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_MspInit+0x44>)
 8002a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <HAL_MspInit+0x44>)
 8002a44:	2101      	movs	r1, #1
 8002a46:	430a      	orrs	r2, r1
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <HAL_MspInit+0x44>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_MspInit+0x44>)
 8002a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_MspInit+0x44>)
 8002a5c:	2180      	movs	r1, #128	@ 0x80
 8002a5e:	0549      	lsls	r1, r1, #21
 8002a60:	430a      	orrs	r2, r1
 8002a62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_MspInit+0x44>)
 8002a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	055b      	lsls	r3, r3, #21
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	40021000 	.word	0x40021000

08002a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	e7fd      	b.n	8002a84 <NMI_Handler+0x4>

08002a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	e7fd      	b.n	8002a8c <HardFault_Handler+0x4>

08002a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa8:	f000 fc80 	bl	80033ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  return 1;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_kill>:

int _kill(int pid, int sig)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac8:	f005 f8c0 	bl	8007c4c <__errno>
 8002acc:	0003      	movs	r3, r0
 8002ace:	2216      	movs	r2, #22
 8002ad0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	425b      	negs	r3, r3
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_exit>:

void _exit (int status)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	425a      	negs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f7ff ffe5 	bl	8002abe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	e7fd      	b.n	8002af4 <_exit+0x16>

08002af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e00a      	b.n	8002b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b0a:	e000      	b.n	8002b0e <_read+0x16>
 8002b0c:	bf00      	nop
 8002b0e:	0001      	movs	r1, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbf0      	blt.n	8002b0a <_read+0x12>
  }

  return len;
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e009      	b.n	8002b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	e000      	b.n	8002b52 <_write+0x20>
 8002b50:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3301      	adds	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbf1      	blt.n	8002b44 <_write+0x12>
  }
  return len;
 8002b60:	687b      	ldr	r3, [r7, #4]
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b006      	add	sp, #24
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_close>:

int _close(int file)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	425b      	negs	r3, r3
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b002      	add	sp, #8
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	0192      	lsls	r2, r2, #6
 8002b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_isatty>:

int _isatty(int file)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	@ (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	@ (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f005 f82a 	bl	8007c4c <__errno>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	425b      	negs	r3, r3
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	18d2      	adds	r2, r2, r3
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <_sbrk+0x64>)
 8002c14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b006      	add	sp, #24
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20002000 	.word	0x20002000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	20000314 	.word	0x20000314
 8002c2c:	20000708 	.word	0x20000708

08002c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c42:	4a24      	ldr	r2, [pc, #144]	@ (8002cd4 <MX_USART1_UART_Init+0x98>)
 8002c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c48:	22e1      	movs	r2, #225	@ 0xe1
 8002c4a:	0252      	lsls	r2, r2, #9
 8002c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c72:	4b17      	ldr	r3, [pc, #92]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c78:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f003 fcd6 	bl	8006638 <HAL_UART_Init>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c90:	f7ff fe44 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002c96:	2100      	movs	r1, #0
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f004 f8fb 	bl	8006e94 <HAL_UARTEx_SetTxFifoThreshold>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ca2:	f7ff fe3b 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2100      	movs	r1, #0
 8002caa:	0018      	movs	r0, r3
 8002cac:	f004 f932 	bl	8006f14 <HAL_UARTEx_SetRxFifoThreshold>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002cb4:	f7ff fe32 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <MX_USART1_UART_Init+0x94>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f004 f8b0 	bl	8006e20 <HAL_UARTEx_DisableFifoMode>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002cc4:	f7ff fe2a 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cc8:	46c0      	nop			@ (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	20000318 	.word	0x20000318
 8002cd4:	40013800 	.word	0x40013800

08002cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b091      	sub	sp, #68	@ 0x44
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	232c      	movs	r3, #44	@ 0x2c
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	2314      	movs	r3, #20
 8002ce8:	001a      	movs	r2, r3
 8002cea:	2100      	movs	r1, #0
 8002cec:	f004 ff54 	bl	8007b98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf0:	2414      	movs	r4, #20
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	2318      	movs	r3, #24
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f004 ff4c 	bl	8007b98 <memset>
  if(uartHandle->Instance==USART1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a23      	ldr	r2, [pc, #140]	@ (8002d94 <HAL_UART_MspInit+0xbc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d13f      	bne.n	8002d8a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f002 fc47 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d22:	f7ff fdfb 	bl	800291c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d26:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <HAL_UART_MspInit+0xc0>)
 8002d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <HAL_UART_MspInit+0xc0>)
 8002d2c:	2180      	movs	r1, #128	@ 0x80
 8002d2e:	01c9      	lsls	r1, r1, #7
 8002d30:	430a      	orrs	r2, r1
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d34:	4b18      	ldr	r3, [pc, #96]	@ (8002d98 <HAL_UART_MspInit+0xc0>)
 8002d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	01db      	lsls	r3, r3, #7
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_UART_MspInit+0xc0>)
 8002d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <HAL_UART_MspInit+0xc0>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_UART_MspInit+0xc0>)
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d5a:	212c      	movs	r1, #44	@ 0x2c
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	22c0      	movs	r2, #192	@ 0xc0
 8002d60:	00d2      	lsls	r2, r2, #3
 8002d62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	2202      	movs	r2, #2
 8002d68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2201      	movs	r2, #1
 8002d7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	187a      	adds	r2, r7, r1
 8002d7e:	23a0      	movs	r3, #160	@ 0xa0
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f001 f883 	bl	8003e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b011      	add	sp, #68	@ 0x44
 8002d90:	bd90      	pop	{r4, r7, pc}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40021000 	.word	0x40021000

08002d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d9c:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002da0:	f7ff ff46 	bl	8002c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	@ (8002ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <LoopForever+0xe>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002de8 <LoopForever+0x16>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dca:	f004 ff45 	bl	8007c58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002dce:	f7ff fccd 	bl	800276c <main>

08002dd2 <LoopForever>:

LoopForever:
  b LoopForever
 8002dd2:	e7fe      	b.n	8002dd2 <LoopForever>
  ldr   r0, =_estack
 8002dd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002de0:	0800b078 	.word	0x0800b078
  ldr r2, =_sbss
 8002de4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002de8:	20000704 	.word	0x20000704

08002dec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_IRQHandler>

08002dee <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af04      	add	r7, sp, #16
 8002dfe:	0002      	movs	r2, r0
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e04:	4808      	ldr	r0, [pc, #32]	@ (8002e28 <ssd1306_WriteCommand+0x30>)
 8002e06:	2301      	movs	r3, #1
 8002e08:	425b      	negs	r3, r3
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2301      	movs	r3, #1
 8002e16:	2200      	movs	r2, #0
 8002e18:	2178      	movs	r1, #120	@ 0x78
 8002e1a:	f001 fa61 	bl	80042e0 <HAL_I2C_Mem_Write>
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	20000254 	.word	0x20000254

08002e2c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af04      	add	r7, sp, #16
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4808      	ldr	r0, [pc, #32]	@ (8002e5c <ssd1306_WriteData+0x30>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4252      	negs	r2, r2
 8002e40:	9202      	str	r2, [sp, #8]
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2301      	movs	r3, #1
 8002e4a:	2240      	movs	r2, #64	@ 0x40
 8002e4c:	2178      	movs	r1, #120	@ 0x78
 8002e4e:	f001 fa47 	bl	80042e0 <HAL_I2C_Mem_Write>
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	20000254 	.word	0x20000254

08002e60 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002e64:	f7ff ffc3 	bl	8002dee <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002e68:	2064      	movs	r0, #100	@ 0x64
 8002e6a:	f000 fabb 	bl	80033e4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f000 fa0c 	bl	800328c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e74:	2020      	movs	r0, #32
 8002e76:	f7ff ffbf 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7ff ffbc 	bl	8002df8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e80:	20b0      	movs	r0, #176	@ 0xb0
 8002e82:	f7ff ffb9 	bl	8002df8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e86:	20c8      	movs	r0, #200	@ 0xc8
 8002e88:	f7ff ffb6 	bl	8002df8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7ff ffb3 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e92:	2010      	movs	r0, #16
 8002e94:	f7ff ffb0 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e98:	2040      	movs	r0, #64	@ 0x40
 8002e9a:	f7ff ffad 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e9e:	20ff      	movs	r0, #255	@ 0xff
 8002ea0:	f000 f9dc 	bl	800325c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ea4:	20a1      	movs	r0, #161	@ 0xa1
 8002ea6:	f7ff ffa7 	bl	8002df8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002eaa:	20a6      	movs	r0, #166	@ 0xa6
 8002eac:	f7ff ffa4 	bl	8002df8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002eb0:	20a8      	movs	r0, #168	@ 0xa8
 8002eb2:	f7ff ffa1 	bl	8002df8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002eb6:	201f      	movs	r0, #31
 8002eb8:	f7ff ff9e 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ebc:	20a4      	movs	r0, #164	@ 0xa4
 8002ebe:	f7ff ff9b 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002ec2:	20d3      	movs	r0, #211	@ 0xd3
 8002ec4:	f7ff ff98 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7ff ff95 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002ece:	20d5      	movs	r0, #213	@ 0xd5
 8002ed0:	f7ff ff92 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002ed4:	20f0      	movs	r0, #240	@ 0xf0
 8002ed6:	f7ff ff8f 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002eda:	20d9      	movs	r0, #217	@ 0xd9
 8002edc:	f7ff ff8c 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002ee0:	2022      	movs	r0, #34	@ 0x22
 8002ee2:	f7ff ff89 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002ee6:	20da      	movs	r0, #218	@ 0xda
 8002ee8:	f7ff ff86 	bl	8002df8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002eec:	2002      	movs	r0, #2
 8002eee:	f7ff ff83 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002ef2:	20db      	movs	r0, #219	@ 0xdb
 8002ef4:	f7ff ff80 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002ef8:	2020      	movs	r0, #32
 8002efa:	f7ff ff7d 	bl	8002df8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002efe:	208d      	movs	r0, #141	@ 0x8d
 8002f00:	f7ff ff7a 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f04:	2014      	movs	r0, #20
 8002f06:	f7ff ff77 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f000 f9be 	bl	800328c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 f811 	bl	8002f38 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002f16:	f000 f829 	bl	8002f6c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <ssd1306_Init+0xd4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002f20:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <ssd1306_Init+0xd4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002f26:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <ssd1306_Init+0xd4>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	711a      	strb	r2, [r3, #4]
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	200005ac 	.word	0x200005ac

08002f38 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	0002      	movs	r2, r0
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <ssd1306_Fill+0x18>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <ssd1306_Fill+0x1a>
 8002f50:	23ff      	movs	r3, #255	@ 0xff
 8002f52:	2280      	movs	r2, #128	@ 0x80
 8002f54:	0092      	lsls	r2, r2, #2
 8002f56:	4804      	ldr	r0, [pc, #16]	@ (8002f68 <ssd1306_Fill+0x30>)
 8002f58:	0019      	movs	r1, r3
 8002f5a:	f004 fe1d 	bl	8007b98 <memset>
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	200003ac 	.word	0x200003ac

08002f6c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f72:	1dfb      	adds	r3, r7, #7
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e01a      	b.n	8002fb0 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	3b50      	subs	r3, #80	@ 0x50
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff ff38 	bl	8002df8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff ff35 	bl	8002df8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f8e:	2010      	movs	r0, #16
 8002f90:	f7ff ff32 	bl	8002df8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	01da      	lsls	r2, r3, #7
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc4 <ssd1306_UpdateScreen+0x58>)
 8002f9c:	18d3      	adds	r3, r2, r3
 8002f9e:	2180      	movs	r1, #128	@ 0x80
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff ff43 	bl	8002e2c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	3201      	adds	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d9e0      	bls.n	8002f7a <ssd1306_UpdateScreen+0xe>
    }
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	200003ac 	.word	0x200003ac

08002fc8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	0004      	movs	r4, r0
 8002fd0:	0008      	movs	r0, r1
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	1dfb      	adds	r3, r7, #7
 8002fd6:	1c22      	adds	r2, r4, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	1dbb      	adds	r3, r7, #6
 8002fdc:	1c02      	adds	r2, r0, #0
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	1d7b      	adds	r3, r7, #5
 8002fe2:	1c0a      	adds	r2, r1, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002fe6:	1dfb      	adds	r3, r7, #7
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	db47      	blt.n	8003080 <ssd1306_DrawPixel+0xb8>
 8002ff0:	1dbb      	adds	r3, r7, #6
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b1f      	cmp	r3, #31
 8002ff6:	d843      	bhi.n	8003080 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002ff8:	1d7b      	adds	r3, r7, #5
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d11e      	bne.n	800303e <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	1dbb      	adds	r3, r7, #6
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	08db      	lsrs	r3, r3, #3
 800300a:	b2d8      	uxtb	r0, r3
 800300c:	0003      	movs	r3, r0
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <ssd1306_DrawPixel+0xc0>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	b25a      	sxtb	r2, r3
 8003018:	1dbb      	adds	r3, r7, #6
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2107      	movs	r1, #7
 800301e:	400b      	ands	r3, r1
 8003020:	2101      	movs	r1, #1
 8003022:	4099      	lsls	r1, r3
 8003024:	000b      	movs	r3, r1
 8003026:	b25b      	sxtb	r3, r3
 8003028:	4313      	orrs	r3, r2
 800302a:	b259      	sxtb	r1, r3
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	0003      	movs	r3, r0
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	18d3      	adds	r3, r2, r3
 8003036:	b2c9      	uxtb	r1, r1
 8003038:	4a13      	ldr	r2, [pc, #76]	@ (8003088 <ssd1306_DrawPixel+0xc0>)
 800303a:	54d1      	strb	r1, [r2, r3]
 800303c:	e021      	b.n	8003082 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	1dbb      	adds	r3, r7, #6
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	08db      	lsrs	r3, r3, #3
 8003048:	b2d8      	uxtb	r0, r3
 800304a:	0003      	movs	r3, r0
 800304c:	01db      	lsls	r3, r3, #7
 800304e:	18d3      	adds	r3, r2, r3
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <ssd1306_DrawPixel+0xc0>)
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	b25b      	sxtb	r3, r3
 8003056:	1dba      	adds	r2, r7, #6
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	2107      	movs	r1, #7
 800305c:	400a      	ands	r2, r1
 800305e:	2101      	movs	r1, #1
 8003060:	4091      	lsls	r1, r2
 8003062:	000a      	movs	r2, r1
 8003064:	b252      	sxtb	r2, r2
 8003066:	43d2      	mvns	r2, r2
 8003068:	b252      	sxtb	r2, r2
 800306a:	4013      	ands	r3, r2
 800306c:	b259      	sxtb	r1, r3
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	0003      	movs	r3, r0
 8003074:	01db      	lsls	r3, r3, #7
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	b2c9      	uxtb	r1, r1
 800307a:	4a03      	ldr	r2, [pc, #12]	@ (8003088 <ssd1306_DrawPixel+0xc0>)
 800307c:	54d1      	strb	r1, [r2, r3]
 800307e:	e000      	b.n	8003082 <ssd1306_DrawPixel+0xba>
        return;
 8003080:	46c0      	nop			@ (mov r8, r8)
    }
}
 8003082:	46bd      	mov	sp, r7
 8003084:	b003      	add	sp, #12
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	200003ac 	.word	0x200003ac

0800308c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b089      	sub	sp, #36	@ 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	0004      	movs	r4, r0
 8003094:	0038      	movs	r0, r7
 8003096:	6001      	str	r1, [r0, #0]
 8003098:	6042      	str	r2, [r0, #4]
 800309a:	6083      	str	r3, [r0, #8]
 800309c:	210f      	movs	r1, #15
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	1c22      	adds	r2, r4, #0
 80030a2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80030a4:	000a      	movs	r2, r1
 80030a6:	18bb      	adds	r3, r7, r2
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b1f      	cmp	r3, #31
 80030ac:	d903      	bls.n	80030b6 <ssd1306_WriteChar+0x2a>
 80030ae:	18bb      	adds	r3, r7, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b7e      	cmp	r3, #126	@ 0x7e
 80030b4:	d901      	bls.n	80030ba <ssd1306_WriteChar+0x2e>
        return 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e084      	b.n	80031c4 <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80030ba:	4b44      	ldr	r3, [pc, #272]	@ (80031cc <ssd1306_WriteChar+0x140>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	001a      	movs	r2, r3
 80030c0:	003b      	movs	r3, r7
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	2b80      	cmp	r3, #128	@ 0x80
 80030c8:	dc07      	bgt.n	80030da <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80030ca:	4b40      	ldr	r3, [pc, #256]	@ (80031cc <ssd1306_WriteChar+0x140>)
 80030cc:	885b      	ldrh	r3, [r3, #2]
 80030ce:	001a      	movs	r2, r3
 80030d0:	003b      	movs	r3, r7
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	dd01      	ble.n	80030de <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	e072      	b.n	80031c4 <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e051      	b.n	8003188 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80030e4:	003b      	movs	r3, r7
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	3b20      	subs	r3, #32
 80030f0:	0039      	movs	r1, r7
 80030f2:	7849      	ldrb	r1, [r1, #1]
 80030f4:	434b      	muls	r3, r1
 80030f6:	0019      	movs	r1, r3
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	18cb      	adds	r3, r1, r3
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	18d3      	adds	r3, r2, r3
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	e035      	b.n	8003176 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	409a      	lsls	r2, r3
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	4013      	ands	r3, r2
 8003116:	d014      	beq.n	8003142 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003118:	4b2c      	ldr	r3, [pc, #176]	@ (80031cc <ssd1306_WriteChar+0x140>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	18d3      	adds	r3, r2, r3
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <ssd1306_WriteChar+0x140>)
 8003128:	885b      	ldrh	r3, [r3, #2]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	b2d9      	uxtb	r1, r3
 8003134:	2330      	movs	r3, #48	@ 0x30
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	001a      	movs	r2, r3
 800313c:	f7ff ff44 	bl	8002fc8 <ssd1306_DrawPixel>
 8003140:	e016      	b.n	8003170 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003142:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <ssd1306_WriteChar+0x140>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	b2d8      	uxtb	r0, r3
 8003150:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <ssd1306_WriteChar+0x140>)
 8003152:	885b      	ldrh	r3, [r3, #2]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	b2d9      	uxtb	r1, r3
 800315e:	2330      	movs	r3, #48	@ 0x30
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	425a      	negs	r2, r3
 8003166:	4153      	adcs	r3, r2
 8003168:	b2db      	uxtb	r3, r3
 800316a:	001a      	movs	r2, r3
 800316c:	f7ff ff2c 	bl	8002fc8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	3301      	adds	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	003b      	movs	r3, r7
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	001a      	movs	r2, r3
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	4293      	cmp	r3, r2
 8003180:	d3c3      	bcc.n	800310a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3301      	adds	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	003b      	movs	r3, r7
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	001a      	movs	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4293      	cmp	r3, r2
 8003192:	d3a7      	bcc.n	80030e4 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003194:	4b0d      	ldr	r3, [pc, #52]	@ (80031cc <ssd1306_WriteChar+0x140>)
 8003196:	881a      	ldrh	r2, [r3, #0]
 8003198:	003b      	movs	r3, r7
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <ssd1306_WriteChar+0x126>
 80031a0:	003b      	movs	r3, r7
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	3b20      	subs	r3, #32
 80031ac:	18cb      	adds	r3, r1, r3
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	e001      	b.n	80031b6 <ssd1306_WriteChar+0x12a>
 80031b2:	003b      	movs	r3, r7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <ssd1306_WriteChar+0x140>)
 80031bc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80031be:	230f      	movs	r3, #15
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	781b      	ldrb	r3, [r3, #0]
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b009      	add	sp, #36	@ 0x24
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	200005ac 	.word	0x200005ac

080031d0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	0038      	movs	r0, r7
 80031da:	6001      	str	r1, [r0, #0]
 80031dc:	6042      	str	r2, [r0, #4]
 80031de:	6083      	str	r3, [r0, #8]
    while (*str) {
 80031e0:	e017      	b.n	8003212 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	7818      	ldrb	r0, [r3, #0]
 80031e6:	003b      	movs	r3, r7
 80031e8:	2218      	movs	r2, #24
 80031ea:	18ba      	adds	r2, r7, r2
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	9200      	str	r2, [sp, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f7ff ff49 	bl	800308c <ssd1306_WriteChar>
 80031fa:	0003      	movs	r3, r0
 80031fc:	001a      	movs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d002      	beq.n	800320c <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	e008      	b.n	800321e <ssd1306_WriteString+0x4e>
        }
        str++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e3      	bne.n	80031e2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	781b      	ldrb	r3, [r3, #0]
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	0002      	movs	r2, r0
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	1c0a      	adds	r2, r1, #0
 8003238:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <ssd1306_SetCursor+0x30>)
 8003242:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003244:	1dbb      	adds	r3, r7, #6
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b29a      	uxth	r2, r3
 800324a:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <ssd1306_SetCursor+0x30>)
 800324c:	805a      	strh	r2, [r3, #2]
}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	200005ac 	.word	0x200005ac

0800325c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	0002      	movs	r2, r0
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003268:	210f      	movs	r1, #15
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2281      	movs	r2, #129	@ 0x81
 800326e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003270:	187b      	adds	r3, r7, r1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fdbf 	bl	8002df8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff fdba 	bl	8002df8 <ssd1306_WriteCommand>
}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}

0800328c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	0002      	movs	r2, r0
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80032a0:	230f      	movs	r3, #15
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	22af      	movs	r2, #175	@ 0xaf
 80032a6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <ssd1306_SetDisplayOn+0x48>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	715a      	strb	r2, [r3, #5]
 80032ae:	e006      	b.n	80032be <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	22ae      	movs	r2, #174	@ 0xae
 80032b6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <ssd1306_SetDisplayOn+0x48>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80032be:	230f      	movs	r3, #15
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fd97 	bl	8002df8 <ssd1306_WriteCommand>
}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	200005ac 	.word	0x200005ac

080032d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_Init+0x3c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_Init+0x3c>)
 80032ea:	2180      	movs	r1, #128	@ 0x80
 80032ec:	0049      	lsls	r1, r1, #1
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032f2:	2003      	movs	r0, #3
 80032f4:	f000 f810 	bl	8003318 <HAL_InitTick>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d003      	beq.n	8003304 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e001      	b.n	8003308 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003304:	f7ff fb98 	bl	8002a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	781b      	ldrb	r3, [r3, #0]
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40022000 	.word	0x40022000

08003318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003320:	230f      	movs	r3, #15
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_InitTick+0x88>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02b      	beq.n	8003388 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003330:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <HAL_InitTick+0x8c>)
 8003332:	681c      	ldr	r4, [r3, #0]
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_InitTick+0x88>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	0019      	movs	r1, r3
 800333a:	23fa      	movs	r3, #250	@ 0xfa
 800333c:	0098      	lsls	r0, r3, #2
 800333e:	f7fc fefb 	bl	8000138 <__udivsi3>
 8003342:	0003      	movs	r3, r0
 8003344:	0019      	movs	r1, r3
 8003346:	0020      	movs	r0, r4
 8003348:	f7fc fef6 	bl	8000138 <__udivsi3>
 800334c:	0003      	movs	r3, r0
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fd91 	bl	8003e76 <HAL_SYSTICK_Config>
 8003354:	1e03      	subs	r3, r0, #0
 8003356:	d112      	bne.n	800337e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d80a      	bhi.n	8003374 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	2301      	movs	r3, #1
 8003362:	425b      	negs	r3, r3
 8003364:	2200      	movs	r2, #0
 8003366:	0018      	movs	r0, r3
 8003368:	f000 fd70 	bl	8003e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800336c:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <HAL_InitTick+0x90>)
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e00d      	b.n	8003390 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003374:	230f      	movs	r3, #15
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	e008      	b.n	8003390 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e003      	b.n	8003390 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003390:	230f      	movs	r3, #15
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	781b      	ldrb	r3, [r3, #0]
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b005      	add	sp, #20
 800339c:	bd90      	pop	{r4, r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	20000008 	.word	0x20000008
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_IncTick+0x1c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	001a      	movs	r2, r3
 80033b6:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <HAL_IncTick+0x20>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	18d2      	adds	r2, r2, r3
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_IncTick+0x20>)
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	20000008 	.word	0x20000008
 80033cc:	200005b4 	.word	0x200005b4

080033d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b02      	ldr	r3, [pc, #8]	@ (80033e0 <HAL_GetTick+0x10>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	200005b4 	.word	0x200005b4

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_Delay+0x44>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	001a      	movs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	189b      	adds	r3, r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	f7ff ffe0 	bl	80033d0 <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f7      	bhi.n	800340c <HAL_Delay+0x28>
  {
  }
}
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	20000008 	.word	0x20000008

0800342c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a05      	ldr	r2, [pc, #20]	@ (8003450 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800343c:	401a      	ands	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	fe3fffff 	.word	0xfe3fffff

08003454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	23e0      	movs	r3, #224	@ 0xe0
 8003462:	045b      	lsls	r3, r3, #17
 8003464:	4013      	ands	r3, r2
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}

0800346e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	2104      	movs	r1, #4
 8003482:	400a      	ands	r2, r1
 8003484:	2107      	movs	r1, #7
 8003486:	4091      	lsls	r1, r2
 8003488:	000a      	movs	r2, r1
 800348a:	43d2      	mvns	r2, r2
 800348c:	401a      	ands	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2104      	movs	r1, #4
 8003492:	400b      	ands	r3, r1
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4099      	lsls	r1, r3
 8003498:	000b      	movs	r3, r1
 800349a:	431a      	orrs	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	2104      	movs	r1, #4
 80034ba:	400a      	ands	r2, r1
 80034bc:	2107      	movs	r1, #7
 80034be:	4091      	lsls	r1, r2
 80034c0:	000a      	movs	r2, r1
 80034c2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2104      	movs	r1, #4
 80034c8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80034ca:	40da      	lsrs	r2, r3
 80034cc:	0013      	movs	r3, r2
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b002      	add	sp, #8
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	211f      	movs	r1, #31
 80034ea:	400a      	ands	r2, r1
 80034ec:	210f      	movs	r1, #15
 80034ee:	4091      	lsls	r1, r2
 80034f0:	000a      	movs	r2, r1
 80034f2:	43d2      	mvns	r2, r2
 80034f4:	401a      	ands	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	210f      	movs	r1, #15
 80034fc:	4019      	ands	r1, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	201f      	movs	r0, #31
 8003502:	4003      	ands	r3, r0
 8003504:	4099      	lsls	r1, r3
 8003506:	000b      	movs	r3, r1
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}

08003516 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	035b      	lsls	r3, r3, #13
 8003528:	0b5b      	lsrs	r3, r3, #13
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	0352      	lsls	r2, r2, #13
 800354a:	0b52      	lsrs	r2, r2, #13
 800354c:	43d2      	mvns	r2, r2
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	0212      	lsls	r2, r2, #8
 8003570:	43d2      	mvns	r2, r2
 8003572:	401a      	ands	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	400b      	ands	r3, r1
 800357c:	4904      	ldr	r1, [pc, #16]	@ (8003590 <LL_ADC_SetChannelSamplingTime+0x34>)
 800357e:	400b      	ands	r3, r1
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	07ffff00 	.word	0x07ffff00

08003594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a05      	ldr	r2, [pc, #20]	@ (80035b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	0552      	lsls	r2, r2, #21
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	6fffffe8 	.word	0x6fffffe8

080035bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	055b      	lsls	r3, r3, #21
 80035cc:	401a      	ands	r2, r3
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	055b      	lsls	r3, r3, #21
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d101      	bne.n	80035da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <LL_ADC_IsEnabled+0x18>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <LL_ADC_IsEnabled+0x1a>
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}

08003606 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2204      	movs	r2, #4
 8003614:	4013      	ands	r3, r2
 8003616:	2b04      	cmp	r3, #4
 8003618:	d101      	bne.n	800361e <LL_ADC_REG_IsConversionOngoing+0x18>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800361e:	2300      	movs	r3, #0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003630:	231f      	movs	r3, #31
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e17f      	b.n	800394e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f7fe ff31 	bl	80024c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2254      	movs	r2, #84	@ 0x54
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff ffa3 	bl	80035bc <LL_ADC_IsInternalRegulatorEnabled>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d115      	bne.n	80036a6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff ff88 	bl	8003594 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003684:	4bb4      	ldr	r3, [pc, #720]	@ (8003958 <HAL_ADC_Init+0x330>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	49b4      	ldr	r1, [pc, #720]	@ (800395c <HAL_ADC_Init+0x334>)
 800368a:	0018      	movs	r0, r3
 800368c:	f7fc fd54 	bl	8000138 <__udivsi3>
 8003690:	0003      	movs	r3, r0
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003698:	e002      	b.n	80036a0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7ff ff86 	bl	80035bc <LL_ADC_IsInternalRegulatorEnabled>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d10f      	bne.n	80036d4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b8:	2210      	movs	r2, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	2201      	movs	r2, #1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036cc:	231f      	movs	r3, #31
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0018      	movs	r0, r3
 80036da:	f7ff ff94 	bl	8003606 <LL_ADC_REG_IsConversionOngoing>
 80036de:	0003      	movs	r3, r0
 80036e0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	2210      	movs	r2, #16
 80036e8:	4013      	ands	r3, r2
 80036ea:	d000      	beq.n	80036ee <HAL_ADC_Init+0xc6>
 80036ec:	e122      	b.n	8003934 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d000      	beq.n	80036f6 <HAL_ADC_Init+0xce>
 80036f4:	e11e      	b.n	8003934 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	4a99      	ldr	r2, [pc, #612]	@ (8003960 <HAL_ADC_Init+0x338>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	2202      	movs	r2, #2
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ff6a 	bl	80035e4 <LL_ADC_IsEnabled>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d000      	beq.n	8003716 <HAL_ADC_Init+0xee>
 8003714:	e0ad      	b.n	8003872 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7e1b      	ldrb	r3, [r3, #24]
 800371e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003720:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7e5b      	ldrb	r3, [r3, #25]
 8003726:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003728:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7e9b      	ldrb	r3, [r3, #26]
 800372e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003730:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_ADC_Init+0x118>
 800373a:	2380      	movs	r3, #128	@ 0x80
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	e000      	b.n	8003742 <HAL_ADC_Init+0x11a>
 8003740:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003742:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003748:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da04      	bge.n	800375c <HAL_ADC_Init+0x134>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	e001      	b.n	8003760 <HAL_ADC_Init+0x138>
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003760:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	212c      	movs	r1, #44	@ 0x2c
 8003766:	5c5b      	ldrb	r3, [r3, r1]
 8003768:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800376a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	5c9b      	ldrb	r3, [r3, r2]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d115      	bne.n	80037a8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7e9b      	ldrb	r3, [r3, #26]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	0252      	lsls	r2, r2, #9
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e00b      	b.n	80037a8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	2220      	movs	r2, #32
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	2201      	movs	r2, #1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b4:	23e0      	movs	r3, #224	@ 0xe0
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037be:	4313      	orrs	r3, r2
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a65      	ldr	r2, [pc, #404]	@ (8003964 <HAL_ADC_Init+0x33c>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	430a      	orrs	r2, r1
 80037da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	0f9b      	lsrs	r3, r3, #30
 80037e2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037e8:	4313      	orrs	r3, r2
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223c      	movs	r2, #60	@ 0x3c
 80037f4:	5c9b      	ldrb	r3, [r3, r2]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d111      	bne.n	800381e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0f9b      	lsrs	r3, r3, #30
 8003800:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003806:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800380c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003812:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	2201      	movs	r2, #1
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4a50      	ldr	r2, [pc, #320]	@ (8003968 <HAL_ADC_Init+0x340>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	430a      	orrs	r2, r1
 8003832:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	23c0      	movs	r3, #192	@ 0xc0
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	429a      	cmp	r2, r3
 800383e:	d018      	beq.n	8003872 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	05db      	lsls	r3, r3, #23
 8003848:	429a      	cmp	r2, r3
 800384a:	d012      	beq.n	8003872 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003850:	2380      	movs	r3, #128	@ 0x80
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	429a      	cmp	r2, r3
 8003856:	d00c      	beq.n	8003872 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003858:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_ADC_Init+0x344>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a44      	ldr	r2, [pc, #272]	@ (8003970 <HAL_ADC_Init+0x348>)
 800385e:	4013      	ands	r3, r2
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	23f0      	movs	r3, #240	@ 0xf0
 8003868:	039b      	lsls	r3, r3, #14
 800386a:	401a      	ands	r2, r3
 800386c:	4b3f      	ldr	r3, [pc, #252]	@ (800396c <HAL_ADC_Init+0x344>)
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	001a      	movs	r2, r3
 800387c:	2100      	movs	r1, #0
 800387e:	f7ff fdf6 	bl	800346e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	493a      	ldr	r1, [pc, #232]	@ (8003974 <HAL_ADC_Init+0x34c>)
 800388c:	001a      	movs	r2, r3
 800388e:	f7ff fdee 	bl	800346e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2110      	movs	r1, #16
 80038a6:	4249      	negs	r1, r1
 80038a8:	430a      	orrs	r2, r1
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ac:	e018      	b.n	80038e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	039b      	lsls	r3, r3, #14
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d112      	bne.n	80038e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	221c      	movs	r2, #28
 80038ca:	4013      	ands	r3, r2
 80038cc:	2210      	movs	r2, #16
 80038ce:	4252      	negs	r2, r2
 80038d0:	409a      	lsls	r2, r3
 80038d2:	0011      	movs	r1, r2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2100      	movs	r1, #0
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff fdde 	bl	80034a8 <LL_ADC_GetSamplingTimeCommonChannels>
 80038ec:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d10b      	bne.n	800390e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	2203      	movs	r2, #3
 8003902:	4393      	bics	r3, r2
 8003904:	2201      	movs	r2, #1
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800390c:	e01c      	b.n	8003948 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	2212      	movs	r2, #18
 8003914:	4393      	bics	r3, r2
 8003916:	2210      	movs	r2, #16
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	2201      	movs	r2, #1
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800392a:	231f      	movs	r3, #31
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003932:	e009      	b.n	8003948 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	2210      	movs	r2, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003940:	231f      	movs	r3, #31
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	781b      	ldrb	r3, [r3, #0]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b008      	add	sp, #32
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	20000000 	.word	0x20000000
 800395c:	00030d40 	.word	0x00030d40
 8003960:	fffffefd 	.word	0xfffffefd
 8003964:	ffde0201 	.word	0xffde0201
 8003968:	1ffffc02 	.word	0x1ffffc02
 800396c:	40012708 	.word	0x40012708
 8003970:	ffc3ffff 	.word	0xffc3ffff
 8003974:	07ffff04 	.word	0x07ffff04

08003978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003982:	2317      	movs	r3, #23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2254      	movs	r2, #84	@ 0x54
 8003992:	5c9b      	ldrb	r3, [r3, r2]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x24>
 8003998:	2302      	movs	r3, #2
 800399a:	e1c0      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x3a6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2254      	movs	r2, #84	@ 0x54
 80039a0:	2101      	movs	r1, #1
 80039a2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7ff fe2c 	bl	8003606 <LL_ADC_REG_IsConversionOngoing>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d000      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x3c>
 80039b2:	e1a3      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d100      	bne.n	80039be <HAL_ADC_ConfigChannel+0x46>
 80039bc:	e143      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	2380      	movs	r3, #128	@ 0x80
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d004      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039ce:	4ac1      	ldr	r2, [pc, #772]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x35c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d108      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0019      	movs	r1, r3
 80039de:	0010      	movs	r0, r2
 80039e0:	f7ff fd99 	bl	8003516 <LL_ADC_REG_SetSequencerChAdd>
 80039e4:	e0c9      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	211f      	movs	r1, #31
 80039f0:	400b      	ands	r3, r1
 80039f2:	210f      	movs	r1, #15
 80039f4:	4099      	lsls	r1, r3
 80039f6:	000b      	movs	r3, r1
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	035b      	lsls	r3, r3, #13
 8003a04:	0b5b      	lsrs	r3, r3, #13
 8003a06:	d105      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x9c>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	221f      	movs	r2, #31
 8003a10:	4013      	ands	r3, r2
 8003a12:	e098      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d000      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0xa8>
 8003a1e:	e091      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x1cc>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2202      	movs	r2, #2
 8003a26:	4013      	ands	r3, r2
 8003a28:	d000      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0xb4>
 8003a2a:	e089      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x1c8>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2204      	movs	r2, #4
 8003a32:	4013      	ands	r3, r2
 8003a34:	d000      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0xc0>
 8003a36:	e081      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x1c4>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d000      	beq.n	8003a44 <HAL_ADC_ConfigChannel+0xcc>
 8003a42:	e079      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x1c0>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d000      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0xd8>
 8003a4e:	e071      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x1bc>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2220      	movs	r2, #32
 8003a56:	4013      	ands	r3, r2
 8003a58:	d000      	beq.n	8003a5c <HAL_ADC_ConfigChannel+0xe4>
 8003a5a:	e069      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x1b8>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2240      	movs	r2, #64	@ 0x40
 8003a62:	4013      	ands	r3, r2
 8003a64:	d000      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0xf0>
 8003a66:	e061      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x1b4>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d000      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0xfc>
 8003a72:	e059      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1b0>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d151      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x1ac>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d149      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x1a8>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4013      	ands	r3, r2
 8003a96:	d141      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x1a4>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d139      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1a0>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	015b      	lsls	r3, r3, #5
 8003aac:	4013      	ands	r3, r2
 8003aae:	d131      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x19c>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	019b      	lsls	r3, r3, #6
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d129      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x198>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	01db      	lsls	r3, r3, #7
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d121      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x194>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d119      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x190>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	025b      	lsls	r3, r3, #9
 8003adc:	4013      	ands	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x18c>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	@ 0x80
 8003ae6:	029b      	lsls	r3, r3, #10
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d109      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x188>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	02db      	lsls	r3, r3, #11
 8003af4:	4013      	ands	r3, r2
 8003af6:	d001      	beq.n	8003afc <HAL_ADC_ConfigChannel+0x184>
 8003af8:	2312      	movs	r3, #18
 8003afa:	e024      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003afc:	2300      	movs	r3, #0
 8003afe:	e022      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b00:	2311      	movs	r3, #17
 8003b02:	e020      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b04:	2310      	movs	r3, #16
 8003b06:	e01e      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b08:	230f      	movs	r3, #15
 8003b0a:	e01c      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b0c:	230e      	movs	r3, #14
 8003b0e:	e01a      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b10:	230d      	movs	r3, #13
 8003b12:	e018      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b14:	230c      	movs	r3, #12
 8003b16:	e016      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b18:	230b      	movs	r3, #11
 8003b1a:	e014      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b1c:	230a      	movs	r3, #10
 8003b1e:	e012      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b20:	2309      	movs	r3, #9
 8003b22:	e010      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b24:	2308      	movs	r3, #8
 8003b26:	e00e      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b28:	2307      	movs	r3, #7
 8003b2a:	e00c      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b2c:	2306      	movs	r3, #6
 8003b2e:	e00a      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b30:	2305      	movs	r3, #5
 8003b32:	e008      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b34:	2304      	movs	r3, #4
 8003b36:	e006      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e004      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e002      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1ce>
 8003b44:	2300      	movs	r3, #0
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	6852      	ldr	r2, [r2, #4]
 8003b4a:	201f      	movs	r0, #31
 8003b4c:	4002      	ands	r2, r0
 8003b4e:	4093      	lsls	r3, r2
 8003b50:	000a      	movs	r2, r1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d808      	bhi.n	8003b7a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	001a      	movs	r2, r3
 8003b76:	f7ff fcae 	bl	80034d6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	001a      	movs	r2, r3
 8003b88:	f7ff fce8 	bl	800355c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db00      	blt.n	8003b96 <HAL_ADC_ConfigChannel+0x21e>
 8003b94:	e0bc      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b96:	4b50      	ldr	r3, [pc, #320]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff fc5b 	bl	8003454 <LL_ADC_GetCommonPathInternalCh>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8003cdc <HAL_ADC_ConfigChannel+0x364>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d122      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bb4:	d11d      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	0412      	lsls	r2, r2, #16
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	4a46      	ldr	r2, [pc, #280]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	0010      	movs	r0, r2
 8003bc4:	f7ff fc32 	bl	800342c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc8:	4b45      	ldr	r3, [pc, #276]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x368>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4945      	ldr	r1, [pc, #276]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x36c>)
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fc fab2 	bl	8000138 <__udivsi3>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	0013      	movs	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	189b      	adds	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003be2:	e002      	b.n	8003bea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f9      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bf0:	e08e      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x370>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10e      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	045b      	lsls	r3, r3, #17
 8003c02:	4013      	ands	r3, r2
 8003c04:	d109      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2280      	movs	r2, #128	@ 0x80
 8003c0a:	0452      	lsls	r2, r2, #17
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003c10:	0019      	movs	r1, r3
 8003c12:	0010      	movs	r0, r2
 8003c14:	f7ff fc0a 	bl	800342c <LL_ADC_SetCommonPathInternalCh>
 8003c18:	e07a      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a33      	ldr	r2, [pc, #204]	@ (8003cec <HAL_ADC_ConfigChannel+0x374>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d000      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0x2ae>
 8003c24:	e074      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	2380      	movs	r3, #128	@ 0x80
 8003c2a:	03db      	lsls	r3, r3, #15
 8003c2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c2e:	d000      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x2ba>
 8003c30:	e06e      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2280      	movs	r2, #128	@ 0x80
 8003c36:	03d2      	lsls	r2, r2, #15
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	0010      	movs	r0, r2
 8003c40:	f7ff fbf4 	bl	800342c <LL_ADC_SetCommonPathInternalCh>
 8003c44:	e064      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	2380      	movs	r3, #128	@ 0x80
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d004      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c56:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x35c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d107      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0019      	movs	r1, r3
 8003c66:	0010      	movs	r0, r2
 8003c68:	f7ff fc66 	bl	8003538 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	da4d      	bge.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c74:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fbec 	bl	8003454 <LL_ADC_GetCommonPathInternalCh>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a15      	ldr	r2, [pc, #84]	@ (8003cdc <HAL_ADC_ConfigChannel+0x364>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d108      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x378>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	4a11      	ldr	r2, [pc, #68]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003c92:	0019      	movs	r1, r3
 8003c94:	0010      	movs	r0, r2
 8003c96:	f7ff fbc9 	bl	800342c <LL_ADC_SetCommonPathInternalCh>
 8003c9a:	e039      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x370>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d108      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x37c>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003cae:	0019      	movs	r1, r3
 8003cb0:	0010      	movs	r0, r2
 8003cb2:	f7ff fbbb 	bl	800342c <LL_ADC_SetCommonPathInternalCh>
 8003cb6:	e02b      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cec <HAL_ADC_ConfigChannel+0x374>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d126      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x380>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	4a03      	ldr	r2, [pc, #12]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x360>)
 8003cca:	0019      	movs	r1, r3
 8003ccc:	0010      	movs	r0, r2
 8003cce:	f7ff fbad 	bl	800342c <LL_ADC_SetCommonPathInternalCh>
 8003cd2:	e01d      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x398>
 8003cd4:	80000004 	.word	0x80000004
 8003cd8:	40012708 	.word	0x40012708
 8003cdc:	b0001000 	.word	0xb0001000
 8003ce0:	20000000 	.word	0x20000000
 8003ce4:	00030d40 	.word	0x00030d40
 8003ce8:	b8004000 	.word	0xb8004000
 8003cec:	b4002000 	.word	0xb4002000
 8003cf0:	ff7fffff 	.word	0xff7fffff
 8003cf4:	feffffff 	.word	0xfeffffff
 8003cf8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d00:	2220      	movs	r2, #32
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d08:	2317      	movs	r3, #23
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2254      	movs	r2, #84	@ 0x54
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003d18:	2317      	movs	r3, #23
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b006      	add	sp, #24
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	0002      	movs	r2, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d3c:	d828      	bhi.n	8003d90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <__NVIC_SetPriority+0xd4>)
 8003d40:	1dfb      	adds	r3, r7, #7
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	33c0      	adds	r3, #192	@ 0xc0
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	589b      	ldr	r3, [r3, r2]
 8003d4e:	1dfa      	adds	r2, r7, #7
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	0011      	movs	r1, r2
 8003d54:	2203      	movs	r2, #3
 8003d56:	400a      	ands	r2, r1
 8003d58:	00d2      	lsls	r2, r2, #3
 8003d5a:	21ff      	movs	r1, #255	@ 0xff
 8003d5c:	4091      	lsls	r1, r2
 8003d5e:	000a      	movs	r2, r1
 8003d60:	43d2      	mvns	r2, r2
 8003d62:	401a      	ands	r2, r3
 8003d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	22ff      	movs	r2, #255	@ 0xff
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	0018      	movs	r0, r3
 8003d74:	2303      	movs	r3, #3
 8003d76:	4003      	ands	r3, r0
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d7c:	481f      	ldr	r0, [pc, #124]	@ (8003dfc <__NVIC_SetPriority+0xd4>)
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	430a      	orrs	r2, r1
 8003d88:	33c0      	adds	r3, #192	@ 0xc0
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d8e:	e031      	b.n	8003df4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d90:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <__NVIC_SetPriority+0xd8>)
 8003d92:	1dfb      	adds	r3, r7, #7
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	0019      	movs	r1, r3
 8003d98:	230f      	movs	r3, #15
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	3b08      	subs	r3, #8
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3306      	adds	r3, #6
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	3304      	adds	r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1dfa      	adds	r2, r7, #7
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	0011      	movs	r1, r2
 8003db0:	2203      	movs	r2, #3
 8003db2:	400a      	ands	r2, r1
 8003db4:	00d2      	lsls	r2, r2, #3
 8003db6:	21ff      	movs	r1, #255	@ 0xff
 8003db8:	4091      	lsls	r1, r2
 8003dba:	000a      	movs	r2, r1
 8003dbc:	43d2      	mvns	r2, r2
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	22ff      	movs	r2, #255	@ 0xff
 8003dc8:	401a      	ands	r2, r3
 8003dca:	1dfb      	adds	r3, r7, #7
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	4003      	ands	r3, r0
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dd8:	4809      	ldr	r0, [pc, #36]	@ (8003e00 <__NVIC_SetPriority+0xd8>)
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	001c      	movs	r4, r3
 8003de0:	230f      	movs	r3, #15
 8003de2:	4023      	ands	r3, r4
 8003de4:	3b08      	subs	r3, #8
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	430a      	orrs	r2, r1
 8003dea:	3306      	adds	r3, #6
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	18c3      	adds	r3, r0, r3
 8003df0:	3304      	adds	r3, #4
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b003      	add	sp, #12
 8003dfa:	bd90      	pop	{r4, r7, pc}
 8003dfc:	e000e100 	.word	0xe000e100
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	045b      	lsls	r3, r3, #17
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d301      	bcc.n	8003e1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e010      	b.n	8003e3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <SysTick_Config+0x44>)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	3a01      	subs	r2, #1
 8003e22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e24:	2301      	movs	r3, #1
 8003e26:	425b      	negs	r3, r3
 8003e28:	2103      	movs	r1, #3
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff ff7c 	bl	8003d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <SysTick_Config+0x44>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e36:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <SysTick_Config+0x44>)
 8003e38:	2207      	movs	r2, #7
 8003e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	e000e010 	.word	0xe000e010

08003e4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	210f      	movs	r1, #15
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	1c02      	adds	r2, r0, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	0011      	movs	r1, r2
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff ff5d 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff ffbf 	bl	8003e04 <SysTick_Config>
 8003e86:	0003      	movs	r3, r0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e9e:	e147      	b.n	8004130 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4091      	lsls	r1, r2
 8003eaa:	000a      	movs	r2, r1
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d100      	bne.n	8003eb8 <HAL_GPIO_Init+0x28>
 8003eb6:	e138      	b.n	800412a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d005      	beq.n	8003ed0 <HAL_GPIO_Init+0x40>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d130      	bne.n	8003f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	2203      	movs	r2, #3
 8003edc:	409a      	lsls	r2, r3
 8003ede:	0013      	movs	r3, r2
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	0013      	movs	r3, r2
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f06:	2201      	movs	r2, #1
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	401a      	ands	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2203      	movs	r2, #3
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d017      	beq.n	8003f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	2203      	movs	r2, #3
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2203      	movs	r2, #3
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d123      	bne.n	8003fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	08da      	lsrs	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3208      	adds	r2, #8
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	58d3      	ldr	r3, [r2, r3]
 8003f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	220f      	movs	r2, #15
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	43da      	mvns	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2107      	movs	r1, #7
 8003fa6:	400b      	ands	r3, r1
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	08da      	lsrs	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3208      	adds	r2, #8
 8003fbc:	0092      	lsls	r2, r2, #2
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	2203      	movs	r2, #3
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	23c0      	movs	r3, #192	@ 0xc0
 8003ffc:	029b      	lsls	r3, r3, #10
 8003ffe:	4013      	ands	r3, r2
 8004000:	d100      	bne.n	8004004 <HAL_GPIO_Init+0x174>
 8004002:	e092      	b.n	800412a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004004:	4a50      	ldr	r2, [pc, #320]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3318      	adds	r3, #24
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	589b      	ldr	r3, [r3, r2]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2203      	movs	r2, #3
 8004016:	4013      	ands	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	220f      	movs	r2, #15
 800401c:	409a      	lsls	r2, r3
 800401e:	0013      	movs	r3, r2
 8004020:	43da      	mvns	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	23a0      	movs	r3, #160	@ 0xa0
 800402c:	05db      	lsls	r3, r3, #23
 800402e:	429a      	cmp	r2, r3
 8004030:	d013      	beq.n	800405a <HAL_GPIO_Init+0x1ca>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a45      	ldr	r2, [pc, #276]	@ (800414c <HAL_GPIO_Init+0x2bc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_Init+0x1c6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a44      	ldr	r2, [pc, #272]	@ (8004150 <HAL_GPIO_Init+0x2c0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_Init+0x1c2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a43      	ldr	r2, [pc, #268]	@ (8004154 <HAL_GPIO_Init+0x2c4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_Init+0x1be>
 800404a:	2303      	movs	r3, #3
 800404c:	e006      	b.n	800405c <HAL_GPIO_Init+0x1cc>
 800404e:	2305      	movs	r3, #5
 8004050:	e004      	b.n	800405c <HAL_GPIO_Init+0x1cc>
 8004052:	2302      	movs	r3, #2
 8004054:	e002      	b.n	800405c <HAL_GPIO_Init+0x1cc>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_GPIO_Init+0x1cc>
 800405a:	2300      	movs	r3, #0
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	2103      	movs	r1, #3
 8004060:	400a      	ands	r2, r1
 8004062:	00d2      	lsls	r2, r2, #3
 8004064:	4093      	lsls	r3, r2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800406c:	4936      	ldr	r1, [pc, #216]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	3318      	adds	r3, #24
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800407a:	4b33      	ldr	r3, [pc, #204]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43da      	mvns	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	2380      	movs	r3, #128	@ 0x80
 8004090:	035b      	lsls	r3, r3, #13
 8004092:	4013      	ands	r3, r2
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800409e:	4b2a      	ldr	r3, [pc, #168]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80040a4:	4b28      	ldr	r3, [pc, #160]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43da      	mvns	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	039b      	lsls	r3, r3, #14
 80040bc:	4013      	ands	r3, r2
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 80040d0:	2384      	movs	r3, #132	@ 0x84
 80040d2:	58d3      	ldr	r3, [r2, r3]
 80040d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43da      	mvns	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	029b      	lsls	r3, r3, #10
 80040e8:	4013      	ands	r3, r2
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040f4:	4914      	ldr	r1, [pc, #80]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 80040f6:	2284      	movs	r2, #132	@ 0x84
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80040fc:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	58d3      	ldr	r3, [r2, r3]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	43da      	mvns	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	4013      	ands	r3, r2
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004122:	4909      	ldr	r1, [pc, #36]	@ (8004148 <HAL_GPIO_Init+0x2b8>)
 8004124:	2280      	movs	r2, #128	@ 0x80
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3301      	adds	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	40da      	lsrs	r2, r3
 8004138:	1e13      	subs	r3, r2, #0
 800413a:	d000      	beq.n	800413e <HAL_GPIO_Init+0x2ae>
 800413c:	e6b0      	b.n	8003ea0 <HAL_GPIO_Init+0x10>
  }
}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b006      	add	sp, #24
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021800 	.word	0x40021800
 800414c:	50000400 	.word	0x50000400
 8004150:	50000800 	.word	0x50000800
 8004154:	50000c00 	.word	0x50000c00

08004158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	0008      	movs	r0, r1
 8004162:	0011      	movs	r1, r2
 8004164:	1cbb      	adds	r3, r7, #2
 8004166:	1c02      	adds	r2, r0, #0
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	1c7b      	adds	r3, r7, #1
 800416c:	1c0a      	adds	r2, r1, #0
 800416e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004170:	1c7b      	adds	r3, r7, #1
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004178:	1cbb      	adds	r3, r7, #2
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004180:	e003      	b.n	800418a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004182:	1cbb      	adds	r3, r7, #2
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b002      	add	sp, #8
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e08f      	b.n	80042c6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2241      	movs	r2, #65	@ 0x41
 80041aa:	5c9b      	ldrb	r3, [r3, r2]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2240      	movs	r2, #64	@ 0x40
 80041b6:	2100      	movs	r1, #0
 80041b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fe fa73 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2241      	movs	r2, #65	@ 0x41
 80041c6:	2124      	movs	r1, #36	@ 0x24
 80041c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2101      	movs	r1, #1
 80041d6:	438a      	bics	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	493b      	ldr	r1, [pc, #236]	@ (80042d0 <HAL_I2C_Init+0x13c>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4938      	ldr	r1, [pc, #224]	@ (80042d4 <HAL_I2C_Init+0x140>)
 80041f4:	400a      	ands	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d108      	bne.n	8004212 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2180      	movs	r1, #128	@ 0x80
 800420a:	0209      	lsls	r1, r1, #8
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	e007      	b.n	8004222 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2184      	movs	r1, #132	@ 0x84
 800421c:	0209      	lsls	r1, r1, #8
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d109      	bne.n	800423e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2180      	movs	r1, #128	@ 0x80
 8004236:	0109      	lsls	r1, r1, #4
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	e007      	b.n	800424e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4923      	ldr	r1, [pc, #140]	@ (80042d8 <HAL_I2C_Init+0x144>)
 800424a:	400a      	ands	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4920      	ldr	r1, [pc, #128]	@ (80042dc <HAL_I2C_Init+0x148>)
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	491a      	ldr	r1, [pc, #104]	@ (80042d4 <HAL_I2C_Init+0x140>)
 800426a:	400a      	ands	r2, r1
 800426c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	431a      	orrs	r2, r3
 8004278:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2241      	movs	r2, #65	@ 0x41
 80042b2:	2120      	movs	r1, #32
 80042b4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2242      	movs	r2, #66	@ 0x42
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	f0ffffff 	.word	0xf0ffffff
 80042d4:	ffff7fff 	.word	0xffff7fff
 80042d8:	fffff7ff 	.word	0xfffff7ff
 80042dc:	02008000 	.word	0x02008000

080042e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	000c      	movs	r4, r1
 80042ea:	0010      	movs	r0, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	230a      	movs	r3, #10
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	1c22      	adds	r2, r4, #0
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	2308      	movs	r3, #8
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	1c02      	adds	r2, r0, #0
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	1dbb      	adds	r3, r7, #6
 8004300:	1c0a      	adds	r2, r1, #0
 8004302:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2241      	movs	r2, #65	@ 0x41
 8004308:	5c9b      	ldrb	r3, [r3, r2]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b20      	cmp	r3, #32
 800430e:	d000      	beq.n	8004312 <HAL_I2C_Mem_Write+0x32>
 8004310:	e10c      	b.n	800452c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <HAL_I2C_Mem_Write+0x42>
 8004318:	232c      	movs	r3, #44	@ 0x2c
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2280      	movs	r2, #128	@ 0x80
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0ff      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2240      	movs	r2, #64	@ 0x40
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_Mem_Write+0x5c>
 8004338:	2302      	movs	r3, #2
 800433a:	e0f8      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2240      	movs	r2, #64	@ 0x40
 8004340:	2101      	movs	r1, #1
 8004342:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004344:	f7ff f844 	bl	80033d0 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800434c:	2380      	movs	r3, #128	@ 0x80
 800434e:	0219      	lsls	r1, r3, #8
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2319      	movs	r3, #25
 8004358:	2201      	movs	r2, #1
 800435a:	f000 f975 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0e3      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2241      	movs	r2, #65	@ 0x41
 800436a:	2121      	movs	r1, #33	@ 0x21
 800436c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2242      	movs	r2, #66	@ 0x42
 8004372:	2140      	movs	r1, #64	@ 0x40
 8004374:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	222c      	movs	r2, #44	@ 0x2c
 8004386:	18ba      	adds	r2, r7, r2
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004392:	1dbb      	adds	r3, r7, #6
 8004394:	881c      	ldrh	r4, [r3, #0]
 8004396:	2308      	movs	r3, #8
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	881a      	ldrh	r2, [r3, #0]
 800439c:	230a      	movs	r3, #10
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	8819      	ldrh	r1, [r3, #0]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	0023      	movs	r3, r4
 80043ae:	f000 f8c5 	bl	800453c <I2C_RequestMemoryWrite>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	2100      	movs	r1, #0
 80043bc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0b5      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2bff      	cmp	r3, #255	@ 0xff
 80043ca:	d911      	bls.n	80043f0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	22ff      	movs	r2, #255	@ 0xff
 80043d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	045c      	lsls	r4, r3, #17
 80043dc:	230a      	movs	r3, #10
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	8819      	ldrh	r1, [r3, #0]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	0023      	movs	r3, r4
 80043ea:	f000 fb07 	bl	80049fc <I2C_TransferConfig>
 80043ee:	e012      	b.n	8004416 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	2380      	movs	r3, #128	@ 0x80
 8004402:	049c      	lsls	r4, r3, #18
 8004404:	230a      	movs	r3, #10
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	8819      	ldrh	r1, [r3, #0]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	0023      	movs	r3, r4
 8004412:	f000 faf3 	bl	80049fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	0018      	movs	r0, r3
 800441e:	f000 f96b 	bl	80046f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004422:	1e03      	subs	r3, r0, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e081      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d03a      	beq.n	80044da <HAL_I2C_Mem_Write+0x1fa>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d136      	bne.n	80044da <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800446c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	0013      	movs	r3, r2
 8004476:	2200      	movs	r2, #0
 8004478:	2180      	movs	r1, #128	@ 0x80
 800447a:	f000 f8e5 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 800447e:	1e03      	subs	r3, r0, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e053      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2bff      	cmp	r3, #255	@ 0xff
 800448e:	d911      	bls.n	80044b4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	22ff      	movs	r2, #255	@ 0xff
 8004494:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	b2da      	uxtb	r2, r3
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	045c      	lsls	r4, r3, #17
 80044a0:	230a      	movs	r3, #10
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	8819      	ldrh	r1, [r3, #0]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	0023      	movs	r3, r4
 80044ae:	f000 faa5 	bl	80049fc <I2C_TransferConfig>
 80044b2:	e012      	b.n	80044da <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	049c      	lsls	r4, r3, #18
 80044c8:	230a      	movs	r3, #10
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	8819      	ldrh	r1, [r3, #0]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	0023      	movs	r3, r4
 80044d6:	f000 fa91 	bl	80049fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d198      	bne.n	8004416 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 f94a 	bl	8004784 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044f0:	1e03      	subs	r3, r0, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e01a      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2220      	movs	r2, #32
 80044fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	490b      	ldr	r1, [pc, #44]	@ (8004538 <HAL_I2C_Mem_Write+0x258>)
 800450c:	400a      	ands	r2, r1
 800450e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2241      	movs	r2, #65	@ 0x41
 8004514:	2120      	movs	r1, #32
 8004516:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2242      	movs	r2, #66	@ 0x42
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2240      	movs	r2, #64	@ 0x40
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e000      	b.n	800452e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b007      	add	sp, #28
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	fe00e800 	.word	0xfe00e800

0800453c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800453c:	b5b0      	push	{r4, r5, r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	000c      	movs	r4, r1
 8004546:	0010      	movs	r0, r2
 8004548:	0019      	movs	r1, r3
 800454a:	250a      	movs	r5, #10
 800454c:	197b      	adds	r3, r7, r5
 800454e:	1c22      	adds	r2, r4, #0
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	2308      	movs	r3, #8
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	1c02      	adds	r2, r0, #0
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	1dbb      	adds	r3, r7, #6
 800455c:	1c0a      	adds	r2, r1, #0
 800455e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004560:	1dbb      	adds	r3, r7, #6
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	045c      	lsls	r4, r3, #17
 800456a:	197b      	adds	r3, r7, r5
 800456c:	8819      	ldrh	r1, [r3, #0]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <I2C_RequestMemoryWrite+0xc4>)
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	0023      	movs	r3, r4
 8004576:	f000 fa41 	bl	80049fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f8b9 	bl	80046f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004586:	1e03      	subs	r3, r0, #0
 8004588:	d001      	beq.n	800458e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e033      	b.n	80045f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458e:	1dbb      	adds	r3, r7, #6
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004596:	2308      	movs	r3, #8
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80045a4:	e019      	b.n	80045da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045a6:	2308      	movs	r3, #8
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ba:	6a39      	ldr	r1, [r7, #32]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f89a 	bl	80046f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e014      	b.n	80045f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045cc:	2308      	movs	r3, #8
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	0013      	movs	r3, r2
 80045e4:	2200      	movs	r2, #0
 80045e6:	2180      	movs	r1, #128	@ 0x80
 80045e8:	f000 f82e 	bl	8004648 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	1e03      	subs	r3, r0, #0
 80045ee:	d001      	beq.n	80045f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bdb0      	pop	{r4, r5, r7, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	80002000 	.word	0x80002000

08004604 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2202      	movs	r2, #2
 8004614:	4013      	ands	r3, r2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d103      	bne.n	8004622 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2201      	movs	r2, #1
 800462a:	4013      	ands	r3, r2
 800462c:	2b01      	cmp	r3, #1
 800462e:	d007      	beq.n	8004640 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2101      	movs	r1, #1
 800463c:	430a      	orrs	r2, r1
 800463e:	619a      	str	r2, [r3, #24]
  }
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004658:	e03a      	b.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 f8d3 	bl	800480c <I2C_IsErrorOccurred>
 8004666:	1e03      	subs	r3, r0, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e040      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	d02d      	beq.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004674:	f7fe feac 	bl	80033d0 <HAL_GetTick>
 8004678:	0002      	movs	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d302      	bcc.n	800468a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d122      	bne.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	4013      	ands	r3, r2
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	425a      	negs	r2, r3
 800469a:	4153      	adcs	r3, r2
 800469c:	b2db      	uxtb	r3, r3
 800469e:	001a      	movs	r2, r3
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d113      	bne.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	2220      	movs	r2, #32
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2241      	movs	r2, #65	@ 0x41
 80046b8:	2120      	movs	r1, #32
 80046ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2242      	movs	r2, #66	@ 0x42
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2240      	movs	r2, #64	@ 0x40
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e00f      	b.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4013      	ands	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	425a      	negs	r2, r3
 80046e0:	4153      	adcs	r3, r2
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	001a      	movs	r2, r3
 80046e6:	1dfb      	adds	r3, r7, #7
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d0b5      	beq.n	800465a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b004      	add	sp, #16
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004704:	e032      	b.n	800476c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 f87d 	bl	800480c <I2C_IsErrorOccurred>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e030      	b.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3301      	adds	r3, #1
 800471e:	d025      	beq.n	800476c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004720:	f7fe fe56 	bl	80033d0 <HAL_GetTick>
 8004724:	0002      	movs	r2, r0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	d302      	bcc.n	8004736 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11a      	bne.n	800476c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2202      	movs	r2, #2
 800473e:	4013      	ands	r3, r2
 8004740:	2b02      	cmp	r3, #2
 8004742:	d013      	beq.n	800476c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004748:	2220      	movs	r2, #32
 800474a:	431a      	orrs	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2241      	movs	r2, #65	@ 0x41
 8004754:	2120      	movs	r1, #32
 8004756:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2242      	movs	r2, #66	@ 0x42
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2240      	movs	r2, #64	@ 0x40
 8004764:	2100      	movs	r1, #0
 8004766:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e007      	b.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d1c5      	bne.n	8004706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	b004      	add	sp, #16
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004790:	e02f      	b.n	80047f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0018      	movs	r0, r3
 800479a:	f000 f837 	bl	800480c <I2C_IsErrorOccurred>
 800479e:	1e03      	subs	r3, r0, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e02d      	b.n	8004802 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fe fe13 	bl	80033d0 <HAL_GetTick>
 80047aa:	0002      	movs	r2, r0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11a      	bne.n	80047f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2220      	movs	r2, #32
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d013      	beq.n	80047f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	2220      	movs	r2, #32
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2241      	movs	r2, #65	@ 0x41
 80047da:	2120      	movs	r1, #32
 80047dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2242      	movs	r2, #66	@ 0x42
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2240      	movs	r2, #64	@ 0x40
 80047ea:	2100      	movs	r1, #0
 80047ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e007      	b.n	8004802 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2220      	movs	r2, #32
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d1c8      	bne.n	8004792 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b004      	add	sp, #16
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004818:	2327      	movs	r3, #39	@ 0x27
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2210      	movs	r2, #16
 8004834:	4013      	ands	r3, r2
 8004836:	d100      	bne.n	800483a <I2C_IsErrorOccurred+0x2e>
 8004838:	e079      	b.n	800492e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2210      	movs	r2, #16
 8004840:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004842:	e057      	b.n	80048f4 <I2C_IsErrorOccurred+0xe8>
 8004844:	2227      	movs	r2, #39	@ 0x27
 8004846:	18bb      	adds	r3, r7, r2
 8004848:	18ba      	adds	r2, r7, r2
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3301      	adds	r3, #1
 8004852:	d04f      	beq.n	80048f4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004854:	f7fe fdbc 	bl	80033d0 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <I2C_IsErrorOccurred+0x5e>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d144      	bne.n	80048f4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	4013      	ands	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004878:	2013      	movs	r0, #19
 800487a:	183b      	adds	r3, r7, r0
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	2142      	movs	r1, #66	@ 0x42
 8004880:	5c52      	ldrb	r2, [r2, r1]
 8004882:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	401a      	ands	r2, r3
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	429a      	cmp	r2, r3
 8004896:	d126      	bne.n	80048e6 <I2C_IsErrorOccurred+0xda>
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	01db      	lsls	r3, r3, #7
 800489e:	429a      	cmp	r2, r3
 80048a0:	d021      	beq.n	80048e6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80048a2:	183b      	adds	r3, r7, r0
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d01d      	beq.n	80048e6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2180      	movs	r1, #128	@ 0x80
 80048b6:	01c9      	lsls	r1, r1, #7
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048bc:	f7fe fd88 	bl	80033d0 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c4:	e00f      	b.n	80048e6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048c6:	f7fe fd83 	bl	80033d0 <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b19      	cmp	r3, #25
 80048d2:	d908      	bls.n	80048e6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2220      	movs	r2, #32
 80048d8:	4313      	orrs	r3, r2
 80048da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048dc:	2327      	movs	r3, #39	@ 0x27
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]

              break;
 80048e4:	e006      	b.n	80048f4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2220      	movs	r2, #32
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d1e8      	bne.n	80048c6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2220      	movs	r2, #32
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d004      	beq.n	800490c <I2C_IsErrorOccurred+0x100>
 8004902:	2327      	movs	r3, #39	@ 0x27
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d09b      	beq.n	8004844 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800490c:	2327      	movs	r3, #39	@ 0x27
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2220      	movs	r2, #32
 800491c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	2204      	movs	r2, #4
 8004922:	4313      	orrs	r3, r2
 8004924:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004926:	2327      	movs	r3, #39	@ 0x27
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d00c      	beq.n	800495a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2201      	movs	r2, #1
 8004944:	4313      	orrs	r3, r2
 8004946:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	0052      	lsls	r2, r2, #1
 8004950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004952:	2327      	movs	r3, #39	@ 0x27
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4013      	ands	r3, r2
 8004962:	d00c      	beq.n	800497e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	2208      	movs	r2, #8
 8004968:	4313      	orrs	r3, r2
 800496a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2280      	movs	r2, #128	@ 0x80
 8004972:	00d2      	lsls	r2, r2, #3
 8004974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004976:	2327      	movs	r3, #39	@ 0x27
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4013      	ands	r3, r2
 8004986:	d00c      	beq.n	80049a2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2202      	movs	r2, #2
 800498c:	4313      	orrs	r3, r2
 800498e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2280      	movs	r2, #128	@ 0x80
 8004996:	0092      	lsls	r2, r2, #2
 8004998:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800499a:	2327      	movs	r3, #39	@ 0x27
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80049a2:	2327      	movs	r3, #39	@ 0x27
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01d      	beq.n	80049e8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7ff fe28 	bl	8004604 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	490e      	ldr	r1, [pc, #56]	@ (80049f8 <I2C_IsErrorOccurred+0x1ec>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2241      	movs	r2, #65	@ 0x41
 80049d4:	2120      	movs	r1, #32
 80049d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2242      	movs	r2, #66	@ 0x42
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2240      	movs	r2, #64	@ 0x40
 80049e4:	2100      	movs	r1, #0
 80049e6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80049e8:	2327      	movs	r3, #39	@ 0x27
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b00a      	add	sp, #40	@ 0x28
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	fe00e800 	.word	0xfe00e800

080049fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	0008      	movs	r0, r1
 8004a06:	0011      	movs	r1, r2
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	240a      	movs	r4, #10
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	1c02      	adds	r2, r0, #0
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	2009      	movs	r0, #9
 8004a14:	183b      	adds	r3, r7, r0
 8004a16:	1c0a      	adds	r2, r1, #0
 8004a18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a1a:	193b      	adds	r3, r7, r4
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	059b      	lsls	r3, r3, #22
 8004a20:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a22:	183b      	adds	r3, r7, r0
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	0419      	lsls	r1, r3, #16
 8004a28:	23ff      	movs	r3, #255	@ 0xff
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a36:	4313      	orrs	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a46:	0d51      	lsrs	r1, r2, #21
 8004a48:	2280      	movs	r2, #128	@ 0x80
 8004a4a:	00d2      	lsls	r2, r2, #3
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	4907      	ldr	r1, [pc, #28]	@ (8004a6c <I2C_TransferConfig+0x70>)
 8004a50:	430a      	orrs	r2, r1
 8004a52:	43d2      	mvns	r2, r2
 8004a54:	401a      	ands	r2, r3
 8004a56:	0011      	movs	r1, r2
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b007      	add	sp, #28
 8004a68:	bd90      	pop	{r4, r7, pc}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	03ff63ff 	.word	0x03ff63ff

08004a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2241      	movs	r2, #65	@ 0x41
 8004a7e:	5c9b      	ldrb	r3, [r3, r2]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d138      	bne.n	8004af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	5c9b      	ldrb	r3, [r3, r2]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e032      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2240      	movs	r2, #64	@ 0x40
 8004a98:	2101      	movs	r1, #1
 8004a9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2241      	movs	r2, #65	@ 0x41
 8004aa0:	2124      	movs	r1, #36	@ 0x24
 8004aa2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4911      	ldr	r1, [pc, #68]	@ (8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2101      	movs	r1, #1
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2241      	movs	r2, #65	@ 0x41
 8004ae8:	2120      	movs	r1, #32
 8004aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2240      	movs	r2, #64	@ 0x40
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	ffffefff 	.word	0xffffefff

08004b08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2241      	movs	r2, #65	@ 0x41
 8004b16:	5c9b      	ldrb	r3, [r3, r2]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d139      	bne.n	8004b92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2240      	movs	r2, #64	@ 0x40
 8004b22:	5c9b      	ldrb	r3, [r3, r2]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e033      	b.n	8004b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2240      	movs	r2, #64	@ 0x40
 8004b30:	2101      	movs	r1, #1
 8004b32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2241      	movs	r2, #65	@ 0x41
 8004b38:	2124      	movs	r1, #36	@ 0x24
 8004b3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2101      	movs	r1, #1
 8004b48:	438a      	bics	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a11      	ldr	r2, [pc, #68]	@ (8004b9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2241      	movs	r2, #65	@ 0x41
 8004b82:	2120      	movs	r1, #32
 8004b84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2240      	movs	r2, #64	@ 0x40
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b004      	add	sp, #16
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	fffff0ff 	.word	0xfffff0ff

08004ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d11f      	bne.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004bc4:	4b14      	ldr	r3, [pc, #80]	@ (8004c18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	0013      	movs	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4912      	ldr	r1, [pc, #72]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7fb fab0 	bl	8000138 <__udivsi3>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bde:	e008      	b.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e001      	b.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e009      	b.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bf2:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	2380      	movs	r3, #128	@ 0x80
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d0ed      	beq.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b004      	add	sp, #16
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	40007000 	.word	0x40007000
 8004c14:	fffff9ff 	.word	0xfffff9ff
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	000f4240 	.word	0x000f4240

08004c20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004c24:	4b03      	ldr	r3, [pc, #12]	@ (8004c34 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	23e0      	movs	r3, #224	@ 0xe0
 8004c2a:	01db      	lsls	r3, r3, #7
 8004c2c:	4013      	ands	r3, r2
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000

08004c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e2f3      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4013      	ands	r3, r2
 8004c52:	d100      	bne.n	8004c56 <HAL_RCC_OscConfig+0x1e>
 8004c54:	e07c      	b.n	8004d50 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c56:	4bc3      	ldr	r3, [pc, #780]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2238      	movs	r2, #56	@ 0x38
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c60:	4bc0      	ldr	r3, [pc, #768]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2203      	movs	r2, #3
 8004c66:	4013      	ands	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3e>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d002      	beq.n	8004c7c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	2380      	movs	r3, #128	@ 0x80
 8004c82:	029b      	lsls	r3, r3, #10
 8004c84:	4013      	ands	r3, r2
 8004c86:	d062      	beq.n	8004d4e <HAL_RCC_OscConfig+0x116>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d15e      	bne.n	8004d4e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e2ce      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x78>
 8004ca0:	4bb0      	ldr	r3, [pc, #704]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4baf      	ldr	r3, [pc, #700]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ca6:	2180      	movs	r1, #128	@ 0x80
 8004ca8:	0249      	lsls	r1, r1, #9
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e020      	b.n	8004cf2 <HAL_RCC_OscConfig+0xba>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	23a0      	movs	r3, #160	@ 0xa0
 8004cb6:	02db      	lsls	r3, r3, #11
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d10e      	bne.n	8004cda <HAL_RCC_OscConfig+0xa2>
 8004cbc:	4ba9      	ldr	r3, [pc, #676]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4ba8      	ldr	r3, [pc, #672]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004cc2:	2180      	movs	r1, #128	@ 0x80
 8004cc4:	02c9      	lsls	r1, r1, #11
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	4ba6      	ldr	r3, [pc, #664]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4ba5      	ldr	r3, [pc, #660]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	2180      	movs	r1, #128	@ 0x80
 8004cd2:	0249      	lsls	r1, r1, #9
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e00b      	b.n	8004cf2 <HAL_RCC_OscConfig+0xba>
 8004cda:	4ba2      	ldr	r3, [pc, #648]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4ba1      	ldr	r3, [pc, #644]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ce0:	49a1      	ldr	r1, [pc, #644]	@ (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	4b9f      	ldr	r3, [pc, #636]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b9e      	ldr	r3, [pc, #632]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004cec:	499f      	ldr	r1, [pc, #636]	@ (8004f6c <HAL_RCC_OscConfig+0x334>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d014      	beq.n	8004d24 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fe fb69 	bl	80033d0 <HAL_GetTick>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fe fb64 	bl	80033d0 <HAL_GetTick>
 8004d08:	0002      	movs	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e28d      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d16:	4b93      	ldr	r3, [pc, #588]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xcc>
 8004d22:	e015      	b.n	8004d50 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe fb54 	bl	80033d0 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2e:	f7fe fb4f 	bl	80033d0 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	@ 0x64
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e278      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d40:	4b88      	ldr	r3, [pc, #544]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0xf6>
 8004d4c:	e000      	b.n	8004d50 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	4013      	ands	r3, r2
 8004d58:	d100      	bne.n	8004d5c <HAL_RCC_OscConfig+0x124>
 8004d5a:	e099      	b.n	8004e90 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5c:	4b81      	ldr	r3, [pc, #516]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2238      	movs	r2, #56	@ 0x38
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d66:	4b7f      	ldr	r3, [pc, #508]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d102      	bne.n	8004d7c <HAL_RCC_OscConfig+0x144>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d002      	beq.n	8004d82 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d135      	bne.n	8004dee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d82:	4b78      	ldr	r3, [pc, #480]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x162>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e24b      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9a:	4b72      	ldr	r3, [pc, #456]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4a74      	ldr	r2, [pc, #464]	@ (8004f70 <HAL_RCC_OscConfig+0x338>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	0019      	movs	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	4b6e      	ldr	r3, [pc, #440]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d112      	bne.n	8004ddc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004db6:	4b6b      	ldr	r3, [pc, #428]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	@ (8004f74 <HAL_RCC_OscConfig+0x33c>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	4b67      	ldr	r3, [pc, #412]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004dca:	4b66      	ldr	r3, [pc, #408]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	0adb      	lsrs	r3, r3, #11
 8004dd0:	2207      	movs	r2, #7
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	4a68      	ldr	r2, [pc, #416]	@ (8004f78 <HAL_RCC_OscConfig+0x340>)
 8004dd6:	40da      	lsrs	r2, r3
 8004dd8:	4b68      	ldr	r3, [pc, #416]	@ (8004f7c <HAL_RCC_OscConfig+0x344>)
 8004dda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ddc:	4b68      	ldr	r3, [pc, #416]	@ (8004f80 <HAL_RCC_OscConfig+0x348>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7fe fa99 	bl	8003318 <HAL_InitTick>
 8004de6:	1e03      	subs	r3, r0, #0
 8004de8:	d051      	beq.n	8004e8e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e221      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d030      	beq.n	8004e58 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004df6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a5e      	ldr	r2, [pc, #376]	@ (8004f74 <HAL_RCC_OscConfig+0x33c>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	0019      	movs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	4b57      	ldr	r3, [pc, #348]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004e0a:	4b56      	ldr	r3, [pc, #344]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b55      	ldr	r3, [pc, #340]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e10:	2180      	movs	r1, #128	@ 0x80
 8004e12:	0049      	lsls	r1, r1, #1
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fe fada 	bl	80033d0 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e22:	f7fe fad5 	bl	80033d0 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1fe      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e34:	4b4b      	ldr	r3, [pc, #300]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b48      	ldr	r3, [pc, #288]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a4a      	ldr	r2, [pc, #296]	@ (8004f70 <HAL_RCC_OscConfig+0x338>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	4b44      	ldr	r3, [pc, #272]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	e01b      	b.n	8004e90 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004e58:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b41      	ldr	r3, [pc, #260]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e5e:	4949      	ldr	r1, [pc, #292]	@ (8004f84 <HAL_RCC_OscConfig+0x34c>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fe fab4 	bl	80033d0 <HAL_GetTick>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fe faaf 	bl	80033d0 <HAL_GetTick>
 8004e72:	0002      	movs	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e1d8      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e80:	4b38      	ldr	r3, [pc, #224]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	@ 0x80
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x236>
 8004e8c:	e000      	b.n	8004e90 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2208      	movs	r2, #8
 8004e96:	4013      	ands	r3, r2
 8004e98:	d047      	beq.n	8004f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e9a:	4b32      	ldr	r3, [pc, #200]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2238      	movs	r2, #56	@ 0x38
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b18      	cmp	r3, #24
 8004ea4:	d10a      	bne.n	8004ebc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4013      	ands	r3, r2
 8004eae:	d03c      	beq.n	8004f2a <HAL_RCC_OscConfig+0x2f2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d138      	bne.n	8004f2a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e1ba      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ec4:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004ec6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ec8:	4b26      	ldr	r3, [pc, #152]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004eca:	2101      	movs	r1, #1
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fe fa7e 	bl	80033d0 <HAL_GetTick>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eda:	f7fe fa79 	bl	80033d0 <HAL_GetTick>
 8004ede:	0002      	movs	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a2      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d0f1      	beq.n	8004eda <HAL_RCC_OscConfig+0x2a2>
 8004ef6:	e018      	b.n	8004f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004efa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004efc:	4b19      	ldr	r3, [pc, #100]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004efe:	2101      	movs	r1, #1
 8004f00:	438a      	bics	r2, r1
 8004f02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fe fa64 	bl	80033d0 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fe fa5f 	bl	80033d0 <HAL_GetTick>
 8004f12:	0002      	movs	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e188      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f20:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d1f1      	bne.n	8004f0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	4013      	ands	r3, r2
 8004f32:	d100      	bne.n	8004f36 <HAL_RCC_OscConfig+0x2fe>
 8004f34:	e0c6      	b.n	80050c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	231f      	movs	r3, #31
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f3e:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2238      	movs	r2, #56	@ 0x38
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d11e      	bne.n	8004f88 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004f4a:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_OscConfig+0x32c>)
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4e:	2202      	movs	r2, #2
 8004f50:	4013      	ands	r3, r2
 8004f52:	d100      	bne.n	8004f56 <HAL_RCC_OscConfig+0x31e>
 8004f54:	e0b6      	b.n	80050c4 <HAL_RCC_OscConfig+0x48c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d000      	beq.n	8004f60 <HAL_RCC_OscConfig+0x328>
 8004f5e:	e0b1      	b.n	80050c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e166      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
 8004f64:	40021000 	.word	0x40021000
 8004f68:	fffeffff 	.word	0xfffeffff
 8004f6c:	fffbffff 	.word	0xfffbffff
 8004f70:	ffff80ff 	.word	0xffff80ff
 8004f74:	ffffc7ff 	.word	0xffffc7ff
 8004f78:	00f42400 	.word	0x00f42400
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	20000004 	.word	0x20000004
 8004f84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f88:	4bac      	ldr	r3, [pc, #688]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8004f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	055b      	lsls	r3, r3, #21
 8004f90:	4013      	ands	r3, r2
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_OscConfig+0x360>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x362>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d011      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4ba7      	ldr	r3, [pc, #668]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8004fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa2:	4ba6      	ldr	r3, [pc, #664]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8004fa4:	2180      	movs	r1, #128	@ 0x80
 8004fa6:	0549      	lsls	r1, r1, #21
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fac:	4ba3      	ldr	r3, [pc, #652]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8004fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	055b      	lsls	r3, r3, #21
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004fba:	231f      	movs	r3, #31
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc2:	4b9f      	ldr	r3, [pc, #636]	@ (8005240 <HAL_RCC_OscConfig+0x608>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d11a      	bne.n	8005004 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fce:	4b9c      	ldr	r3, [pc, #624]	@ (8005240 <HAL_RCC_OscConfig+0x608>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8005240 <HAL_RCC_OscConfig+0x608>)
 8004fd4:	2180      	movs	r1, #128	@ 0x80
 8004fd6:	0049      	lsls	r1, r1, #1
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe f9f8 	bl	80033d0 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fe f9f3 	bl	80033d0 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e11c      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff8:	4b91      	ldr	r3, [pc, #580]	@ (8005240 <HAL_RCC_OscConfig+0x608>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4013      	ands	r3, r2
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x3e2>
 800500c:	4b8b      	ldr	r3, [pc, #556]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800500e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005010:	4b8a      	ldr	r3, [pc, #552]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005012:	2101      	movs	r1, #1
 8005014:	430a      	orrs	r2, r1
 8005016:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005018:	e01c      	b.n	8005054 <HAL_RCC_OscConfig+0x41c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b05      	cmp	r3, #5
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x404>
 8005022:	4b86      	ldr	r3, [pc, #536]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005026:	4b85      	ldr	r3, [pc, #532]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005028:	2104      	movs	r1, #4
 800502a:	430a      	orrs	r2, r1
 800502c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800502e:	4b83      	ldr	r3, [pc, #524]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005030:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005032:	4b82      	ldr	r3, [pc, #520]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005034:	2101      	movs	r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	65da      	str	r2, [r3, #92]	@ 0x5c
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0x41c>
 800503c:	4b7f      	ldr	r3, [pc, #508]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800503e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005040:	4b7e      	ldr	r3, [pc, #504]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005042:	2101      	movs	r1, #1
 8005044:	438a      	bics	r2, r1
 8005046:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005048:	4b7c      	ldr	r3, [pc, #496]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800504a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800504c:	4b7b      	ldr	r3, [pc, #492]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800504e:	2104      	movs	r1, #4
 8005050:	438a      	bics	r2, r1
 8005052:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d014      	beq.n	8005086 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe f9b8 	bl	80033d0 <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005064:	e009      	b.n	800507a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fe f9b3 	bl	80033d0 <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	4a74      	ldr	r2, [pc, #464]	@ (8005244 <HAL_RCC_OscConfig+0x60c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0db      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	4b70      	ldr	r3, [pc, #448]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800507c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507e:	2202      	movs	r2, #2
 8005080:	4013      	ands	r3, r2
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x42e>
 8005084:	e013      	b.n	80050ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fe f9a3 	bl	80033d0 <HAL_GetTick>
 800508a:	0003      	movs	r3, r0
 800508c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800508e:	e009      	b.n	80050a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fe f99e 	bl	80033d0 <HAL_GetTick>
 8005094:	0002      	movs	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	4a6a      	ldr	r2, [pc, #424]	@ (8005244 <HAL_RCC_OscConfig+0x60c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e0c6      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a4:	4b65      	ldr	r3, [pc, #404]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80050a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a8:	2202      	movs	r2, #2
 80050aa:	4013      	ands	r3, r2
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80050ae:	231f      	movs	r3, #31
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d105      	bne.n	80050c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80050b8:	4b60      	ldr	r3, [pc, #384]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80050ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050bc:	4b5f      	ldr	r3, [pc, #380]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80050be:	4962      	ldr	r1, [pc, #392]	@ (8005248 <HAL_RCC_OscConfig+0x610>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d100      	bne.n	80050ce <HAL_RCC_OscConfig+0x496>
 80050cc:	e0b0      	b.n	8005230 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ce:	4b5b      	ldr	r3, [pc, #364]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2238      	movs	r2, #56	@ 0x38
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d100      	bne.n	80050dc <HAL_RCC_OscConfig+0x4a4>
 80050da:	e078      	b.n	80051ce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d153      	bne.n	800518c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e4:	4b55      	ldr	r3, [pc, #340]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b54      	ldr	r3, [pc, #336]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80050ea:	4958      	ldr	r1, [pc, #352]	@ (800524c <HAL_RCC_OscConfig+0x614>)
 80050ec:	400a      	ands	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fe f96e 	bl	80033d0 <HAL_GetTick>
 80050f4:	0003      	movs	r3, r0
 80050f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fa:	f7fe f969 	bl	80033d0 <HAL_GetTick>
 80050fe:	0002      	movs	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e092      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510c:	4b4b      	ldr	r3, [pc, #300]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	049b      	lsls	r3, r3, #18
 8005114:	4013      	ands	r3, r2
 8005116:	d1f0      	bne.n	80050fa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005118:	4b48      	ldr	r3, [pc, #288]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a4c      	ldr	r2, [pc, #304]	@ (8005250 <HAL_RCC_OscConfig+0x618>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1a      	ldr	r2, [r3, #32]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	431a      	orrs	r2, r3
 8005140:	4b3e      	ldr	r3, [pc, #248]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005142:	430a      	orrs	r2, r1
 8005144:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005146:	4b3d      	ldr	r3, [pc, #244]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b3c      	ldr	r3, [pc, #240]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800514c:	2180      	movs	r1, #128	@ 0x80
 800514e:	0449      	lsls	r1, r1, #17
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005154:	4b39      	ldr	r3, [pc, #228]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	4b38      	ldr	r3, [pc, #224]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800515a:	2180      	movs	r1, #128	@ 0x80
 800515c:	0549      	lsls	r1, r1, #21
 800515e:	430a      	orrs	r2, r1
 8005160:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005162:	f7fe f935 	bl	80033d0 <HAL_GetTick>
 8005166:	0003      	movs	r3, r0
 8005168:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fe f930 	bl	80033d0 <HAL_GetTick>
 8005170:	0002      	movs	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e059      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517e:	4b2f      	ldr	r3, [pc, #188]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	2380      	movs	r3, #128	@ 0x80
 8005184:	049b      	lsls	r3, r3, #18
 8005186:	4013      	ands	r3, r2
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x534>
 800518a:	e051      	b.n	8005230 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b2a      	ldr	r3, [pc, #168]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 8005192:	492e      	ldr	r1, [pc, #184]	@ (800524c <HAL_RCC_OscConfig+0x614>)
 8005194:	400a      	ands	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fe f91a 	bl	80033d0 <HAL_GetTick>
 800519c:	0003      	movs	r3, r0
 800519e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fe f915 	bl	80033d0 <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e03e      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b4:	4b21      	ldr	r3, [pc, #132]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	049b      	lsls	r3, r3, #18
 80051bc:	4013      	ands	r3, r2
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80051c0:	4b1e      	ldr	r3, [pc, #120]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80051c6:	4923      	ldr	r1, [pc, #140]	@ (8005254 <HAL_RCC_OscConfig+0x61c>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e030      	b.n	8005230 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e02b      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80051da:	4b18      	ldr	r3, [pc, #96]	@ (800523c <HAL_RCC_OscConfig+0x604>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2203      	movs	r2, #3
 80051e4:	401a      	ands	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d11e      	bne.n	800522c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2270      	movs	r2, #112	@ 0x70
 80051f2:	401a      	ands	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d117      	bne.n	800522c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	23fe      	movs	r3, #254	@ 0xfe
 8005200:	01db      	lsls	r3, r3, #7
 8005202:	401a      	ands	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d10e      	bne.n	800522c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	23f8      	movs	r3, #248	@ 0xf8
 8005212:	039b      	lsls	r3, r3, #14
 8005214:	401a      	ands	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d106      	bne.n	800522c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0f5b      	lsrs	r3, r3, #29
 8005222:	075a      	lsls	r2, r3, #29
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b008      	add	sp, #32
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	40021000 	.word	0x40021000
 8005240:	40007000 	.word	0x40007000
 8005244:	00001388 	.word	0x00001388
 8005248:	efffffff 	.word	0xefffffff
 800524c:	feffffff 	.word	0xfeffffff
 8005250:	1fc1808c 	.word	0x1fc1808c
 8005254:	effefffc 	.word	0xeffefffc

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0e9      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b76      	ldr	r3, [pc, #472]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2207      	movs	r2, #7
 8005272:	4013      	ands	r3, r2
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d91e      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b73      	ldr	r3, [pc, #460]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2207      	movs	r2, #7
 8005280:	4393      	bics	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	4b70      	ldr	r3, [pc, #448]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800528c:	f7fe f8a0 	bl	80033d0 <HAL_GetTick>
 8005290:	0003      	movs	r3, r0
 8005292:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005294:	e009      	b.n	80052aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005296:	f7fe f89b 	bl	80033d0 <HAL_GetTick>
 800529a:	0002      	movs	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	4a6a      	ldr	r2, [pc, #424]	@ (800544c <HAL_RCC_ClockConfig+0x1f4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0ca      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052aa:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2207      	movs	r2, #7
 80052b0:	4013      	ands	r3, r2
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1ee      	bne.n	8005296 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2202      	movs	r2, #2
 80052be:	4013      	ands	r3, r2
 80052c0:	d015      	beq.n	80052ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2204      	movs	r2, #4
 80052c8:	4013      	ands	r3, r2
 80052ca:	d006      	beq.n	80052da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80052cc:	4b60      	ldr	r3, [pc, #384]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 80052d2:	21e0      	movs	r1, #224	@ 0xe0
 80052d4:	01c9      	lsls	r1, r1, #7
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052da:	4b5d      	ldr	r3, [pc, #372]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	4a5d      	ldr	r2, [pc, #372]	@ (8005454 <HAL_RCC_ClockConfig+0x1fc>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	4b59      	ldr	r3, [pc, #356]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4013      	ands	r3, r2
 80052f6:	d057      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005300:	4b53      	ldr	r3, [pc, #332]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	2380      	movs	r3, #128	@ 0x80
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	4013      	ands	r3, r2
 800530a:	d12b      	bne.n	8005364 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e097      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d107      	bne.n	8005328 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005318:	4b4d      	ldr	r3, [pc, #308]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	049b      	lsls	r3, r3, #18
 8005320:	4013      	ands	r3, r2
 8005322:	d11f      	bne.n	8005364 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e08b      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005330:	4b47      	ldr	r3, [pc, #284]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	2380      	movs	r3, #128	@ 0x80
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4013      	ands	r3, r2
 800533a:	d113      	bne.n	8005364 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e07f      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d106      	bne.n	8005356 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005348:	4b41      	ldr	r3, [pc, #260]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 800534a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534c:	2202      	movs	r2, #2
 800534e:	4013      	ands	r3, r2
 8005350:	d108      	bne.n	8005364 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e074      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b3e      	ldr	r3, [pc, #248]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535a:	2202      	movs	r2, #2
 800535c:	4013      	ands	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e06d      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005364:	4b3a      	ldr	r3, [pc, #232]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2207      	movs	r2, #7
 800536a:	4393      	bics	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	4b37      	ldr	r3, [pc, #220]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005378:	f7fe f82a 	bl	80033d0 <HAL_GetTick>
 800537c:	0003      	movs	r3, r0
 800537e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005380:	e009      	b.n	8005396 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005382:	f7fe f825 	bl	80033d0 <HAL_GetTick>
 8005386:	0002      	movs	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	4a2f      	ldr	r2, [pc, #188]	@ (800544c <HAL_RCC_ClockConfig+0x1f4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e054      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2e      	ldr	r3, [pc, #184]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2238      	movs	r2, #56	@ 0x38
 800539c:	401a      	ands	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1ec      	bne.n	8005382 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2207      	movs	r2, #7
 80053ae:	4013      	ands	r3, r2
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d21e      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2207      	movs	r2, #7
 80053bc:	4393      	bics	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053c8:	f7fe f802 	bl	80033d0 <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053d0:	e009      	b.n	80053e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d2:	f7fd fffd 	bl	80033d0 <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <HAL_RCC_ClockConfig+0x1f4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e02c      	b.n	8005440 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053e6:	4b18      	ldr	r3, [pc, #96]	@ (8005448 <HAL_RCC_ClockConfig+0x1f0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2207      	movs	r2, #7
 80053ec:	4013      	ands	r3, r2
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1ee      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2204      	movs	r2, #4
 80053fa:	4013      	ands	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80053fe:	4b14      	ldr	r3, [pc, #80]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	4a15      	ldr	r2, [pc, #84]	@ (8005458 <HAL_RCC_ClockConfig+0x200>)
 8005404:	4013      	ands	r3, r2
 8005406:	0019      	movs	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005412:	f000 f829 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 8005416:	0001      	movs	r1, r0
 8005418:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <HAL_RCC_ClockConfig+0x1f8>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	220f      	movs	r2, #15
 8005420:	401a      	ands	r2, r3
 8005422:	4b0e      	ldr	r3, [pc, #56]	@ (800545c <HAL_RCC_ClockConfig+0x204>)
 8005424:	0092      	lsls	r2, r2, #2
 8005426:	58d3      	ldr	r3, [r2, r3]
 8005428:	221f      	movs	r2, #31
 800542a:	4013      	ands	r3, r2
 800542c:	000a      	movs	r2, r1
 800542e:	40da      	lsrs	r2, r3
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_ClockConfig+0x208>)
 8005432:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005434:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <HAL_RCC_ClockConfig+0x20c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	0018      	movs	r0, r3
 800543a:	f7fd ff6d 	bl	8003318 <HAL_InitTick>
 800543e:	0003      	movs	r3, r0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b004      	add	sp, #16
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40022000 	.word	0x40022000
 800544c:	00001388 	.word	0x00001388
 8005450:	40021000 	.word	0x40021000
 8005454:	fffff0ff 	.word	0xfffff0ff
 8005458:	ffff8fff 	.word	0xffff8fff
 800545c:	08009f10 	.word	0x08009f10
 8005460:	20000000 	.word	0x20000000
 8005464:	20000004 	.word	0x20000004

08005468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800546e:	4b3c      	ldr	r3, [pc, #240]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2238      	movs	r2, #56	@ 0x38
 8005474:	4013      	ands	r3, r2
 8005476:	d10f      	bne.n	8005498 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005478:	4b39      	ldr	r3, [pc, #228]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	0adb      	lsrs	r3, r3, #11
 800547e:	2207      	movs	r2, #7
 8005480:	4013      	ands	r3, r2
 8005482:	2201      	movs	r2, #1
 8005484:	409a      	lsls	r2, r3
 8005486:	0013      	movs	r3, r2
 8005488:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	4835      	ldr	r0, [pc, #212]	@ (8005564 <HAL_RCC_GetSysClockFreq+0xfc>)
 800548e:	f7fa fe53 	bl	8000138 <__udivsi3>
 8005492:	0003      	movs	r3, r0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	e05d      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005498:	4b31      	ldr	r3, [pc, #196]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2238      	movs	r2, #56	@ 0x38
 800549e:	4013      	ands	r3, r2
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d102      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054a4:	4b30      	ldr	r3, [pc, #192]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x100>)
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e054      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2238      	movs	r2, #56	@ 0x38
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d138      	bne.n	8005528 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2203      	movs	r2, #3
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c0:	4b27      	ldr	r3, [pc, #156]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	2207      	movs	r2, #7
 80054c8:	4013      	ands	r3, r2
 80054ca:	3301      	adds	r3, #1
 80054cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d10d      	bne.n	80054f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	4824      	ldr	r0, [pc, #144]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x100>)
 80054d8:	f7fa fe2e 	bl	8000138 <__udivsi3>
 80054dc:	0003      	movs	r3, r0
 80054de:	0019      	movs	r1, r3
 80054e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	227f      	movs	r2, #127	@ 0x7f
 80054e8:	4013      	ands	r3, r2
 80054ea:	434b      	muls	r3, r1
 80054ec:	617b      	str	r3, [r7, #20]
        break;
 80054ee:	e00d      	b.n	800550c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	481c      	ldr	r0, [pc, #112]	@ (8005564 <HAL_RCC_GetSysClockFreq+0xfc>)
 80054f4:	f7fa fe20 	bl	8000138 <__udivsi3>
 80054f8:	0003      	movs	r3, r0
 80054fa:	0019      	movs	r1, r3
 80054fc:	4b18      	ldr	r3, [pc, #96]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	227f      	movs	r2, #127	@ 0x7f
 8005504:	4013      	ands	r3, r2
 8005506:	434b      	muls	r3, r1
 8005508:	617b      	str	r3, [r7, #20]
        break;
 800550a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800550c:	4b14      	ldr	r3, [pc, #80]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	0f5b      	lsrs	r3, r3, #29
 8005512:	2207      	movs	r2, #7
 8005514:	4013      	ands	r3, r2
 8005516:	3301      	adds	r3, #1
 8005518:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f7fa fe0b 	bl	8000138 <__udivsi3>
 8005522:	0003      	movs	r3, r0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e015      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005528:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2238      	movs	r2, #56	@ 0x38
 800552e:	4013      	ands	r3, r2
 8005530:	2b20      	cmp	r3, #32
 8005532:	d103      	bne.n	800553c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e00b      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800553c:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <HAL_RCC_GetSysClockFreq+0xf8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2238      	movs	r2, #56	@ 0x38
 8005542:	4013      	ands	r3, r2
 8005544:	2b18      	cmp	r3, #24
 8005546:	d103      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005548:	23fa      	movs	r3, #250	@ 0xfa
 800554a:	01db      	lsls	r3, r3, #7
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e001      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005554:	693b      	ldr	r3, [r7, #16]
}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b006      	add	sp, #24
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	40021000 	.word	0x40021000
 8005564:	00f42400 	.word	0x00f42400
 8005568:	007a1200 	.word	0x007a1200

0800556c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005570:	4b02      	ldr	r3, [pc, #8]	@ (800557c <HAL_RCC_GetHCLKFreq+0x10>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	20000000 	.word	0x20000000

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b5b0      	push	{r4, r5, r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005584:	f7ff fff2 	bl	800556c <HAL_RCC_GetHCLKFreq>
 8005588:	0004      	movs	r4, r0
 800558a:	f7ff fb49 	bl	8004c20 <LL_RCC_GetAPB1Prescaler>
 800558e:	0003      	movs	r3, r0
 8005590:	0b1a      	lsrs	r2, r3, #12
 8005592:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	58d3      	ldr	r3, [r2, r3]
 8005598:	221f      	movs	r2, #31
 800559a:	4013      	ands	r3, r2
 800559c:	40dc      	lsrs	r4, r3
 800559e:	0023      	movs	r3, r4
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bdb0      	pop	{r4, r5, r7, pc}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	08009f50 	.word	0x08009f50

080055ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80055b4:	2313      	movs	r3, #19
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055bc:	2312      	movs	r3, #18
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	4013      	ands	r3, r2
 80055ce:	d100      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80055d0:	e0a3      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d2:	2011      	movs	r0, #17
 80055d4:	183b      	adds	r3, r7, r0
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055da:	4b7f      	ldr	r3, [pc, #508]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055de:	2380      	movs	r3, #128	@ 0x80
 80055e0:	055b      	lsls	r3, r3, #21
 80055e2:	4013      	ands	r3, r2
 80055e4:	d110      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	4b7c      	ldr	r3, [pc, #496]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ea:	4b7b      	ldr	r3, [pc, #492]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	0549      	lsls	r1, r1, #21
 80055f0:	430a      	orrs	r2, r1
 80055f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80055f4:	4b78      	ldr	r3, [pc, #480]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055f8:	2380      	movs	r3, #128	@ 0x80
 80055fa:	055b      	lsls	r3, r3, #21
 80055fc:	4013      	ands	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005602:	183b      	adds	r3, r7, r0
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005608:	4b74      	ldr	r3, [pc, #464]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b73      	ldr	r3, [pc, #460]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	0049      	lsls	r1, r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005616:	f7fd fedb 	bl	80033d0 <HAL_GetTick>
 800561a:	0003      	movs	r3, r0
 800561c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561e:	e00b      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005620:	f7fd fed6 	bl	80033d0 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d904      	bls.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800562e:	2313      	movs	r3, #19
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2203      	movs	r2, #3
 8005634:	701a      	strb	r2, [r3, #0]
        break;
 8005636:	e005      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005638:	4b68      	ldr	r3, [pc, #416]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4013      	ands	r3, r2
 8005642:	d0ed      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005644:	2313      	movs	r3, #19
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d154      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800564e:	4b62      	ldr	r3, [pc, #392]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005650:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005652:	23c0      	movs	r3, #192	@ 0xc0
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4013      	ands	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d019      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	429a      	cmp	r2, r3
 8005668:	d014      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800566a:	4b5b      	ldr	r3, [pc, #364]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566e:	4a5c      	ldr	r2, [pc, #368]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005670:	4013      	ands	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005674:	4b58      	ldr	r3, [pc, #352]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005676:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005678:	4b57      	ldr	r3, [pc, #348]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800567a:	2180      	movs	r1, #128	@ 0x80
 800567c:	0249      	lsls	r1, r1, #9
 800567e:	430a      	orrs	r2, r1
 8005680:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005682:	4b55      	ldr	r3, [pc, #340]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005684:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005686:	4b54      	ldr	r3, [pc, #336]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005688:	4956      	ldr	r1, [pc, #344]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800568a:	400a      	ands	r2, r1
 800568c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800568e:	4b52      	ldr	r3, [pc, #328]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2201      	movs	r2, #1
 8005698:	4013      	ands	r3, r2
 800569a:	d016      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd fe98 	bl	80033d0 <HAL_GetTick>
 80056a0:	0003      	movs	r3, r0
 80056a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a4:	e00c      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fd fe93 	bl	80033d0 <HAL_GetTick>
 80056aa:	0002      	movs	r2, r0
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	4a4d      	ldr	r2, [pc, #308]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d904      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80056b6:	2313      	movs	r3, #19
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2203      	movs	r2, #3
 80056bc:	701a      	strb	r2, [r3, #0]
            break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c0:	4b45      	ldr	r3, [pc, #276]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c4:	2202      	movs	r2, #2
 80056c6:	4013      	ands	r3, r2
 80056c8:	d0ed      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80056ca:	2313      	movs	r3, #19
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d4:	4b40      	ldr	r3, [pc, #256]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d8:	4a41      	ldr	r2, [pc, #260]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80056da:	4013      	ands	r3, r2
 80056dc:	0019      	movs	r1, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	4b3d      	ldr	r3, [pc, #244]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056e4:	430a      	orrs	r2, r1
 80056e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056e8:	e00c      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056ea:	2312      	movs	r3, #18
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	2213      	movs	r2, #19
 80056f0:	18ba      	adds	r2, r7, r2
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	e005      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	2312      	movs	r3, #18
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	2213      	movs	r2, #19
 80056fe:	18ba      	adds	r2, r7, r2
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005704:	2311      	movs	r3, #17
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570e:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005712:	4b31      	ldr	r3, [pc, #196]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005714:	4935      	ldr	r1, [pc, #212]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005716:	400a      	ands	r2, r1
 8005718:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	4013      	ands	r3, r2
 8005722:	d009      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005724:	4b2c      	ldr	r3, [pc, #176]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005728:	2203      	movs	r2, #3
 800572a:	4393      	bics	r3, r2
 800572c:	0019      	movs	r1, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	4b29      	ldr	r3, [pc, #164]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005734:	430a      	orrs	r2, r1
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2220      	movs	r2, #32
 800573e:	4013      	ands	r3, r2
 8005740:	d009      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005742:	4b25      	ldr	r3, [pc, #148]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005748:	4013      	ands	r3, r2
 800574a:	0019      	movs	r1, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	4b21      	ldr	r3, [pc, #132]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005752:	430a      	orrs	r2, r1
 8005754:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	2380      	movs	r3, #128	@ 0x80
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4013      	ands	r3, r2
 8005760:	d015      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005762:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	0899      	lsrs	r1, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005770:	430a      	orrs	r2, r1
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	2380      	movs	r3, #128	@ 0x80
 800577a:	05db      	lsls	r3, r3, #23
 800577c:	429a      	cmp	r2, r3
 800577e:	d106      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005780:	4b15      	ldr	r3, [pc, #84]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	4b14      	ldr	r3, [pc, #80]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005786:	2180      	movs	r1, #128	@ 0x80
 8005788:	0249      	lsls	r1, r1, #9
 800578a:	430a      	orrs	r2, r1
 800578c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	@ 0x80
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	4013      	ands	r3, r2
 8005798:	d016      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800579a:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579e:	4a15      	ldr	r2, [pc, #84]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	0019      	movs	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057aa:	430a      	orrs	r2, r1
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	2380      	movs	r3, #128	@ 0x80
 80057b4:	01db      	lsls	r3, r3, #7
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d106      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80057ba:	4b07      	ldr	r3, [pc, #28]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80057c0:	2180      	movs	r1, #128	@ 0x80
 80057c2:	0249      	lsls	r1, r1, #9
 80057c4:	430a      	orrs	r2, r1
 80057c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80057c8:	2312      	movs	r3, #18
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	781b      	ldrb	r3, [r3, #0]
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b006      	add	sp, #24
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40007000 	.word	0x40007000
 80057e0:	fffffcff 	.word	0xfffffcff
 80057e4:	fffeffff 	.word	0xfffeffff
 80057e8:	00001388 	.word	0x00001388
 80057ec:	efffffff 	.word	0xefffffff
 80057f0:	ffffcfff 	.word	0xffffcfff
 80057f4:	ffff3fff 	.word	0xffff3fff

080057f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e0a8      	b.n	800595c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	2382      	movs	r3, #130	@ 0x82
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d009      	beq.n	8005832 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	61da      	str	r2, [r3, #28]
 8005824:	e005      	b.n	8005832 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	225d      	movs	r2, #93	@ 0x5d
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	225c      	movs	r2, #92	@ 0x5c
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f7fd f8a8 	bl	80029a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	225d      	movs	r2, #93	@ 0x5d
 8005858:	2102      	movs	r1, #2
 800585a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2140      	movs	r1, #64	@ 0x40
 8005868:	438a      	bics	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	23e0      	movs	r3, #224	@ 0xe0
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	429a      	cmp	r2, r3
 8005876:	d902      	bls.n	800587e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e002      	b.n	8005884 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	015b      	lsls	r3, r3, #5
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	23f0      	movs	r3, #240	@ 0xf0
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	429a      	cmp	r2, r3
 800588e:	d008      	beq.n	80058a2 <HAL_SPI_Init+0xaa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	23e0      	movs	r3, #224	@ 0xe0
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	429a      	cmp	r2, r3
 800589a:	d002      	beq.n	80058a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2382      	movs	r3, #130	@ 0x82
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	401a      	ands	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6899      	ldr	r1, [r3, #8]
 80058b0:	2384      	movs	r3, #132	@ 0x84
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	400b      	ands	r3, r1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2102      	movs	r1, #2
 80058be:	400b      	ands	r3, r1
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2101      	movs	r1, #1
 80058c8:	400b      	ands	r3, r1
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6999      	ldr	r1, [r3, #24]
 80058d0:	2380      	movs	r3, #128	@ 0x80
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	400b      	ands	r3, r1
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	2138      	movs	r1, #56	@ 0x38
 80058de:	400b      	ands	r3, r1
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	2180      	movs	r1, #128	@ 0x80
 80058e8:	400b      	ands	r3, r1
 80058ea:	431a      	orrs	r2, r3
 80058ec:	0011      	movs	r1, r2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058f2:	2380      	movs	r3, #128	@ 0x80
 80058f4:	019b      	lsls	r3, r3, #6
 80058f6:	401a      	ands	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	2204      	movs	r2, #4
 8005908:	401a      	ands	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	2110      	movs	r1, #16
 8005910:	400b      	ands	r3, r1
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005918:	2108      	movs	r1, #8
 800591a:	400b      	ands	r3, r1
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68d9      	ldr	r1, [r3, #12]
 8005922:	23f0      	movs	r3, #240	@ 0xf0
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	400b      	ands	r3, r1
 8005928:	431a      	orrs	r2, r3
 800592a:	0011      	movs	r1, r2
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	2380      	movs	r3, #128	@ 0x80
 8005930:	015b      	lsls	r3, r3, #5
 8005932:	401a      	ands	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4907      	ldr	r1, [pc, #28]	@ (8005964 <HAL_SPI_Init+0x16c>)
 8005948:	400a      	ands	r2, r1
 800594a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	225d      	movs	r2, #93	@ 0x5d
 8005956:	2101      	movs	r1, #1
 8005958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b004      	add	sp, #16
 8005962:	bd80      	pop	{r7, pc}
 8005964:	fffff7ff 	.word	0xfffff7ff

08005968 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	1dbb      	adds	r3, r7, #6
 8005976:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005978:	231f      	movs	r3, #31
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	225c      	movs	r2, #92	@ 0x5c
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_SPI_Transmit+0x26>
 800598a:	2302      	movs	r3, #2
 800598c:	e147      	b.n	8005c1e <HAL_SPI_Transmit+0x2b6>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	225c      	movs	r2, #92	@ 0x5c
 8005992:	2101      	movs	r1, #1
 8005994:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005996:	f7fd fd1b 	bl	80033d0 <HAL_GetTick>
 800599a:	0003      	movs	r3, r0
 800599c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800599e:	2316      	movs	r3, #22
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	1dba      	adds	r2, r7, #6
 80059a4:	8812      	ldrh	r2, [r2, #0]
 80059a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	225d      	movs	r2, #93	@ 0x5d
 80059ac:	5c9b      	ldrb	r3, [r3, r2]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d004      	beq.n	80059be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80059b4:	231f      	movs	r3, #31
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	2202      	movs	r2, #2
 80059ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80059bc:	e128      	b.n	8005c10 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_SPI_Transmit+0x64>
 80059c4:	1dbb      	adds	r3, r7, #6
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80059cc:	231f      	movs	r3, #31
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80059d4:	e11c      	b.n	8005c10 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	225d      	movs	r2, #93	@ 0x5d
 80059da:	2103      	movs	r1, #3
 80059dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1dba      	adds	r2, r7, #6
 80059ee:	8812      	ldrh	r2, [r2, #0]
 80059f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1dba      	adds	r2, r7, #6
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2244      	movs	r2, #68	@ 0x44
 8005a04:	2100      	movs	r1, #0
 8005a06:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2246      	movs	r2, #70	@ 0x46
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d110      	bne.n	8005a4a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2140      	movs	r1, #64	@ 0x40
 8005a34:	438a      	bics	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2180      	movs	r1, #128	@ 0x80
 8005a44:	01c9      	lsls	r1, r1, #7
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2240      	movs	r2, #64	@ 0x40
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d007      	beq.n	8005a68 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2140      	movs	r1, #64	@ 0x40
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	23e0      	movs	r3, #224	@ 0xe0
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d952      	bls.n	8005b1a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <HAL_SPI_Transmit+0x11e>
 8005a7c:	2316      	movs	r3, #22
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d143      	bne.n	8005b0e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aaa:	e030      	b.n	8005b0e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d112      	bne.n	8005ae0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	881a      	ldrh	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ade:	e016      	b.n	8005b0e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae0:	f7fd fc76 	bl	80033d0 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d802      	bhi.n	8005af6 <HAL_SPI_Transmit+0x18e>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	d102      	bne.n	8005afc <HAL_SPI_Transmit+0x194>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d108      	bne.n	8005b0e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005afc:	231f      	movs	r3, #31
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	2203      	movs	r2, #3
 8005b02:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	225d      	movs	r2, #93	@ 0x5d
 8005b08:	2101      	movs	r1, #1
 8005b0a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005b0c:	e080      	b.n	8005c10 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1c9      	bne.n	8005aac <HAL_SPI_Transmit+0x144>
 8005b18:	e053      	b.n	8005bc2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_SPI_Transmit+0x1c4>
 8005b22:	2316      	movs	r3, #22
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d145      	bne.n	8005bb8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005b52:	e031      	b.n	8005bb8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d113      	bne.n	8005b8a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b88:	e016      	b.n	8005bb8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8a:	f7fd fc21 	bl	80033d0 <HAL_GetTick>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d802      	bhi.n	8005ba0 <HAL_SPI_Transmit+0x238>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Transmit+0x23e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d108      	bne.n	8005bb8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005ba6:	231f      	movs	r3, #31
 8005ba8:	18fb      	adds	r3, r7, r3
 8005baa:	2203      	movs	r2, #3
 8005bac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	225d      	movs	r2, #93	@ 0x5d
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	5499      	strb	r1, [r3, r2]
          goto error;
 8005bb6:	e02b      	b.n	8005c10 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1c8      	bne.n	8005b54 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 fcef 	bl	80065ac <SPI_EndRxTxTransaction>
 8005bce:	1e03      	subs	r3, r0, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005bfe:	231f      	movs	r3, #31
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2201      	movs	r2, #1
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e003      	b.n	8005c10 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	225d      	movs	r2, #93	@ 0x5d
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	225c      	movs	r2, #92	@ 0x5c
 8005c14:	2100      	movs	r1, #0
 8005c16:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c18:	231f      	movs	r3, #31
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	781b      	ldrb	r3, [r3, #0]
}
 8005c1e:	0018      	movs	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b008      	add	sp, #32
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b089      	sub	sp, #36	@ 0x24
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	1dbb      	adds	r3, r7, #6
 8005c36:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c38:	2117      	movs	r1, #23
 8005c3a:	187b      	adds	r3, r7, r1
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	225d      	movs	r2, #93	@ 0x5d
 8005c44:	5c9b      	ldrb	r3, [r3, r2]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d003      	beq.n	8005c54 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8005c4c:	187b      	adds	r3, r7, r1
 8005c4e:	2202      	movs	r2, #2
 8005c50:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c52:	e12b      	b.n	8005eac <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	2382      	movs	r3, #130	@ 0x82
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d113      	bne.n	8005c88 <HAL_SPI_Receive+0x60>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	225d      	movs	r2, #93	@ 0x5d
 8005c6c:	2104      	movs	r1, #4
 8005c6e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	881c      	ldrh	r4, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	0023      	movs	r3, r4
 8005c80:	f000 f924 	bl	8005ecc <HAL_SPI_TransmitReceive>
 8005c84:	0003      	movs	r3, r0
 8005c86:	e118      	b.n	8005eba <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	225c      	movs	r2, #92	@ 0x5c
 8005c8c:	5c9b      	ldrb	r3, [r3, r2]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_SPI_Receive+0x6e>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e111      	b.n	8005eba <HAL_SPI_Receive+0x292>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	225c      	movs	r2, #92	@ 0x5c
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9e:	f7fd fb97 	bl	80033d0 <HAL_GetTick>
 8005ca2:	0003      	movs	r3, r0
 8005ca4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_SPI_Receive+0x8c>
 8005cac:	1dbb      	adds	r3, r7, #6
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005cb4:	2317      	movs	r3, #23
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]
    goto error;
 8005cbc:	e0f6      	b.n	8005eac <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	225d      	movs	r2, #93	@ 0x5d
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1dba      	adds	r2, r7, #6
 8005cd6:	2144      	movs	r1, #68	@ 0x44
 8005cd8:	8812      	ldrh	r2, [r2, #0]
 8005cda:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1dba      	adds	r2, r7, #6
 8005ce0:	2146      	movs	r1, #70	@ 0x46
 8005ce2:	8812      	ldrh	r2, [r2, #0]
 8005ce4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	23e0      	movs	r3, #224	@ 0xe0
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d908      	bls.n	8005d22 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	496a      	ldr	r1, [pc, #424]	@ (8005ec4 <HAL_SPI_Receive+0x29c>)
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	e008      	b.n	8005d34 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2180      	movs	r1, #128	@ 0x80
 8005d2e:	0149      	lsls	r1, r1, #5
 8005d30:	430a      	orrs	r2, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	2380      	movs	r3, #128	@ 0x80
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d10f      	bne.n	8005d60 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2140      	movs	r1, #64	@ 0x40
 8005d4c:	438a      	bics	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	495b      	ldr	r1, [pc, #364]	@ (8005ec8 <HAL_SPI_Receive+0x2a0>)
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2240      	movs	r2, #64	@ 0x40
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d007      	beq.n	8005d7e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2140      	movs	r1, #64	@ 0x40
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	23e0      	movs	r3, #224	@ 0xe0
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d900      	bls.n	8005d8c <HAL_SPI_Receive+0x164>
 8005d8a:	e071      	b.n	8005e70 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d8c:	e035      	b.n	8005dfa <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2201      	movs	r2, #1
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d117      	bne.n	8005dcc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	001a      	movs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2246      	movs	r2, #70	@ 0x46
 8005dbc:	5a9b      	ldrh	r3, [r3, r2]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2246      	movs	r2, #70	@ 0x46
 8005dc8:	5299      	strh	r1, [r3, r2]
 8005dca:	e016      	b.n	8005dfa <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dcc:	f7fd fb00 	bl	80033d0 <HAL_GetTick>
 8005dd0:	0002      	movs	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d802      	bhi.n	8005de2 <HAL_SPI_Receive+0x1ba>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Receive+0x1c0>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d108      	bne.n	8005dfa <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8005de8:	2317      	movs	r3, #23
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	2203      	movs	r2, #3
 8005dee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	225d      	movs	r2, #93	@ 0x5d
 8005df4:	2101      	movs	r1, #1
 8005df6:	5499      	strb	r1, [r3, r2]
          goto error;
 8005df8:	e058      	b.n	8005eac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2246      	movs	r2, #70	@ 0x46
 8005dfe:	5a9b      	ldrh	r3, [r3, r2]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1c3      	bne.n	8005d8e <HAL_SPI_Receive+0x166>
 8005e06:	e039      	b.n	8005e7c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d115      	bne.n	8005e42 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e20:	b292      	uxth	r2, r2
 8005e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2246      	movs	r2, #70	@ 0x46
 8005e32:	5a9b      	ldrh	r3, [r3, r2]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b299      	uxth	r1, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2246      	movs	r2, #70	@ 0x46
 8005e3e:	5299      	strh	r1, [r3, r2]
 8005e40:	e016      	b.n	8005e70 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e42:	f7fd fac5 	bl	80033d0 <HAL_GetTick>
 8005e46:	0002      	movs	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d802      	bhi.n	8005e58 <HAL_SPI_Receive+0x230>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	d102      	bne.n	8005e5e <HAL_SPI_Receive+0x236>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d108      	bne.n	8005e70 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8005e5e:	2317      	movs	r3, #23
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	2203      	movs	r2, #3
 8005e64:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	225d      	movs	r2, #93	@ 0x5d
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	5499      	strb	r1, [r3, r2]
          goto error;
 8005e6e:	e01d      	b.n	8005eac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2246      	movs	r2, #70	@ 0x46
 8005e74:	5a9b      	ldrh	r3, [r3, r2]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1c5      	bne.n	8005e08 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	0018      	movs	r0, r3
 8005e84:	f000 fb34 	bl	80064f0 <SPI_EndRxTransaction>
 8005e88:	1e03      	subs	r3, r0, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8005e9a:	2317      	movs	r3, #23
 8005e9c:	18fb      	adds	r3, r7, r3
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e003      	b.n	8005eac <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	225d      	movs	r2, #93	@ 0x5d
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	225c      	movs	r2, #92	@ 0x5c
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005eb4:	2317      	movs	r3, #23
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	781b      	ldrb	r3, [r3, #0]
}
 8005eba:	0018      	movs	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b007      	add	sp, #28
 8005ec0:	bd90      	pop	{r4, r7, pc}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	ffffefff 	.word	0xffffefff
 8005ec8:	ffffbfff 	.word	0xffffbfff

08005ecc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	001a      	movs	r2, r3
 8005eda:	1cbb      	adds	r3, r7, #2
 8005edc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ee2:	2323      	movs	r3, #35	@ 0x23
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	225c      	movs	r2, #92	@ 0x5c
 8005eee:	5c9b      	ldrb	r3, [r3, r2]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x2c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e1c4      	b.n	8006282 <HAL_SPI_TransmitReceive+0x3b6>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	225c      	movs	r2, #92	@ 0x5c
 8005efc:	2101      	movs	r1, #1
 8005efe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f00:	f7fd fa66 	bl	80033d0 <HAL_GetTick>
 8005f04:	0003      	movs	r3, r0
 8005f06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f08:	201b      	movs	r0, #27
 8005f0a:	183b      	adds	r3, r7, r0
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	215d      	movs	r1, #93	@ 0x5d
 8005f10:	5c52      	ldrb	r2, [r2, r1]
 8005f12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f1a:	2312      	movs	r3, #18
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	1cba      	adds	r2, r7, #2
 8005f20:	8812      	ldrh	r2, [r2, #0]
 8005f22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f24:	183b      	adds	r3, r7, r0
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d011      	beq.n	8005f50 <HAL_SPI_TransmitReceive+0x84>
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	2382      	movs	r3, #130	@ 0x82
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d107      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x7a>
 8005f3e:	183b      	adds	r3, r7, r0
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d004      	beq.n	8005f50 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005f46:	2323      	movs	r3, #35	@ 0x23
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f4e:	e191      	b.n	8006274 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <HAL_SPI_TransmitReceive+0x98>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_SPI_TransmitReceive+0x98>
 8005f5c:	1cbb      	adds	r3, r7, #2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005f64:	2323      	movs	r3, #35	@ 0x23
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f6c:	e182      	b.n	8006274 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	225d      	movs	r2, #93	@ 0x5d
 8005f72:	5c9b      	ldrb	r3, [r3, r2]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d003      	beq.n	8005f82 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	225d      	movs	r2, #93	@ 0x5d
 8005f7e:	2105      	movs	r1, #5
 8005f80:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1cba      	adds	r2, r7, #2
 8005f92:	2146      	movs	r1, #70	@ 0x46
 8005f94:	8812      	ldrh	r2, [r2, #0]
 8005f96:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1cba      	adds	r2, r7, #2
 8005f9c:	2144      	movs	r1, #68	@ 0x44
 8005f9e:	8812      	ldrh	r2, [r2, #0]
 8005fa0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1cba      	adds	r2, r7, #2
 8005fac:	8812      	ldrh	r2, [r2, #0]
 8005fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	1cba      	adds	r2, r7, #2
 8005fb4:	8812      	ldrh	r2, [r2, #0]
 8005fb6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	23e0      	movs	r3, #224	@ 0xe0
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d908      	bls.n	8005fe2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	49ac      	ldr	r1, [pc, #688]	@ (800628c <HAL_SPI_TransmitReceive+0x3c0>)
 8005fdc:	400a      	ands	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
 8005fe0:	e008      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2180      	movs	r1, #128	@ 0x80
 8005fee:	0149      	lsls	r1, r1, #5
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2240      	movs	r2, #64	@ 0x40
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d007      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2140      	movs	r1, #64	@ 0x40
 800600e:	430a      	orrs	r2, r1
 8006010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	23e0      	movs	r3, #224	@ 0xe0
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	429a      	cmp	r2, r3
 800601c:	d800      	bhi.n	8006020 <HAL_SPI_TransmitReceive+0x154>
 800601e:	e083      	b.n	8006128 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x168>
 8006028:	2312      	movs	r3, #18
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d000      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x168>
 8006032:	e06d      	b.n	8006110 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	881a      	ldrh	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006044:	1c9a      	adds	r2, r3, #2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006058:	e05a      	b.n	8006110 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2202      	movs	r2, #2
 8006062:	4013      	ands	r3, r2
 8006064:	2b02      	cmp	r3, #2
 8006066:	d11b      	bne.n	80060a0 <HAL_SPI_TransmitReceive+0x1d4>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <HAL_SPI_TransmitReceive+0x1d4>
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	2b01      	cmp	r3, #1
 8006076:	d113      	bne.n	80060a0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2201      	movs	r2, #1
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d11c      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x21c>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2246      	movs	r2, #70	@ 0x46
 80060b2:	5a9b      	ldrh	r3, [r3, r2]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2246      	movs	r2, #70	@ 0x46
 80060d6:	5a9b      	ldrh	r3, [r3, r2]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b299      	uxth	r1, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2246      	movs	r2, #70	@ 0x46
 80060e2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060e4:	2301      	movs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060e8:	f7fd f972 	bl	80033d0 <HAL_GetTick>
 80060ec:	0002      	movs	r2, r0
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d80b      	bhi.n	8006110 <HAL_SPI_TransmitReceive+0x244>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	3301      	adds	r3, #1
 80060fc:	d008      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80060fe:	2323      	movs	r3, #35	@ 0x23
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2203      	movs	r2, #3
 8006104:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	225d      	movs	r2, #93	@ 0x5d
 800610a:	2101      	movs	r1, #1
 800610c:	5499      	strb	r1, [r3, r2]
        goto error;
 800610e:	e0b1      	b.n	8006274 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d19f      	bne.n	800605a <HAL_SPI_TransmitReceive+0x18e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2246      	movs	r2, #70	@ 0x46
 800611e:	5a9b      	ldrh	r3, [r3, r2]
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d199      	bne.n	800605a <HAL_SPI_TransmitReceive+0x18e>
 8006126:	e089      	b.n	800623c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_SPI_TransmitReceive+0x270>
 8006130:	2312      	movs	r3, #18
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d000      	beq.n	800613c <HAL_SPI_TransmitReceive+0x270>
 800613a:	e074      	b.n	8006226 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	7812      	ldrb	r2, [r2, #0]
 8006148:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006162:	e060      	b.n	8006226 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2202      	movs	r2, #2
 800616c:	4013      	ands	r3, r2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d11c      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x2e0>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d017      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x2e0>
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	2b01      	cmp	r3, #1
 8006180:	d114      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2201      	movs	r2, #1
 80061b4:	4013      	ands	r3, r2
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d11e      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x32c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2246      	movs	r2, #70	@ 0x46
 80061be:	5a9b      	ldrh	r3, [r3, r2]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d018      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	001a      	movs	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2246      	movs	r2, #70	@ 0x46
 80061e6:	5a9b      	ldrh	r3, [r3, r2]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b299      	uxth	r1, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2246      	movs	r2, #70	@ 0x46
 80061f2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f4:	2301      	movs	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061f8:	f7fd f8ea 	bl	80033d0 <HAL_GetTick>
 80061fc:	0002      	movs	r2, r0
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006204:	429a      	cmp	r2, r3
 8006206:	d802      	bhi.n	800620e <HAL_SPI_TransmitReceive+0x342>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	3301      	adds	r3, #1
 800620c:	d102      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x348>
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	2b00      	cmp	r3, #0
 8006212:	d108      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8006214:	2323      	movs	r3, #35	@ 0x23
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2203      	movs	r2, #3
 800621a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	225d      	movs	r2, #93	@ 0x5d
 8006220:	2101      	movs	r1, #1
 8006222:	5499      	strb	r1, [r3, r2]
        goto error;
 8006224:	e026      	b.n	8006274 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d199      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x298>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2246      	movs	r2, #70	@ 0x46
 8006234:	5a9b      	ldrh	r3, [r3, r2]
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d193      	bne.n	8006164 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	0018      	movs	r0, r3
 8006244:	f000 f9b2 	bl	80065ac <SPI_EndRxTxTransaction>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d006      	beq.n	800625a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800624c:	2323      	movs	r3, #35	@ 0x23
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8006262:	2323      	movs	r3, #35	@ 0x23
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e003      	b.n	8006274 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	225d      	movs	r2, #93	@ 0x5d
 8006270:	2101      	movs	r1, #1
 8006272:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	225c      	movs	r2, #92	@ 0x5c
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800627c:	2323      	movs	r3, #35	@ 0x23
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b00a      	add	sp, #40	@ 0x28
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	ffffefff 	.word	0xffffefff

08006290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	1dfb      	adds	r3, r7, #7
 800629e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062a0:	f7fd f896 	bl	80033d0 <HAL_GetTick>
 80062a4:	0002      	movs	r2, r0
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	18d3      	adds	r3, r2, r3
 80062ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062b0:	f7fd f88e 	bl	80033d0 <HAL_GetTick>
 80062b4:	0003      	movs	r3, r0
 80062b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062b8:	4b3a      	ldr	r3, [pc, #232]	@ (80063a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	015b      	lsls	r3, r3, #5
 80062be:	0d1b      	lsrs	r3, r3, #20
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	4353      	muls	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c6:	e058      	b.n	800637a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	d055      	beq.n	800637a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062ce:	f7fd f87f 	bl	80033d0 <HAL_GetTick>
 80062d2:	0002      	movs	r2, r0
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d902      	bls.n	80062e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d142      	bne.n	800636a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	21e0      	movs	r1, #224	@ 0xe0
 80062f0:	438a      	bics	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	2382      	movs	r3, #130	@ 0x82
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d113      	bne.n	8006328 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	2380      	movs	r3, #128	@ 0x80
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	429a      	cmp	r2, r3
 800630a:	d005      	beq.n	8006318 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	2380      	movs	r3, #128	@ 0x80
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	429a      	cmp	r2, r3
 8006316:	d107      	bne.n	8006328 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2140      	movs	r1, #64	@ 0x40
 8006324:	438a      	bics	r2, r1
 8006326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800632c:	2380      	movs	r3, #128	@ 0x80
 800632e:	019b      	lsls	r3, r3, #6
 8006330:	429a      	cmp	r2, r3
 8006332:	d110      	bne.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	491a      	ldr	r1, [pc, #104]	@ (80063a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006340:	400a      	ands	r2, r1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2180      	movs	r1, #128	@ 0x80
 8006350:	0189      	lsls	r1, r1, #6
 8006352:	430a      	orrs	r2, r1
 8006354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	225d      	movs	r2, #93	@ 0x5d
 800635a:	2101      	movs	r1, #1
 800635c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	225c      	movs	r2, #92	@ 0x5c
 8006362:	2100      	movs	r1, #0
 8006364:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e017      	b.n	800639a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3b01      	subs	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	4013      	ands	r3, r2
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	425a      	negs	r2, r3
 800638a:	4153      	adcs	r3, r2
 800638c:	b2db      	uxtb	r3, r3
 800638e:	001a      	movs	r2, r3
 8006390:	1dfb      	adds	r3, r7, #7
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d197      	bne.n	80062c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	0018      	movs	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	b008      	add	sp, #32
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	20000000 	.word	0x20000000
 80063a8:	ffffdfff 	.word	0xffffdfff

080063ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	@ 0x28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063ba:	2317      	movs	r3, #23
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063c2:	f7fd f805 	bl	80033d0 <HAL_GetTick>
 80063c6:	0002      	movs	r2, r0
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	18d3      	adds	r3, r2, r3
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80063d2:	f7fc fffd 	bl	80033d0 <HAL_GetTick>
 80063d6:	0003      	movs	r3, r0
 80063d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063e2:	4b41      	ldr	r3, [pc, #260]	@ (80064e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	0013      	movs	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	189b      	adds	r3, r3, r2
 80063ec:	00da      	lsls	r2, r3, #3
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	0d1b      	lsrs	r3, r3, #20
 80063f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f4:	4353      	muls	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063f8:	e068      	b.n	80064cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	23c0      	movs	r3, #192	@ 0xc0
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	429a      	cmp	r2, r3
 8006402:	d10a      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d107      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	b2da      	uxtb	r2, r3
 8006410:	2117      	movs	r1, #23
 8006412:	187b      	adds	r3, r7, r1
 8006414:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006416:	187b      	adds	r3, r7, r1
 8006418:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	d055      	beq.n	80064cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006420:	f7fc ffd6 	bl	80033d0 <HAL_GetTick>
 8006424:	0002      	movs	r2, r0
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642c:	429a      	cmp	r2, r3
 800642e:	d902      	bls.n	8006436 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d142      	bne.n	80064bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	21e0      	movs	r1, #224	@ 0xe0
 8006442:	438a      	bics	r2, r1
 8006444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	2382      	movs	r3, #130	@ 0x82
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	429a      	cmp	r2, r3
 8006450:	d113      	bne.n	800647a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	429a      	cmp	r2, r3
 800645c:	d005      	beq.n	800646a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	429a      	cmp	r2, r3
 8006468:	d107      	bne.n	800647a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2140      	movs	r1, #64	@ 0x40
 8006476:	438a      	bics	r2, r1
 8006478:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800647e:	2380      	movs	r3, #128	@ 0x80
 8006480:	019b      	lsls	r3, r3, #6
 8006482:	429a      	cmp	r2, r3
 8006484:	d110      	bne.n	80064a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4916      	ldr	r1, [pc, #88]	@ (80064ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006492:	400a      	ands	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2180      	movs	r1, #128	@ 0x80
 80064a2:	0189      	lsls	r1, r1, #6
 80064a4:	430a      	orrs	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	225d      	movs	r2, #93	@ 0x5d
 80064ac:	2101      	movs	r1, #1
 80064ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	225c      	movs	r2, #92	@ 0x5c
 80064b4:	2100      	movs	r1, #0
 80064b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e010      	b.n	80064de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d18e      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b00a      	add	sp, #40	@ 0x28
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	20000000 	.word	0x20000000
 80064ec:	ffffdfff 	.word	0xffffdfff

080064f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	2382      	movs	r3, #130	@ 0x82
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d113      	bne.n	8006530 <SPI_EndRxTransaction+0x40>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	2380      	movs	r3, #128	@ 0x80
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	429a      	cmp	r2, r3
 8006512:	d005      	beq.n	8006520 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	2380      	movs	r3, #128	@ 0x80
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	429a      	cmp	r2, r3
 800651e:	d107      	bne.n	8006530 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2140      	movs	r1, #64	@ 0x40
 800652c:	438a      	bics	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	0013      	movs	r3, r2
 800653a:	2200      	movs	r2, #0
 800653c:	2180      	movs	r1, #128	@ 0x80
 800653e:	f7ff fea7 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 8006542:	1e03      	subs	r3, r0, #0
 8006544:	d007      	beq.n	8006556 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654a:	2220      	movs	r2, #32
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e026      	b.n	80065a4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	2382      	movs	r3, #130	@ 0x82
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	429a      	cmp	r2, r3
 8006560:	d11f      	bne.n	80065a2 <SPI_EndRxTransaction+0xb2>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	2380      	movs	r3, #128	@ 0x80
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	429a      	cmp	r2, r3
 800656c:	d005      	beq.n	800657a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	429a      	cmp	r2, r3
 8006578:	d113      	bne.n	80065a2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	23c0      	movs	r3, #192	@ 0xc0
 800657e:	00d9      	lsls	r1, r3, #3
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	0013      	movs	r3, r2
 8006588:	2200      	movs	r2, #0
 800658a:	f7ff ff0f 	bl	80063ac <SPI_WaitFifoStateUntilTimeout>
 800658e:	1e03      	subs	r3, r0, #0
 8006590:	d007      	beq.n	80065a2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006596:	2220      	movs	r2, #32
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e000      	b.n	80065a4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	0018      	movs	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b004      	add	sp, #16
 80065aa:	bd80      	pop	{r7, pc}

080065ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	23c0      	movs	r3, #192	@ 0xc0
 80065bc:	0159      	lsls	r1, r3, #5
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	0013      	movs	r3, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	f7ff fef0 	bl	80063ac <SPI_WaitFifoStateUntilTimeout>
 80065cc:	1e03      	subs	r3, r0, #0
 80065ce:	d007      	beq.n	80065e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d4:	2220      	movs	r2, #32
 80065d6:	431a      	orrs	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e027      	b.n	8006630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	0013      	movs	r3, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	2180      	movs	r1, #128	@ 0x80
 80065ee:	f7ff fe4f 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 80065f2:	1e03      	subs	r3, r0, #0
 80065f4:	d007      	beq.n	8006606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065fa:	2220      	movs	r2, #32
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e014      	b.n	8006630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	23c0      	movs	r3, #192	@ 0xc0
 800660a:	00d9      	lsls	r1, r3, #3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	0013      	movs	r3, r2
 8006614:	2200      	movs	r2, #0
 8006616:	f7ff fec9 	bl	80063ac <SPI_WaitFifoStateUntilTimeout>
 800661a:	1e03      	subs	r3, r0, #0
 800661c:	d007      	beq.n	800662e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006622:	2220      	movs	r2, #32
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e000      	b.n	8006630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b004      	add	sp, #16
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e046      	b.n	80066d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2288      	movs	r2, #136	@ 0x88
 800664e:	589b      	ldr	r3, [r3, r2]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2284      	movs	r2, #132	@ 0x84
 8006658:	2100      	movs	r1, #0
 800665a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f7fc fb3a 	bl	8002cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2288      	movs	r2, #136	@ 0x88
 8006668:	2124      	movs	r1, #36	@ 0x24
 800666a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2101      	movs	r1, #1
 8006678:	438a      	bics	r2, r1
 800667a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	0018      	movs	r0, r3
 8006688:	f000 f996 	bl	80069b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	0018      	movs	r0, r3
 8006690:	f000 f828 	bl	80066e4 <UART_SetConfig>
 8006694:	0003      	movs	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e01c      	b.n	80066d8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	490d      	ldr	r1, [pc, #52]	@ (80066e0 <HAL_UART_Init+0xa8>)
 80066aa:	400a      	ands	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	212a      	movs	r1, #42	@ 0x2a
 80066ba:	438a      	bics	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2101      	movs	r1, #1
 80066ca:	430a      	orrs	r2, r1
 80066cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 fa25 	bl	8006b20 <UART_CheckIdleState>
 80066d6:	0003      	movs	r3, r0
}
 80066d8:	0018      	movs	r0, r3
 80066da:	46bd      	mov	sp, r7
 80066dc:	b002      	add	sp, #8
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	ffffb7ff 	.word	0xffffb7ff

080066e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ec:	231a      	movs	r3, #26
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4aa1      	ldr	r2, [pc, #644]	@ (8006998 <UART_SetConfig+0x2b4>)
 8006714:	4013      	ands	r3, r2
 8006716:	0019      	movs	r1, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	430a      	orrs	r2, r1
 8006720:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a9c      	ldr	r2, [pc, #624]	@ (800699c <UART_SetConfig+0x2b8>)
 800672a:	4013      	ands	r3, r2
 800672c:	0019      	movs	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	4313      	orrs	r3, r2
 8006748:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a93      	ldr	r2, [pc, #588]	@ (80069a0 <UART_SetConfig+0x2bc>)
 8006752:	4013      	ands	r3, r2
 8006754:	0019      	movs	r1, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	430a      	orrs	r2, r1
 800675e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	220f      	movs	r2, #15
 8006768:	4393      	bics	r3, r2
 800676a:	0019      	movs	r1, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a89      	ldr	r2, [pc, #548]	@ (80069a4 <UART_SetConfig+0x2c0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d127      	bne.n	80067d2 <UART_SetConfig+0xee>
 8006782:	4b89      	ldr	r3, [pc, #548]	@ (80069a8 <UART_SetConfig+0x2c4>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006786:	2203      	movs	r2, #3
 8006788:	4013      	ands	r3, r2
 800678a:	2b03      	cmp	r3, #3
 800678c:	d017      	beq.n	80067be <UART_SetConfig+0xda>
 800678e:	d81b      	bhi.n	80067c8 <UART_SetConfig+0xe4>
 8006790:	2b02      	cmp	r3, #2
 8006792:	d00a      	beq.n	80067aa <UART_SetConfig+0xc6>
 8006794:	d818      	bhi.n	80067c8 <UART_SetConfig+0xe4>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <UART_SetConfig+0xbc>
 800679a:	2b01      	cmp	r3, #1
 800679c:	d00a      	beq.n	80067b4 <UART_SetConfig+0xd0>
 800679e:	e013      	b.n	80067c8 <UART_SetConfig+0xe4>
 80067a0:	231b      	movs	r3, #27
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	2200      	movs	r2, #0
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e021      	b.n	80067ee <UART_SetConfig+0x10a>
 80067aa:	231b      	movs	r3, #27
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	2202      	movs	r2, #2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e01c      	b.n	80067ee <UART_SetConfig+0x10a>
 80067b4:	231b      	movs	r3, #27
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	2204      	movs	r2, #4
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e017      	b.n	80067ee <UART_SetConfig+0x10a>
 80067be:	231b      	movs	r3, #27
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2208      	movs	r2, #8
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	e012      	b.n	80067ee <UART_SetConfig+0x10a>
 80067c8:	231b      	movs	r3, #27
 80067ca:	18fb      	adds	r3, r7, r3
 80067cc:	2210      	movs	r2, #16
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e00d      	b.n	80067ee <UART_SetConfig+0x10a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a75      	ldr	r2, [pc, #468]	@ (80069ac <UART_SetConfig+0x2c8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d104      	bne.n	80067e6 <UART_SetConfig+0x102>
 80067dc:	231b      	movs	r3, #27
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	e003      	b.n	80067ee <UART_SetConfig+0x10a>
 80067e6:	231b      	movs	r3, #27
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2210      	movs	r2, #16
 80067ec:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	2380      	movs	r3, #128	@ 0x80
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d000      	beq.n	80067fc <UART_SetConfig+0x118>
 80067fa:	e065      	b.n	80068c8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80067fc:	231b      	movs	r3, #27
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d015      	beq.n	8006832 <UART_SetConfig+0x14e>
 8006806:	dc18      	bgt.n	800683a <UART_SetConfig+0x156>
 8006808:	2b04      	cmp	r3, #4
 800680a:	d00d      	beq.n	8006828 <UART_SetConfig+0x144>
 800680c:	dc15      	bgt.n	800683a <UART_SetConfig+0x156>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <UART_SetConfig+0x134>
 8006812:	2b02      	cmp	r3, #2
 8006814:	d005      	beq.n	8006822 <UART_SetConfig+0x13e>
 8006816:	e010      	b.n	800683a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fe feb2 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 800681c:	0003      	movs	r3, r0
 800681e:	617b      	str	r3, [r7, #20]
        break;
 8006820:	e012      	b.n	8006848 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006822:	4b63      	ldr	r3, [pc, #396]	@ (80069b0 <UART_SetConfig+0x2cc>)
 8006824:	617b      	str	r3, [r7, #20]
        break;
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006828:	f7fe fe1e 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 800682c:	0003      	movs	r3, r0
 800682e:	617b      	str	r3, [r7, #20]
        break;
 8006830:	e00a      	b.n	8006848 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006832:	2380      	movs	r3, #128	@ 0x80
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	617b      	str	r3, [r7, #20]
        break;
 8006838:	e006      	b.n	8006848 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800683e:	231a      	movs	r3, #26
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	2201      	movs	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
        break;
 8006846:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d100      	bne.n	8006850 <UART_SetConfig+0x16c>
 800684e:	e08d      	b.n	800696c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006854:	4b57      	ldr	r3, [pc, #348]	@ (80069b4 <UART_SetConfig+0x2d0>)
 8006856:	0052      	lsls	r2, r2, #1
 8006858:	5ad3      	ldrh	r3, [r2, r3]
 800685a:	0019      	movs	r1, r3
 800685c:	6978      	ldr	r0, [r7, #20]
 800685e:	f7f9 fc6b 	bl	8000138 <__udivsi3>
 8006862:	0003      	movs	r3, r0
 8006864:	005a      	lsls	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	18d2      	adds	r2, r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	0019      	movs	r1, r3
 8006874:	0010      	movs	r0, r2
 8006876:	f7f9 fc5f 	bl	8000138 <__udivsi3>
 800687a:	0003      	movs	r3, r0
 800687c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b0f      	cmp	r3, #15
 8006882:	d91c      	bls.n	80068be <UART_SetConfig+0x1da>
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	2380      	movs	r3, #128	@ 0x80
 8006888:	025b      	lsls	r3, r3, #9
 800688a:	429a      	cmp	r2, r3
 800688c:	d217      	bcs.n	80068be <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	b29a      	uxth	r2, r3
 8006892:	200e      	movs	r0, #14
 8006894:	183b      	adds	r3, r7, r0
 8006896:	210f      	movs	r1, #15
 8006898:	438a      	bics	r2, r1
 800689a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2207      	movs	r2, #7
 80068a4:	4013      	ands	r3, r2
 80068a6:	b299      	uxth	r1, r3
 80068a8:	183b      	adds	r3, r7, r0
 80068aa:	183a      	adds	r2, r7, r0
 80068ac:	8812      	ldrh	r2, [r2, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	183a      	adds	r2, r7, r0
 80068b8:	8812      	ldrh	r2, [r2, #0]
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	e056      	b.n	800696c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80068be:	231a      	movs	r3, #26
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e051      	b.n	800696c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c8:	231b      	movs	r3, #27
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d015      	beq.n	80068fe <UART_SetConfig+0x21a>
 80068d2:	dc18      	bgt.n	8006906 <UART_SetConfig+0x222>
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d00d      	beq.n	80068f4 <UART_SetConfig+0x210>
 80068d8:	dc15      	bgt.n	8006906 <UART_SetConfig+0x222>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <UART_SetConfig+0x200>
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d005      	beq.n	80068ee <UART_SetConfig+0x20a>
 80068e2:	e010      	b.n	8006906 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe fe4c 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 80068e8:	0003      	movs	r3, r0
 80068ea:	617b      	str	r3, [r7, #20]
        break;
 80068ec:	e012      	b.n	8006914 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068ee:	4b30      	ldr	r3, [pc, #192]	@ (80069b0 <UART_SetConfig+0x2cc>)
 80068f0:	617b      	str	r3, [r7, #20]
        break;
 80068f2:	e00f      	b.n	8006914 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f4:	f7fe fdb8 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 80068f8:	0003      	movs	r3, r0
 80068fa:	617b      	str	r3, [r7, #20]
        break;
 80068fc:	e00a      	b.n	8006914 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fe:	2380      	movs	r3, #128	@ 0x80
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	617b      	str	r3, [r7, #20]
        break;
 8006904:	e006      	b.n	8006914 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800690a:	231a      	movs	r3, #26
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
        break;
 8006912:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d028      	beq.n	800696c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800691e:	4b25      	ldr	r3, [pc, #148]	@ (80069b4 <UART_SetConfig+0x2d0>)
 8006920:	0052      	lsls	r2, r2, #1
 8006922:	5ad3      	ldrh	r3, [r2, r3]
 8006924:	0019      	movs	r1, r3
 8006926:	6978      	ldr	r0, [r7, #20]
 8006928:	f7f9 fc06 	bl	8000138 <__udivsi3>
 800692c:	0003      	movs	r3, r0
 800692e:	001a      	movs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	18d2      	adds	r2, r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	0019      	movs	r1, r3
 800693e:	0010      	movs	r0, r2
 8006940:	f7f9 fbfa 	bl	8000138 <__udivsi3>
 8006944:	0003      	movs	r3, r0
 8006946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	d90a      	bls.n	8006964 <UART_SetConfig+0x280>
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	2380      	movs	r3, #128	@ 0x80
 8006952:	025b      	lsls	r3, r3, #9
 8006954:	429a      	cmp	r2, r3
 8006956:	d205      	bcs.n	8006964 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e003      	b.n	800696c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006964:	231a      	movs	r3, #26
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	226a      	movs	r2, #106	@ 0x6a
 8006970:	2101      	movs	r1, #1
 8006972:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2268      	movs	r2, #104	@ 0x68
 8006978:	2101      	movs	r1, #1
 800697a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006988:	231a      	movs	r3, #26
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	781b      	ldrb	r3, [r3, #0]
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b008      	add	sp, #32
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	cfff69f3 	.word	0xcfff69f3
 800699c:	ffffcfff 	.word	0xffffcfff
 80069a0:	11fff4ff 	.word	0x11fff4ff
 80069a4:	40013800 	.word	0x40013800
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40004400 	.word	0x40004400
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	0800acd8 	.word	0x0800acd8

080069b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	2208      	movs	r2, #8
 80069c6:	4013      	ands	r3, r2
 80069c8:	d00b      	beq.n	80069e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a4a      	ldr	r2, [pc, #296]	@ (8006afc <UART_AdvFeatureConfig+0x144>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	0019      	movs	r1, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e6:	2201      	movs	r2, #1
 80069e8:	4013      	ands	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4a43      	ldr	r2, [pc, #268]	@ (8006b00 <UART_AdvFeatureConfig+0x148>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	0019      	movs	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	2202      	movs	r2, #2
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4a3b      	ldr	r2, [pc, #236]	@ (8006b04 <UART_AdvFeatureConfig+0x14c>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	0019      	movs	r1, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d00b      	beq.n	8006a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4a34      	ldr	r2, [pc, #208]	@ (8006b08 <UART_AdvFeatureConfig+0x150>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	0019      	movs	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4c:	2210      	movs	r2, #16
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d00b      	beq.n	8006a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	4a2c      	ldr	r2, [pc, #176]	@ (8006b0c <UART_AdvFeatureConfig+0x154>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	2220      	movs	r2, #32
 8006a70:	4013      	ands	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	4a25      	ldr	r2, [pc, #148]	@ (8006b10 <UART_AdvFeatureConfig+0x158>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a90:	2240      	movs	r2, #64	@ 0x40
 8006a92:	4013      	ands	r3, r2
 8006a94:	d01d      	beq.n	8006ad2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b14 <UART_AdvFeatureConfig+0x15c>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	0019      	movs	r1, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab2:	2380      	movs	r3, #128	@ 0x80
 8006ab4:	035b      	lsls	r3, r3, #13
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d10b      	bne.n	8006ad2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	@ (8006b18 <UART_AdvFeatureConfig+0x160>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad6:	2280      	movs	r2, #128	@ 0x80
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <UART_AdvFeatureConfig+0x164>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
  }
}
 8006af4:	46c0      	nop			@ (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	ffff7fff 	.word	0xffff7fff
 8006b00:	fffdffff 	.word	0xfffdffff
 8006b04:	fffeffff 	.word	0xfffeffff
 8006b08:	fffbffff 	.word	0xfffbffff
 8006b0c:	ffffefff 	.word	0xffffefff
 8006b10:	ffffdfff 	.word	0xffffdfff
 8006b14:	ffefffff 	.word	0xffefffff
 8006b18:	ff9fffff 	.word	0xff9fffff
 8006b1c:	fff7ffff 	.word	0xfff7ffff

08006b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b092      	sub	sp, #72	@ 0x48
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2290      	movs	r2, #144	@ 0x90
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b30:	f7fc fc4e 	bl	80033d0 <HAL_GetTick>
 8006b34:	0003      	movs	r3, r0
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2208      	movs	r2, #8
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d12d      	bne.n	8006ba2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b48:	2280      	movs	r2, #128	@ 0x80
 8006b4a:	0391      	lsls	r1, r2, #14
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4a47      	ldr	r2, [pc, #284]	@ (8006c6c <UART_CheckIdleState+0x14c>)
 8006b50:	9200      	str	r2, [sp, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f000 f88e 	bl	8006c74 <UART_WaitOnFlagUntilTimeout>
 8006b58:	1e03      	subs	r3, r0, #0
 8006b5a:	d022      	beq.n	8006ba2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b66:	2301      	movs	r3, #1
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	f383 8810 	msr	PRIMASK, r3
}
 8006b70:	46c0      	nop			@ (mov r8, r8)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2180      	movs	r1, #128	@ 0x80
 8006b7e:	438a      	bics	r2, r1
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b88:	f383 8810 	msr	PRIMASK, r3
}
 8006b8c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2288      	movs	r2, #136	@ 0x88
 8006b92:	2120      	movs	r1, #32
 8006b94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2284      	movs	r2, #132	@ 0x84
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e060      	b.n	8006c64 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d146      	bne.n	8006c3e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb2:	2280      	movs	r2, #128	@ 0x80
 8006bb4:	03d1      	lsls	r1, r2, #15
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c6c <UART_CheckIdleState+0x14c>)
 8006bba:	9200      	str	r2, [sp, #0]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f000 f859 	bl	8006c74 <UART_WaitOnFlagUntilTimeout>
 8006bc2:	1e03      	subs	r3, r0, #0
 8006bc4:	d03b      	beq.n	8006c3e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f383 8810 	msr	PRIMASK, r3
}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4922      	ldr	r1, [pc, #136]	@ (8006c70 <UART_CheckIdleState+0x150>)
 8006be8:	400a      	ands	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f383 8810 	msr	PRIMASK, r3
}
 8006bf6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bfc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c02:	2301      	movs	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	46c0      	nop			@ (mov r8, r8)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2101      	movs	r1, #1
 8006c1a:	438a      	bics	r2, r1
 8006c1c:	609a      	str	r2, [r3, #8]
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	f383 8810 	msr	PRIMASK, r3
}
 8006c28:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	228c      	movs	r2, #140	@ 0x8c
 8006c2e:	2120      	movs	r1, #32
 8006c30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2284      	movs	r2, #132	@ 0x84
 8006c36:	2100      	movs	r1, #0
 8006c38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e012      	b.n	8006c64 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2288      	movs	r2, #136	@ 0x88
 8006c42:	2120      	movs	r1, #32
 8006c44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	228c      	movs	r2, #140	@ 0x8c
 8006c4a:	2120      	movs	r1, #32
 8006c4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2284      	movs	r2, #132	@ 0x84
 8006c5e:	2100      	movs	r1, #0
 8006c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	0018      	movs	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b010      	add	sp, #64	@ 0x40
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	01ffffff 	.word	0x01ffffff
 8006c70:	fffffedf 	.word	0xfffffedf

08006c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	1dfb      	adds	r3, r7, #7
 8006c82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c84:	e051      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	d04e      	beq.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8c:	f7fc fba0 	bl	80033d0 <HAL_GetTick>
 8006c90:	0002      	movs	r2, r0
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e051      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2204      	movs	r2, #4
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b80      	cmp	r3, #128	@ 0x80
 8006cb6:	d038      	beq.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b40      	cmp	r3, #64	@ 0x40
 8006cbc:	d035      	beq.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d111      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 f83c 	bl	8006d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2290      	movs	r2, #144	@ 0x90
 8006ce0:	2108      	movs	r1, #8
 8006ce2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2284      	movs	r2, #132	@ 0x84
 8006ce8:	2100      	movs	r1, #0
 8006cea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e02c      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	401a      	ands	r2, r3
 8006cfc:	2380      	movs	r3, #128	@ 0x80
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d112      	bne.n	8006d2a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2280      	movs	r2, #128	@ 0x80
 8006d0a:	0112      	lsls	r2, r2, #4
 8006d0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	0018      	movs	r0, r3
 8006d12:	f000 f81f 	bl	8006d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2290      	movs	r2, #144	@ 0x90
 8006d1a:	2120      	movs	r1, #32
 8006d1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2284      	movs	r2, #132	@ 0x84
 8006d22:	2100      	movs	r1, #0
 8006d24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e00f      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	425a      	negs	r2, r3
 8006d3a:	4153      	adcs	r3, r2
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	001a      	movs	r2, r3
 8006d40:	1dfb      	adds	r3, r7, #7
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d09e      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b004      	add	sp, #16
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08e      	sub	sp, #56	@ 0x38
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d60:	617b      	str	r3, [r7, #20]
  return(result);
 8006d62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d66:	2301      	movs	r3, #1
 8006d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f383 8810 	msr	PRIMASK, r3
}
 8006d70:	46c0      	nop			@ (mov r8, r8)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4926      	ldr	r1, [pc, #152]	@ (8006e18 <UART_EndRxTransfer+0xc4>)
 8006d7e:	400a      	ands	r2, r1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f383 8810 	msr	PRIMASK, r3
}
 8006d8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d92:	623b      	str	r3, [r7, #32]
  return(result);
 8006d94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d98:	2301      	movs	r3, #1
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	f383 8810 	msr	PRIMASK, r3
}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	491b      	ldr	r1, [pc, #108]	@ (8006e1c <UART_EndRxTransfer+0xc8>)
 8006db0:	400a      	ands	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	f383 8810 	msr	PRIMASK, r3
}
 8006dbe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d118      	bne.n	8006dfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f383 8810 	msr	PRIMASK, r3
}
 8006ddc:	46c0      	nop			@ (mov r8, r8)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2110      	movs	r1, #16
 8006dea:	438a      	bics	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f383 8810 	msr	PRIMASK, r3
}
 8006df8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	228c      	movs	r2, #140	@ 0x8c
 8006dfe:	2120      	movs	r1, #32
 8006e00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b00e      	add	sp, #56	@ 0x38
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	fffffedf 	.word	0xfffffedf
 8006e1c:	effffffe 	.word	0xeffffffe

08006e20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2284      	movs	r2, #132	@ 0x84
 8006e2c:	5c9b      	ldrb	r3, [r3, r2]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e027      	b.n	8006e86 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2284      	movs	r2, #132	@ 0x84
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2288      	movs	r2, #136	@ 0x88
 8006e42:	2124      	movs	r1, #36	@ 0x24
 8006e44:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	438a      	bics	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a0b      	ldr	r2, [pc, #44]	@ (8006e90 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2288      	movs	r2, #136	@ 0x88
 8006e78:	2120      	movs	r1, #32
 8006e7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2284      	movs	r2, #132	@ 0x84
 8006e80:	2100      	movs	r1, #0
 8006e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	0018      	movs	r0, r3
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	b004      	add	sp, #16
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	dfffffff 	.word	0xdfffffff

08006e94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2284      	movs	r2, #132	@ 0x84
 8006ea2:	5c9b      	ldrb	r3, [r3, r2]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e02e      	b.n	8006f0a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2284      	movs	r2, #132	@ 0x84
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2288      	movs	r2, #136	@ 0x88
 8006eb8:	2124      	movs	r1, #36	@ 0x24
 8006eba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2101      	movs	r1, #1
 8006ed0:	438a      	bics	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	08d9      	lsrs	r1, r3, #3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 f854 	bl	8006f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2288      	movs	r2, #136	@ 0x88
 8006efc:	2120      	movs	r1, #32
 8006efe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2284      	movs	r2, #132	@ 0x84
 8006f04:	2100      	movs	r1, #0
 8006f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	b004      	add	sp, #16
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2284      	movs	r2, #132	@ 0x84
 8006f22:	5c9b      	ldrb	r3, [r3, r2]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e02f      	b.n	8006f8c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2284      	movs	r2, #132	@ 0x84
 8006f30:	2101      	movs	r1, #1
 8006f32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2288      	movs	r2, #136	@ 0x88
 8006f38:	2124      	movs	r1, #36	@ 0x24
 8006f3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2101      	movs	r1, #1
 8006f50:	438a      	bics	r2, r1
 8006f52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f94 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	0019      	movs	r1, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f000 f813 	bl	8006f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2288      	movs	r2, #136	@ 0x88
 8006f7e:	2120      	movs	r1, #32
 8006f80:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2284      	movs	r2, #132	@ 0x84
 8006f86:	2100      	movs	r1, #0
 8006f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b004      	add	sp, #16
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	f1ffffff 	.word	0xf1ffffff

08006f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d108      	bne.n	8006fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	226a      	movs	r2, #106	@ 0x6a
 8006fac:	2101      	movs	r1, #1
 8006fae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2268      	movs	r2, #104	@ 0x68
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fb8:	e043      	b.n	8007042 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fba:	260f      	movs	r6, #15
 8006fbc:	19bb      	adds	r3, r7, r6
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fc2:	200e      	movs	r0, #14
 8006fc4:	183b      	adds	r3, r7, r0
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	0e5b      	lsrs	r3, r3, #25
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	240d      	movs	r4, #13
 8006fd6:	193b      	adds	r3, r7, r4
 8006fd8:	2107      	movs	r1, #7
 8006fda:	400a      	ands	r2, r1
 8006fdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	0f5b      	lsrs	r3, r3, #29
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	250c      	movs	r5, #12
 8006fea:	197b      	adds	r3, r7, r5
 8006fec:	2107      	movs	r1, #7
 8006fee:	400a      	ands	r2, r1
 8006ff0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ff2:	183b      	adds	r3, r7, r0
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	197a      	adds	r2, r7, r5
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	4914      	ldr	r1, [pc, #80]	@ (800704c <UARTEx_SetNbDataToProcess+0xb4>)
 8006ffc:	5c8a      	ldrb	r2, [r1, r2]
 8006ffe:	435a      	muls	r2, r3
 8007000:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007002:	197b      	adds	r3, r7, r5
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	4a12      	ldr	r2, [pc, #72]	@ (8007050 <UARTEx_SetNbDataToProcess+0xb8>)
 8007008:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800700a:	0019      	movs	r1, r3
 800700c:	f7f9 f91e 	bl	800024c <__divsi3>
 8007010:	0003      	movs	r3, r0
 8007012:	b299      	uxth	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	226a      	movs	r2, #106	@ 0x6a
 8007018:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800701a:	19bb      	adds	r3, r7, r6
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	193a      	adds	r2, r7, r4
 8007020:	7812      	ldrb	r2, [r2, #0]
 8007022:	490a      	ldr	r1, [pc, #40]	@ (800704c <UARTEx_SetNbDataToProcess+0xb4>)
 8007024:	5c8a      	ldrb	r2, [r1, r2]
 8007026:	435a      	muls	r2, r3
 8007028:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800702a:	193b      	adds	r3, r7, r4
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <UARTEx_SetNbDataToProcess+0xb8>)
 8007030:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007032:	0019      	movs	r1, r3
 8007034:	f7f9 f90a 	bl	800024c <__divsi3>
 8007038:	0003      	movs	r3, r0
 800703a:	b299      	uxth	r1, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2268      	movs	r2, #104	@ 0x68
 8007040:	5299      	strh	r1, [r3, r2]
}
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b005      	add	sp, #20
 8007048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	0800acf0 	.word	0x0800acf0
 8007050:	0800acf8 	.word	0x0800acf8

08007054 <__cvt>:
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	001f      	movs	r7, r3
 8007058:	2300      	movs	r3, #0
 800705a:	0016      	movs	r6, r2
 800705c:	b08b      	sub	sp, #44	@ 0x2c
 800705e:	429f      	cmp	r7, r3
 8007060:	da04      	bge.n	800706c <__cvt+0x18>
 8007062:	2180      	movs	r1, #128	@ 0x80
 8007064:	0609      	lsls	r1, r1, #24
 8007066:	187b      	adds	r3, r7, r1
 8007068:	001f      	movs	r7, r3
 800706a:	232d      	movs	r3, #45	@ 0x2d
 800706c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800706e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007070:	7013      	strb	r3, [r2, #0]
 8007072:	2320      	movs	r3, #32
 8007074:	2203      	movs	r2, #3
 8007076:	439d      	bics	r5, r3
 8007078:	2d46      	cmp	r5, #70	@ 0x46
 800707a:	d007      	beq.n	800708c <__cvt+0x38>
 800707c:	002b      	movs	r3, r5
 800707e:	3b45      	subs	r3, #69	@ 0x45
 8007080:	4259      	negs	r1, r3
 8007082:	414b      	adcs	r3, r1
 8007084:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007086:	3a01      	subs	r2, #1
 8007088:	18cb      	adds	r3, r1, r3
 800708a:	9310      	str	r3, [sp, #64]	@ 0x40
 800708c:	ab09      	add	r3, sp, #36	@ 0x24
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	ab08      	add	r3, sp, #32
 8007092:	9303      	str	r3, [sp, #12]
 8007094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007096:	9200      	str	r2, [sp, #0]
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800709c:	0032      	movs	r2, r6
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	003b      	movs	r3, r7
 80070a2:	f000 fea3 	bl	8007dec <_dtoa_r>
 80070a6:	0004      	movs	r4, r0
 80070a8:	2d47      	cmp	r5, #71	@ 0x47
 80070aa:	d11b      	bne.n	80070e4 <__cvt+0x90>
 80070ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070ae:	07db      	lsls	r3, r3, #31
 80070b0:	d511      	bpl.n	80070d6 <__cvt+0x82>
 80070b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070b4:	18c3      	adds	r3, r0, r3
 80070b6:	9307      	str	r3, [sp, #28]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	0030      	movs	r0, r6
 80070be:	0039      	movs	r1, r7
 80070c0:	f7f9 f9c0 	bl	8000444 <__aeabi_dcmpeq>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d001      	beq.n	80070cc <__cvt+0x78>
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80070cc:	2230      	movs	r2, #48	@ 0x30
 80070ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d0:	9907      	ldr	r1, [sp, #28]
 80070d2:	428b      	cmp	r3, r1
 80070d4:	d320      	bcc.n	8007118 <__cvt+0xc4>
 80070d6:	0020      	movs	r0, r4
 80070d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80070dc:	1b1b      	subs	r3, r3, r4
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	b00b      	add	sp, #44	@ 0x2c
 80070e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070e6:	18c3      	adds	r3, r0, r3
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	2d46      	cmp	r5, #70	@ 0x46
 80070ec:	d1e4      	bne.n	80070b8 <__cvt+0x64>
 80070ee:	7803      	ldrb	r3, [r0, #0]
 80070f0:	2b30      	cmp	r3, #48	@ 0x30
 80070f2:	d10c      	bne.n	800710e <__cvt+0xba>
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	0030      	movs	r0, r6
 80070fa:	0039      	movs	r1, r7
 80070fc:	f7f9 f9a2 	bl	8000444 <__aeabi_dcmpeq>
 8007100:	2800      	cmp	r0, #0
 8007102:	d104      	bne.n	800710e <__cvt+0xba>
 8007104:	2301      	movs	r3, #1
 8007106:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007110:	9a07      	ldr	r2, [sp, #28]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	18d3      	adds	r3, r2, r3
 8007116:	e7ce      	b.n	80070b6 <__cvt+0x62>
 8007118:	1c59      	adds	r1, r3, #1
 800711a:	9109      	str	r1, [sp, #36]	@ 0x24
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e7d6      	b.n	80070ce <__cvt+0x7a>

08007120 <__exponent>:
 8007120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007122:	232b      	movs	r3, #43	@ 0x2b
 8007124:	0005      	movs	r5, r0
 8007126:	000c      	movs	r4, r1
 8007128:	b085      	sub	sp, #20
 800712a:	7002      	strb	r2, [r0, #0]
 800712c:	2900      	cmp	r1, #0
 800712e:	da01      	bge.n	8007134 <__exponent+0x14>
 8007130:	424c      	negs	r4, r1
 8007132:	3302      	adds	r3, #2
 8007134:	706b      	strb	r3, [r5, #1]
 8007136:	2c09      	cmp	r4, #9
 8007138:	dd2c      	ble.n	8007194 <__exponent+0x74>
 800713a:	ab02      	add	r3, sp, #8
 800713c:	1dde      	adds	r6, r3, #7
 800713e:	0020      	movs	r0, r4
 8007140:	210a      	movs	r1, #10
 8007142:	f7f9 f969 	bl	8000418 <__aeabi_idivmod>
 8007146:	0037      	movs	r7, r6
 8007148:	3130      	adds	r1, #48	@ 0x30
 800714a:	3e01      	subs	r6, #1
 800714c:	0020      	movs	r0, r4
 800714e:	7031      	strb	r1, [r6, #0]
 8007150:	210a      	movs	r1, #10
 8007152:	9401      	str	r4, [sp, #4]
 8007154:	f7f9 f87a 	bl	800024c <__divsi3>
 8007158:	9b01      	ldr	r3, [sp, #4]
 800715a:	0004      	movs	r4, r0
 800715c:	2b63      	cmp	r3, #99	@ 0x63
 800715e:	dcee      	bgt.n	800713e <__exponent+0x1e>
 8007160:	1eba      	subs	r2, r7, #2
 8007162:	1ca8      	adds	r0, r5, #2
 8007164:	0001      	movs	r1, r0
 8007166:	0013      	movs	r3, r2
 8007168:	3430      	adds	r4, #48	@ 0x30
 800716a:	7014      	strb	r4, [r2, #0]
 800716c:	ac02      	add	r4, sp, #8
 800716e:	3407      	adds	r4, #7
 8007170:	429c      	cmp	r4, r3
 8007172:	d80a      	bhi.n	800718a <__exponent+0x6a>
 8007174:	2300      	movs	r3, #0
 8007176:	42a2      	cmp	r2, r4
 8007178:	d803      	bhi.n	8007182 <__exponent+0x62>
 800717a:	3309      	adds	r3, #9
 800717c:	aa02      	add	r2, sp, #8
 800717e:	189b      	adds	r3, r3, r2
 8007180:	1bdb      	subs	r3, r3, r7
 8007182:	18c0      	adds	r0, r0, r3
 8007184:	1b40      	subs	r0, r0, r5
 8007186:	b005      	add	sp, #20
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718a:	781c      	ldrb	r4, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	700c      	strb	r4, [r1, #0]
 8007190:	3101      	adds	r1, #1
 8007192:	e7eb      	b.n	800716c <__exponent+0x4c>
 8007194:	2330      	movs	r3, #48	@ 0x30
 8007196:	18e4      	adds	r4, r4, r3
 8007198:	70ab      	strb	r3, [r5, #2]
 800719a:	1d28      	adds	r0, r5, #4
 800719c:	70ec      	strb	r4, [r5, #3]
 800719e:	e7f1      	b.n	8007184 <__exponent+0x64>

080071a0 <_printf_float>:
 80071a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a2:	b097      	sub	sp, #92	@ 0x5c
 80071a4:	000d      	movs	r5, r1
 80071a6:	920a      	str	r2, [sp, #40]	@ 0x28
 80071a8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80071aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80071ae:	f000 fcfb 	bl	8007ba8 <_localeconv_r>
 80071b2:	6803      	ldr	r3, [r0, #0]
 80071b4:	0018      	movs	r0, r3
 80071b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80071b8:	f7f8 ffa2 	bl	8000100 <strlen>
 80071bc:	2300      	movs	r3, #0
 80071be:	900f      	str	r0, [sp, #60]	@ 0x3c
 80071c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80071c2:	7e2b      	ldrb	r3, [r5, #24]
 80071c4:	2207      	movs	r2, #7
 80071c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80071cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	05c9      	lsls	r1, r1, #23
 80071d2:	d545      	bpl.n	8007260 <_printf_float+0xc0>
 80071d4:	189b      	adds	r3, r3, r2
 80071d6:	4393      	bics	r3, r2
 80071d8:	001a      	movs	r2, r3
 80071da:	3208      	adds	r2, #8
 80071dc:	6022      	str	r2, [r4, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	681e      	ldr	r6, [r3, #0]
 80071e2:	685f      	ldr	r7, [r3, #4]
 80071e4:	007b      	lsls	r3, r7, #1
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071ea:	9610      	str	r6, [sp, #64]	@ 0x40
 80071ec:	64ae      	str	r6, [r5, #72]	@ 0x48
 80071ee:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80071f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80071f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80071f4:	4ba7      	ldr	r3, [pc, #668]	@ (8007494 <_printf_float+0x2f4>)
 80071f6:	4252      	negs	r2, r2
 80071f8:	f7fa ff5e 	bl	80020b8 <__aeabi_dcmpun>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d131      	bne.n	8007264 <_printf_float+0xc4>
 8007200:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007202:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007204:	2201      	movs	r2, #1
 8007206:	4ba3      	ldr	r3, [pc, #652]	@ (8007494 <_printf_float+0x2f4>)
 8007208:	4252      	negs	r2, r2
 800720a:	f7f9 f92b 	bl	8000464 <__aeabi_dcmple>
 800720e:	2800      	cmp	r0, #0
 8007210:	d128      	bne.n	8007264 <_printf_float+0xc4>
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	0030      	movs	r0, r6
 8007218:	0039      	movs	r1, r7
 800721a:	f7f9 f919 	bl	8000450 <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	d003      	beq.n	800722a <_printf_float+0x8a>
 8007222:	002b      	movs	r3, r5
 8007224:	222d      	movs	r2, #45	@ 0x2d
 8007226:	3343      	adds	r3, #67	@ 0x43
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800722c:	4f9a      	ldr	r7, [pc, #616]	@ (8007498 <_printf_float+0x2f8>)
 800722e:	2b47      	cmp	r3, #71	@ 0x47
 8007230:	d900      	bls.n	8007234 <_printf_float+0x94>
 8007232:	4f9a      	ldr	r7, [pc, #616]	@ (800749c <_printf_float+0x2fc>)
 8007234:	2303      	movs	r3, #3
 8007236:	2400      	movs	r4, #0
 8007238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800723a:	612b      	str	r3, [r5, #16]
 800723c:	3301      	adds	r3, #1
 800723e:	439a      	bics	r2, r3
 8007240:	602a      	str	r2, [r5, #0]
 8007242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007244:	0029      	movs	r1, r5
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800724a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800724c:	aa15      	add	r2, sp, #84	@ 0x54
 800724e:	f000 f9e5 	bl	800761c <_printf_common>
 8007252:	3001      	adds	r0, #1
 8007254:	d000      	beq.n	8007258 <_printf_float+0xb8>
 8007256:	e09f      	b.n	8007398 <_printf_float+0x1f8>
 8007258:	2001      	movs	r0, #1
 800725a:	4240      	negs	r0, r0
 800725c:	b017      	add	sp, #92	@ 0x5c
 800725e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007260:	3307      	adds	r3, #7
 8007262:	e7b8      	b.n	80071d6 <_printf_float+0x36>
 8007264:	0032      	movs	r2, r6
 8007266:	003b      	movs	r3, r7
 8007268:	0030      	movs	r0, r6
 800726a:	0039      	movs	r1, r7
 800726c:	f7fa ff24 	bl	80020b8 <__aeabi_dcmpun>
 8007270:	2800      	cmp	r0, #0
 8007272:	d00b      	beq.n	800728c <_printf_float+0xec>
 8007274:	2f00      	cmp	r7, #0
 8007276:	da03      	bge.n	8007280 <_printf_float+0xe0>
 8007278:	002b      	movs	r3, r5
 800727a:	222d      	movs	r2, #45	@ 0x2d
 800727c:	3343      	adds	r3, #67	@ 0x43
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007282:	4f87      	ldr	r7, [pc, #540]	@ (80074a0 <_printf_float+0x300>)
 8007284:	2b47      	cmp	r3, #71	@ 0x47
 8007286:	d9d5      	bls.n	8007234 <_printf_float+0x94>
 8007288:	4f86      	ldr	r7, [pc, #536]	@ (80074a4 <_printf_float+0x304>)
 800728a:	e7d3      	b.n	8007234 <_printf_float+0x94>
 800728c:	2220      	movs	r2, #32
 800728e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007290:	686b      	ldr	r3, [r5, #4]
 8007292:	4394      	bics	r4, r2
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	d146      	bne.n	8007326 <_printf_float+0x186>
 8007298:	3307      	adds	r3, #7
 800729a:	606b      	str	r3, [r5, #4]
 800729c:	2380      	movs	r3, #128	@ 0x80
 800729e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	4313      	orrs	r3, r2
 80072a4:	2200      	movs	r2, #0
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	9206      	str	r2, [sp, #24]
 80072aa:	aa14      	add	r2, sp, #80	@ 0x50
 80072ac:	9205      	str	r2, [sp, #20]
 80072ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072b0:	a90a      	add	r1, sp, #40	@ 0x28
 80072b2:	9204      	str	r2, [sp, #16]
 80072b4:	aa13      	add	r2, sp, #76	@ 0x4c
 80072b6:	9203      	str	r2, [sp, #12]
 80072b8:	2223      	movs	r2, #35	@ 0x23
 80072ba:	1852      	adds	r2, r2, r1
 80072bc:	9202      	str	r2, [sp, #8]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	686b      	ldr	r3, [r5, #4]
 80072c2:	0032      	movs	r2, r6
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072c8:	003b      	movs	r3, r7
 80072ca:	f7ff fec3 	bl	8007054 <__cvt>
 80072ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072d0:	0007      	movs	r7, r0
 80072d2:	2c47      	cmp	r4, #71	@ 0x47
 80072d4:	d12d      	bne.n	8007332 <_printf_float+0x192>
 80072d6:	1cd3      	adds	r3, r2, #3
 80072d8:	db02      	blt.n	80072e0 <_printf_float+0x140>
 80072da:	686b      	ldr	r3, [r5, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	dd48      	ble.n	8007372 <_printf_float+0x1d2>
 80072e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80072e4:	3b02      	subs	r3, #2
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80072ea:	0028      	movs	r0, r5
 80072ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072ee:	3901      	subs	r1, #1
 80072f0:	3050      	adds	r0, #80	@ 0x50
 80072f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072f4:	f7ff ff14 	bl	8007120 <__exponent>
 80072f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80072fa:	0004      	movs	r4, r0
 80072fc:	1813      	adds	r3, r2, r0
 80072fe:	612b      	str	r3, [r5, #16]
 8007300:	2a01      	cmp	r2, #1
 8007302:	dc02      	bgt.n	800730a <_printf_float+0x16a>
 8007304:	682a      	ldr	r2, [r5, #0]
 8007306:	07d2      	lsls	r2, r2, #31
 8007308:	d501      	bpl.n	800730e <_printf_float+0x16e>
 800730a:	3301      	adds	r3, #1
 800730c:	612b      	str	r3, [r5, #16]
 800730e:	2323      	movs	r3, #35	@ 0x23
 8007310:	aa0a      	add	r2, sp, #40	@ 0x28
 8007312:	189b      	adds	r3, r3, r2
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d100      	bne.n	800731c <_printf_float+0x17c>
 800731a:	e792      	b.n	8007242 <_printf_float+0xa2>
 800731c:	002b      	movs	r3, r5
 800731e:	222d      	movs	r2, #45	@ 0x2d
 8007320:	3343      	adds	r3, #67	@ 0x43
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e78d      	b.n	8007242 <_printf_float+0xa2>
 8007326:	2c47      	cmp	r4, #71	@ 0x47
 8007328:	d1b8      	bne.n	800729c <_printf_float+0xfc>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1b6      	bne.n	800729c <_printf_float+0xfc>
 800732e:	3301      	adds	r3, #1
 8007330:	e7b3      	b.n	800729a <_printf_float+0xfa>
 8007332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007334:	0011      	movs	r1, r2
 8007336:	2b65      	cmp	r3, #101	@ 0x65
 8007338:	d9d7      	bls.n	80072ea <_printf_float+0x14a>
 800733a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800733c:	2b66      	cmp	r3, #102	@ 0x66
 800733e:	d11a      	bne.n	8007376 <_printf_float+0x1d6>
 8007340:	686b      	ldr	r3, [r5, #4]
 8007342:	2a00      	cmp	r2, #0
 8007344:	dd09      	ble.n	800735a <_printf_float+0x1ba>
 8007346:	612a      	str	r2, [r5, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <_printf_float+0x1b2>
 800734c:	6829      	ldr	r1, [r5, #0]
 800734e:	07c9      	lsls	r1, r1, #31
 8007350:	d50b      	bpl.n	800736a <_printf_float+0x1ca>
 8007352:	3301      	adds	r3, #1
 8007354:	189b      	adds	r3, r3, r2
 8007356:	612b      	str	r3, [r5, #16]
 8007358:	e007      	b.n	800736a <_printf_float+0x1ca>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <_printf_float+0x1c6>
 800735e:	2201      	movs	r2, #1
 8007360:	6829      	ldr	r1, [r5, #0]
 8007362:	4211      	tst	r1, r2
 8007364:	d000      	beq.n	8007368 <_printf_float+0x1c8>
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	612a      	str	r2, [r5, #16]
 800736a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800736c:	2400      	movs	r4, #0
 800736e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007370:	e7cd      	b.n	800730e <_printf_float+0x16e>
 8007372:	2367      	movs	r3, #103	@ 0x67
 8007374:	930c      	str	r3, [sp, #48]	@ 0x30
 8007376:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007378:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800737a:	4299      	cmp	r1, r3
 800737c:	db06      	blt.n	800738c <_printf_float+0x1ec>
 800737e:	682b      	ldr	r3, [r5, #0]
 8007380:	6129      	str	r1, [r5, #16]
 8007382:	07db      	lsls	r3, r3, #31
 8007384:	d5f1      	bpl.n	800736a <_printf_float+0x1ca>
 8007386:	3101      	adds	r1, #1
 8007388:	6129      	str	r1, [r5, #16]
 800738a:	e7ee      	b.n	800736a <_printf_float+0x1ca>
 800738c:	2201      	movs	r2, #1
 800738e:	2900      	cmp	r1, #0
 8007390:	dce0      	bgt.n	8007354 <_printf_float+0x1b4>
 8007392:	1892      	adds	r2, r2, r2
 8007394:	1a52      	subs	r2, r2, r1
 8007396:	e7dd      	b.n	8007354 <_printf_float+0x1b4>
 8007398:	682a      	ldr	r2, [r5, #0]
 800739a:	0553      	lsls	r3, r2, #21
 800739c:	d408      	bmi.n	80073b0 <_printf_float+0x210>
 800739e:	692b      	ldr	r3, [r5, #16]
 80073a0:	003a      	movs	r2, r7
 80073a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80073a8:	47a0      	blx	r4
 80073aa:	3001      	adds	r0, #1
 80073ac:	d129      	bne.n	8007402 <_printf_float+0x262>
 80073ae:	e753      	b.n	8007258 <_printf_float+0xb8>
 80073b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073b2:	2b65      	cmp	r3, #101	@ 0x65
 80073b4:	d800      	bhi.n	80073b8 <_printf_float+0x218>
 80073b6:	e0da      	b.n	800756e <_printf_float+0x3ce>
 80073b8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80073ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80073bc:	2200      	movs	r2, #0
 80073be:	2300      	movs	r3, #0
 80073c0:	f7f9 f840 	bl	8000444 <__aeabi_dcmpeq>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d033      	beq.n	8007430 <_printf_float+0x290>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4a37      	ldr	r2, [pc, #220]	@ (80074a8 <_printf_float+0x308>)
 80073cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80073d2:	47a0      	blx	r4
 80073d4:	3001      	adds	r0, #1
 80073d6:	d100      	bne.n	80073da <_printf_float+0x23a>
 80073d8:	e73e      	b.n	8007258 <_printf_float+0xb8>
 80073da:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80073dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073de:	42b3      	cmp	r3, r6
 80073e0:	db02      	blt.n	80073e8 <_printf_float+0x248>
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	07db      	lsls	r3, r3, #31
 80073e6:	d50c      	bpl.n	8007402 <_printf_float+0x262>
 80073e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80073ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073f2:	47a0      	blx	r4
 80073f4:	2400      	movs	r4, #0
 80073f6:	3001      	adds	r0, #1
 80073f8:	d100      	bne.n	80073fc <_printf_float+0x25c>
 80073fa:	e72d      	b.n	8007258 <_printf_float+0xb8>
 80073fc:	1e73      	subs	r3, r6, #1
 80073fe:	42a3      	cmp	r3, r4
 8007400:	dc0a      	bgt.n	8007418 <_printf_float+0x278>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	079b      	lsls	r3, r3, #30
 8007406:	d500      	bpl.n	800740a <_printf_float+0x26a>
 8007408:	e105      	b.n	8007616 <_printf_float+0x476>
 800740a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800740c:	68e8      	ldr	r0, [r5, #12]
 800740e:	4298      	cmp	r0, r3
 8007410:	db00      	blt.n	8007414 <_printf_float+0x274>
 8007412:	e723      	b.n	800725c <_printf_float+0xbc>
 8007414:	0018      	movs	r0, r3
 8007416:	e721      	b.n	800725c <_printf_float+0xbc>
 8007418:	002a      	movs	r2, r5
 800741a:	2301      	movs	r3, #1
 800741c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800741e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007420:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007422:	321a      	adds	r2, #26
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	d100      	bne.n	800742c <_printf_float+0x28c>
 800742a:	e715      	b.n	8007258 <_printf_float+0xb8>
 800742c:	3401      	adds	r4, #1
 800742e:	e7e5      	b.n	80073fc <_printf_float+0x25c>
 8007430:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007432:	2b00      	cmp	r3, #0
 8007434:	dc3a      	bgt.n	80074ac <_printf_float+0x30c>
 8007436:	2301      	movs	r3, #1
 8007438:	4a1b      	ldr	r2, [pc, #108]	@ (80074a8 <_printf_float+0x308>)
 800743a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800743c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800743e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007440:	47a0      	blx	r4
 8007442:	3001      	adds	r0, #1
 8007444:	d100      	bne.n	8007448 <_printf_float+0x2a8>
 8007446:	e707      	b.n	8007258 <_printf_float+0xb8>
 8007448:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800744a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800744c:	4333      	orrs	r3, r6
 800744e:	d102      	bne.n	8007456 <_printf_float+0x2b6>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d5d5      	bpl.n	8007402 <_printf_float+0x262>
 8007456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800745a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800745c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800745e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007460:	47a0      	blx	r4
 8007462:	2300      	movs	r3, #0
 8007464:	3001      	adds	r0, #1
 8007466:	d100      	bne.n	800746a <_printf_float+0x2ca>
 8007468:	e6f6      	b.n	8007258 <_printf_float+0xb8>
 800746a:	930c      	str	r3, [sp, #48]	@ 0x30
 800746c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800746e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007470:	425b      	negs	r3, r3
 8007472:	4293      	cmp	r3, r2
 8007474:	dc01      	bgt.n	800747a <_printf_float+0x2da>
 8007476:	0033      	movs	r3, r6
 8007478:	e792      	b.n	80073a0 <_printf_float+0x200>
 800747a:	002a      	movs	r2, r5
 800747c:	2301      	movs	r3, #1
 800747e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007480:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007482:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007484:	321a      	adds	r2, #26
 8007486:	47a0      	blx	r4
 8007488:	3001      	adds	r0, #1
 800748a:	d100      	bne.n	800748e <_printf_float+0x2ee>
 800748c:	e6e4      	b.n	8007258 <_printf_float+0xb8>
 800748e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007490:	3301      	adds	r3, #1
 8007492:	e7ea      	b.n	800746a <_printf_float+0x2ca>
 8007494:	7fefffff 	.word	0x7fefffff
 8007498:	0800ad00 	.word	0x0800ad00
 800749c:	0800ad04 	.word	0x0800ad04
 80074a0:	0800ad08 	.word	0x0800ad08
 80074a4:	0800ad0c 	.word	0x0800ad0c
 80074a8:	0800ad10 	.word	0x0800ad10
 80074ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074ae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80074b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80074b2:	429e      	cmp	r6, r3
 80074b4:	dd00      	ble.n	80074b8 <_printf_float+0x318>
 80074b6:	001e      	movs	r6, r3
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	dc31      	bgt.n	8007520 <_printf_float+0x380>
 80074bc:	43f3      	mvns	r3, r6
 80074be:	2400      	movs	r4, #0
 80074c0:	17db      	asrs	r3, r3, #31
 80074c2:	4033      	ands	r3, r6
 80074c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80074c6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80074c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ca:	1af3      	subs	r3, r6, r3
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	dc30      	bgt.n	8007532 <_printf_float+0x392>
 80074d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074d4:	429a      	cmp	r2, r3
 80074d6:	dc38      	bgt.n	800754a <_printf_float+0x3aa>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d435      	bmi.n	800754a <_printf_float+0x3aa>
 80074de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80074e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074e4:	1b9b      	subs	r3, r3, r6
 80074e6:	1b14      	subs	r4, r2, r4
 80074e8:	429c      	cmp	r4, r3
 80074ea:	dd00      	ble.n	80074ee <_printf_float+0x34e>
 80074ec:	001c      	movs	r4, r3
 80074ee:	2c00      	cmp	r4, #0
 80074f0:	dc34      	bgt.n	800755c <_printf_float+0x3bc>
 80074f2:	43e3      	mvns	r3, r4
 80074f4:	2600      	movs	r6, #0
 80074f6:	17db      	asrs	r3, r3, #31
 80074f8:	401c      	ands	r4, r3
 80074fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	1b1b      	subs	r3, r3, r4
 8007502:	42b3      	cmp	r3, r6
 8007504:	dc00      	bgt.n	8007508 <_printf_float+0x368>
 8007506:	e77c      	b.n	8007402 <_printf_float+0x262>
 8007508:	002a      	movs	r2, r5
 800750a:	2301      	movs	r3, #1
 800750c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800750e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007510:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007512:	321a      	adds	r2, #26
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	d100      	bne.n	800751c <_printf_float+0x37c>
 800751a:	e69d      	b.n	8007258 <_printf_float+0xb8>
 800751c:	3601      	adds	r6, #1
 800751e:	e7ec      	b.n	80074fa <_printf_float+0x35a>
 8007520:	0033      	movs	r3, r6
 8007522:	003a      	movs	r2, r7
 8007524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007528:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800752a:	47a0      	blx	r4
 800752c:	3001      	adds	r0, #1
 800752e:	d1c5      	bne.n	80074bc <_printf_float+0x31c>
 8007530:	e692      	b.n	8007258 <_printf_float+0xb8>
 8007532:	002a      	movs	r2, r5
 8007534:	2301      	movs	r3, #1
 8007536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007538:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800753a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800753c:	321a      	adds	r2, #26
 800753e:	47b0      	blx	r6
 8007540:	3001      	adds	r0, #1
 8007542:	d100      	bne.n	8007546 <_printf_float+0x3a6>
 8007544:	e688      	b.n	8007258 <_printf_float+0xb8>
 8007546:	3401      	adds	r4, #1
 8007548:	e7bd      	b.n	80074c6 <_printf_float+0x326>
 800754a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800754c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800754e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007550:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007552:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007554:	47a0      	blx	r4
 8007556:	3001      	adds	r0, #1
 8007558:	d1c1      	bne.n	80074de <_printf_float+0x33e>
 800755a:	e67d      	b.n	8007258 <_printf_float+0xb8>
 800755c:	19ba      	adds	r2, r7, r6
 800755e:	0023      	movs	r3, r4
 8007560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007564:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007566:	47b0      	blx	r6
 8007568:	3001      	adds	r0, #1
 800756a:	d1c2      	bne.n	80074f2 <_printf_float+0x352>
 800756c:	e674      	b.n	8007258 <_printf_float+0xb8>
 800756e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007570:	930c      	str	r3, [sp, #48]	@ 0x30
 8007572:	2b01      	cmp	r3, #1
 8007574:	dc02      	bgt.n	800757c <_printf_float+0x3dc>
 8007576:	2301      	movs	r3, #1
 8007578:	421a      	tst	r2, r3
 800757a:	d039      	beq.n	80075f0 <_printf_float+0x450>
 800757c:	2301      	movs	r3, #1
 800757e:	003a      	movs	r2, r7
 8007580:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007584:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007586:	47b0      	blx	r6
 8007588:	3001      	adds	r0, #1
 800758a:	d100      	bne.n	800758e <_printf_float+0x3ee>
 800758c:	e664      	b.n	8007258 <_printf_float+0xb8>
 800758e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007590:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007596:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007598:	47b0      	blx	r6
 800759a:	3001      	adds	r0, #1
 800759c:	d100      	bne.n	80075a0 <_printf_float+0x400>
 800759e:	e65b      	b.n	8007258 <_printf_float+0xb8>
 80075a0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80075a2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80075a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075a6:	2200      	movs	r2, #0
 80075a8:	3b01      	subs	r3, #1
 80075aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ac:	2300      	movs	r3, #0
 80075ae:	f7f8 ff49 	bl	8000444 <__aeabi_dcmpeq>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d11a      	bne.n	80075ec <_printf_float+0x44c>
 80075b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075b8:	1c7a      	adds	r2, r7, #1
 80075ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80075c0:	47b0      	blx	r6
 80075c2:	3001      	adds	r0, #1
 80075c4:	d10e      	bne.n	80075e4 <_printf_float+0x444>
 80075c6:	e647      	b.n	8007258 <_printf_float+0xb8>
 80075c8:	002a      	movs	r2, r5
 80075ca:	2301      	movs	r3, #1
 80075cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80075d2:	321a      	adds	r2, #26
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	d100      	bne.n	80075dc <_printf_float+0x43c>
 80075da:	e63d      	b.n	8007258 <_printf_float+0xb8>
 80075dc:	3601      	adds	r6, #1
 80075de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075e0:	429e      	cmp	r6, r3
 80075e2:	dbf1      	blt.n	80075c8 <_printf_float+0x428>
 80075e4:	002a      	movs	r2, r5
 80075e6:	0023      	movs	r3, r4
 80075e8:	3250      	adds	r2, #80	@ 0x50
 80075ea:	e6da      	b.n	80073a2 <_printf_float+0x202>
 80075ec:	2600      	movs	r6, #0
 80075ee:	e7f6      	b.n	80075de <_printf_float+0x43e>
 80075f0:	003a      	movs	r2, r7
 80075f2:	e7e2      	b.n	80075ba <_printf_float+0x41a>
 80075f4:	002a      	movs	r2, r5
 80075f6:	2301      	movs	r3, #1
 80075f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80075fe:	3219      	adds	r2, #25
 8007600:	47b0      	blx	r6
 8007602:	3001      	adds	r0, #1
 8007604:	d100      	bne.n	8007608 <_printf_float+0x468>
 8007606:	e627      	b.n	8007258 <_printf_float+0xb8>
 8007608:	3401      	adds	r4, #1
 800760a:	68eb      	ldr	r3, [r5, #12]
 800760c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	42a3      	cmp	r3, r4
 8007612:	dcef      	bgt.n	80075f4 <_printf_float+0x454>
 8007614:	e6f9      	b.n	800740a <_printf_float+0x26a>
 8007616:	2400      	movs	r4, #0
 8007618:	e7f7      	b.n	800760a <_printf_float+0x46a>
 800761a:	46c0      	nop			@ (mov r8, r8)

0800761c <_printf_common>:
 800761c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800761e:	0016      	movs	r6, r2
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	688a      	ldr	r2, [r1, #8]
 8007624:	690b      	ldr	r3, [r1, #16]
 8007626:	000c      	movs	r4, r1
 8007628:	9000      	str	r0, [sp, #0]
 800762a:	4293      	cmp	r3, r2
 800762c:	da00      	bge.n	8007630 <_printf_common+0x14>
 800762e:	0013      	movs	r3, r2
 8007630:	0022      	movs	r2, r4
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	3243      	adds	r2, #67	@ 0x43
 8007636:	7812      	ldrb	r2, [r2, #0]
 8007638:	2a00      	cmp	r2, #0
 800763a:	d001      	beq.n	8007640 <_printf_common+0x24>
 800763c:	3301      	adds	r3, #1
 800763e:	6033      	str	r3, [r6, #0]
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	069b      	lsls	r3, r3, #26
 8007644:	d502      	bpl.n	800764c <_printf_common+0x30>
 8007646:	6833      	ldr	r3, [r6, #0]
 8007648:	3302      	adds	r3, #2
 800764a:	6033      	str	r3, [r6, #0]
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	2306      	movs	r3, #6
 8007650:	0015      	movs	r5, r2
 8007652:	401d      	ands	r5, r3
 8007654:	421a      	tst	r2, r3
 8007656:	d027      	beq.n	80076a8 <_printf_common+0x8c>
 8007658:	0023      	movs	r3, r4
 800765a:	3343      	adds	r3, #67	@ 0x43
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	1e5a      	subs	r2, r3, #1
 8007660:	4193      	sbcs	r3, r2
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	0692      	lsls	r2, r2, #26
 8007666:	d430      	bmi.n	80076ca <_printf_common+0xae>
 8007668:	0022      	movs	r2, r4
 800766a:	9901      	ldr	r1, [sp, #4]
 800766c:	9800      	ldr	r0, [sp, #0]
 800766e:	9d08      	ldr	r5, [sp, #32]
 8007670:	3243      	adds	r2, #67	@ 0x43
 8007672:	47a8      	blx	r5
 8007674:	3001      	adds	r0, #1
 8007676:	d025      	beq.n	80076c4 <_printf_common+0xa8>
 8007678:	2206      	movs	r2, #6
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	2500      	movs	r5, #0
 800767e:	4013      	ands	r3, r2
 8007680:	2b04      	cmp	r3, #4
 8007682:	d105      	bne.n	8007690 <_printf_common+0x74>
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	68e5      	ldr	r5, [r4, #12]
 8007688:	1aed      	subs	r5, r5, r3
 800768a:	43eb      	mvns	r3, r5
 800768c:	17db      	asrs	r3, r3, #31
 800768e:	401d      	ands	r5, r3
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	6922      	ldr	r2, [r4, #16]
 8007694:	4293      	cmp	r3, r2
 8007696:	dd01      	ble.n	800769c <_printf_common+0x80>
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	18ed      	adds	r5, r5, r3
 800769c:	2600      	movs	r6, #0
 800769e:	42b5      	cmp	r5, r6
 80076a0:	d120      	bne.n	80076e4 <_printf_common+0xc8>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e010      	b.n	80076c8 <_printf_common+0xac>
 80076a6:	3501      	adds	r5, #1
 80076a8:	68e3      	ldr	r3, [r4, #12]
 80076aa:	6832      	ldr	r2, [r6, #0]
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	42ab      	cmp	r3, r5
 80076b0:	ddd2      	ble.n	8007658 <_printf_common+0x3c>
 80076b2:	0022      	movs	r2, r4
 80076b4:	2301      	movs	r3, #1
 80076b6:	9901      	ldr	r1, [sp, #4]
 80076b8:	9800      	ldr	r0, [sp, #0]
 80076ba:	9f08      	ldr	r7, [sp, #32]
 80076bc:	3219      	adds	r2, #25
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	d1f0      	bne.n	80076a6 <_printf_common+0x8a>
 80076c4:	2001      	movs	r0, #1
 80076c6:	4240      	negs	r0, r0
 80076c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076ca:	2030      	movs	r0, #48	@ 0x30
 80076cc:	18e1      	adds	r1, r4, r3
 80076ce:	3143      	adds	r1, #67	@ 0x43
 80076d0:	7008      	strb	r0, [r1, #0]
 80076d2:	0021      	movs	r1, r4
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	3145      	adds	r1, #69	@ 0x45
 80076d8:	7809      	ldrb	r1, [r1, #0]
 80076da:	18a2      	adds	r2, r4, r2
 80076dc:	3243      	adds	r2, #67	@ 0x43
 80076de:	3302      	adds	r3, #2
 80076e0:	7011      	strb	r1, [r2, #0]
 80076e2:	e7c1      	b.n	8007668 <_printf_common+0x4c>
 80076e4:	0022      	movs	r2, r4
 80076e6:	2301      	movs	r3, #1
 80076e8:	9901      	ldr	r1, [sp, #4]
 80076ea:	9800      	ldr	r0, [sp, #0]
 80076ec:	9f08      	ldr	r7, [sp, #32]
 80076ee:	321a      	adds	r2, #26
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	d0e6      	beq.n	80076c4 <_printf_common+0xa8>
 80076f6:	3601      	adds	r6, #1
 80076f8:	e7d1      	b.n	800769e <_printf_common+0x82>
	...

080076fc <_printf_i>:
 80076fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076fe:	b08b      	sub	sp, #44	@ 0x2c
 8007700:	9206      	str	r2, [sp, #24]
 8007702:	000a      	movs	r2, r1
 8007704:	3243      	adds	r2, #67	@ 0x43
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	9005      	str	r0, [sp, #20]
 800770a:	9203      	str	r2, [sp, #12]
 800770c:	7e0a      	ldrb	r2, [r1, #24]
 800770e:	000c      	movs	r4, r1
 8007710:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007712:	2a78      	cmp	r2, #120	@ 0x78
 8007714:	d809      	bhi.n	800772a <_printf_i+0x2e>
 8007716:	2a62      	cmp	r2, #98	@ 0x62
 8007718:	d80b      	bhi.n	8007732 <_printf_i+0x36>
 800771a:	2a00      	cmp	r2, #0
 800771c:	d100      	bne.n	8007720 <_printf_i+0x24>
 800771e:	e0bc      	b.n	800789a <_printf_i+0x19e>
 8007720:	497b      	ldr	r1, [pc, #492]	@ (8007910 <_printf_i+0x214>)
 8007722:	9104      	str	r1, [sp, #16]
 8007724:	2a58      	cmp	r2, #88	@ 0x58
 8007726:	d100      	bne.n	800772a <_printf_i+0x2e>
 8007728:	e090      	b.n	800784c <_printf_i+0x150>
 800772a:	0025      	movs	r5, r4
 800772c:	3542      	adds	r5, #66	@ 0x42
 800772e:	702a      	strb	r2, [r5, #0]
 8007730:	e022      	b.n	8007778 <_printf_i+0x7c>
 8007732:	0010      	movs	r0, r2
 8007734:	3863      	subs	r0, #99	@ 0x63
 8007736:	2815      	cmp	r0, #21
 8007738:	d8f7      	bhi.n	800772a <_printf_i+0x2e>
 800773a:	f7f8 fcf3 	bl	8000124 <__gnu_thumb1_case_shi>
 800773e:	0016      	.short	0x0016
 8007740:	fff6001f 	.word	0xfff6001f
 8007744:	fff6fff6 	.word	0xfff6fff6
 8007748:	001ffff6 	.word	0x001ffff6
 800774c:	fff6fff6 	.word	0xfff6fff6
 8007750:	fff6fff6 	.word	0xfff6fff6
 8007754:	003600a1 	.word	0x003600a1
 8007758:	fff60080 	.word	0xfff60080
 800775c:	00b2fff6 	.word	0x00b2fff6
 8007760:	0036fff6 	.word	0x0036fff6
 8007764:	fff6fff6 	.word	0xfff6fff6
 8007768:	0084      	.short	0x0084
 800776a:	0025      	movs	r5, r4
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	3542      	adds	r5, #66	@ 0x42
 8007770:	1d11      	adds	r1, r2, #4
 8007772:	6019      	str	r1, [r3, #0]
 8007774:	6813      	ldr	r3, [r2, #0]
 8007776:	702b      	strb	r3, [r5, #0]
 8007778:	2301      	movs	r3, #1
 800777a:	e0a0      	b.n	80078be <_printf_i+0x1c2>
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	6809      	ldr	r1, [r1, #0]
 8007780:	1d02      	adds	r2, r0, #4
 8007782:	060d      	lsls	r5, r1, #24
 8007784:	d50b      	bpl.n	800779e <_printf_i+0xa2>
 8007786:	6806      	ldr	r6, [r0, #0]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	2e00      	cmp	r6, #0
 800778c:	da03      	bge.n	8007796 <_printf_i+0x9a>
 800778e:	232d      	movs	r3, #45	@ 0x2d
 8007790:	9a03      	ldr	r2, [sp, #12]
 8007792:	4276      	negs	r6, r6
 8007794:	7013      	strb	r3, [r2, #0]
 8007796:	4b5e      	ldr	r3, [pc, #376]	@ (8007910 <_printf_i+0x214>)
 8007798:	270a      	movs	r7, #10
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	e018      	b.n	80077d0 <_printf_i+0xd4>
 800779e:	6806      	ldr	r6, [r0, #0]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	0649      	lsls	r1, r1, #25
 80077a4:	d5f1      	bpl.n	800778a <_printf_i+0x8e>
 80077a6:	b236      	sxth	r6, r6
 80077a8:	e7ef      	b.n	800778a <_printf_i+0x8e>
 80077aa:	6808      	ldr	r0, [r1, #0]
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	c940      	ldmia	r1!, {r6}
 80077b0:	0605      	lsls	r5, r0, #24
 80077b2:	d402      	bmi.n	80077ba <_printf_i+0xbe>
 80077b4:	0640      	lsls	r0, r0, #25
 80077b6:	d500      	bpl.n	80077ba <_printf_i+0xbe>
 80077b8:	b2b6      	uxth	r6, r6
 80077ba:	6019      	str	r1, [r3, #0]
 80077bc:	4b54      	ldr	r3, [pc, #336]	@ (8007910 <_printf_i+0x214>)
 80077be:	270a      	movs	r7, #10
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	2a6f      	cmp	r2, #111	@ 0x6f
 80077c4:	d100      	bne.n	80077c8 <_printf_i+0xcc>
 80077c6:	3f02      	subs	r7, #2
 80077c8:	0023      	movs	r3, r4
 80077ca:	2200      	movs	r2, #0
 80077cc:	3343      	adds	r3, #67	@ 0x43
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	60a3      	str	r3, [r4, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	db03      	blt.n	80077e0 <_printf_i+0xe4>
 80077d8:	2104      	movs	r1, #4
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	438a      	bics	r2, r1
 80077de:	6022      	str	r2, [r4, #0]
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	d102      	bne.n	80077ea <_printf_i+0xee>
 80077e4:	9d03      	ldr	r5, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <_printf_i+0x108>
 80077ea:	9d03      	ldr	r5, [sp, #12]
 80077ec:	0030      	movs	r0, r6
 80077ee:	0039      	movs	r1, r7
 80077f0:	f7f8 fd28 	bl	8000244 <__aeabi_uidivmod>
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	3d01      	subs	r5, #1
 80077f8:	5c5b      	ldrb	r3, [r3, r1]
 80077fa:	702b      	strb	r3, [r5, #0]
 80077fc:	0033      	movs	r3, r6
 80077fe:	0006      	movs	r6, r0
 8007800:	429f      	cmp	r7, r3
 8007802:	d9f3      	bls.n	80077ec <_printf_i+0xf0>
 8007804:	2f08      	cmp	r7, #8
 8007806:	d109      	bne.n	800781c <_printf_i+0x120>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	07db      	lsls	r3, r3, #31
 800780c:	d506      	bpl.n	800781c <_printf_i+0x120>
 800780e:	6862      	ldr	r2, [r4, #4]
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	dc02      	bgt.n	800781c <_printf_i+0x120>
 8007816:	2330      	movs	r3, #48	@ 0x30
 8007818:	3d01      	subs	r5, #1
 800781a:	702b      	strb	r3, [r5, #0]
 800781c:	9b03      	ldr	r3, [sp, #12]
 800781e:	1b5b      	subs	r3, r3, r5
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	9b07      	ldr	r3, [sp, #28]
 8007824:	0021      	movs	r1, r4
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	9805      	ldr	r0, [sp, #20]
 800782a:	9b06      	ldr	r3, [sp, #24]
 800782c:	aa09      	add	r2, sp, #36	@ 0x24
 800782e:	f7ff fef5 	bl	800761c <_printf_common>
 8007832:	3001      	adds	r0, #1
 8007834:	d148      	bne.n	80078c8 <_printf_i+0x1cc>
 8007836:	2001      	movs	r0, #1
 8007838:	4240      	negs	r0, r0
 800783a:	b00b      	add	sp, #44	@ 0x2c
 800783c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783e:	2220      	movs	r2, #32
 8007840:	6809      	ldr	r1, [r1, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	6022      	str	r2, [r4, #0]
 8007846:	2278      	movs	r2, #120	@ 0x78
 8007848:	4932      	ldr	r1, [pc, #200]	@ (8007914 <_printf_i+0x218>)
 800784a:	9104      	str	r1, [sp, #16]
 800784c:	0021      	movs	r1, r4
 800784e:	3145      	adds	r1, #69	@ 0x45
 8007850:	700a      	strb	r2, [r1, #0]
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	c940      	ldmia	r1!, {r6}
 8007858:	0610      	lsls	r0, r2, #24
 800785a:	d402      	bmi.n	8007862 <_printf_i+0x166>
 800785c:	0650      	lsls	r0, r2, #25
 800785e:	d500      	bpl.n	8007862 <_printf_i+0x166>
 8007860:	b2b6      	uxth	r6, r6
 8007862:	6019      	str	r1, [r3, #0]
 8007864:	07d3      	lsls	r3, r2, #31
 8007866:	d502      	bpl.n	800786e <_printf_i+0x172>
 8007868:	2320      	movs	r3, #32
 800786a:	4313      	orrs	r3, r2
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	2e00      	cmp	r6, #0
 8007870:	d001      	beq.n	8007876 <_printf_i+0x17a>
 8007872:	2710      	movs	r7, #16
 8007874:	e7a8      	b.n	80077c8 <_printf_i+0xcc>
 8007876:	2220      	movs	r2, #32
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	4393      	bics	r3, r2
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	e7f8      	b.n	8007872 <_printf_i+0x176>
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	680d      	ldr	r5, [r1, #0]
 8007884:	1d10      	adds	r0, r2, #4
 8007886:	6949      	ldr	r1, [r1, #20]
 8007888:	6018      	str	r0, [r3, #0]
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	062e      	lsls	r6, r5, #24
 800788e:	d501      	bpl.n	8007894 <_printf_i+0x198>
 8007890:	6019      	str	r1, [r3, #0]
 8007892:	e002      	b.n	800789a <_printf_i+0x19e>
 8007894:	066d      	lsls	r5, r5, #25
 8007896:	d5fb      	bpl.n	8007890 <_printf_i+0x194>
 8007898:	8019      	strh	r1, [r3, #0]
 800789a:	2300      	movs	r3, #0
 800789c:	9d03      	ldr	r5, [sp, #12]
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	e7bf      	b.n	8007822 <_printf_i+0x126>
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	1d11      	adds	r1, r2, #4
 80078a6:	6019      	str	r1, [r3, #0]
 80078a8:	6815      	ldr	r5, [r2, #0]
 80078aa:	2100      	movs	r1, #0
 80078ac:	0028      	movs	r0, r5
 80078ae:	6862      	ldr	r2, [r4, #4]
 80078b0:	f000 f9f9 	bl	8007ca6 <memchr>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d001      	beq.n	80078bc <_printf_i+0x1c0>
 80078b8:	1b40      	subs	r0, r0, r5
 80078ba:	6060      	str	r0, [r4, #4]
 80078bc:	6863      	ldr	r3, [r4, #4]
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	2300      	movs	r3, #0
 80078c2:	9a03      	ldr	r2, [sp, #12]
 80078c4:	7013      	strb	r3, [r2, #0]
 80078c6:	e7ac      	b.n	8007822 <_printf_i+0x126>
 80078c8:	002a      	movs	r2, r5
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	9906      	ldr	r1, [sp, #24]
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	9d07      	ldr	r5, [sp, #28]
 80078d2:	47a8      	blx	r5
 80078d4:	3001      	adds	r0, #1
 80078d6:	d0ae      	beq.n	8007836 <_printf_i+0x13a>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	079b      	lsls	r3, r3, #30
 80078dc:	d415      	bmi.n	800790a <_printf_i+0x20e>
 80078de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e0:	68e0      	ldr	r0, [r4, #12]
 80078e2:	4298      	cmp	r0, r3
 80078e4:	daa9      	bge.n	800783a <_printf_i+0x13e>
 80078e6:	0018      	movs	r0, r3
 80078e8:	e7a7      	b.n	800783a <_printf_i+0x13e>
 80078ea:	0022      	movs	r2, r4
 80078ec:	2301      	movs	r3, #1
 80078ee:	9906      	ldr	r1, [sp, #24]
 80078f0:	9805      	ldr	r0, [sp, #20]
 80078f2:	9e07      	ldr	r6, [sp, #28]
 80078f4:	3219      	adds	r2, #25
 80078f6:	47b0      	blx	r6
 80078f8:	3001      	adds	r0, #1
 80078fa:	d09c      	beq.n	8007836 <_printf_i+0x13a>
 80078fc:	3501      	adds	r5, #1
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	42ab      	cmp	r3, r5
 8007906:	dcf0      	bgt.n	80078ea <_printf_i+0x1ee>
 8007908:	e7e9      	b.n	80078de <_printf_i+0x1e2>
 800790a:	2500      	movs	r5, #0
 800790c:	e7f7      	b.n	80078fe <_printf_i+0x202>
 800790e:	46c0      	nop			@ (mov r8, r8)
 8007910:	0800ad12 	.word	0x0800ad12
 8007914:	0800ad23 	.word	0x0800ad23

08007918 <std>:
 8007918:	2300      	movs	r3, #0
 800791a:	b510      	push	{r4, lr}
 800791c:	0004      	movs	r4, r0
 800791e:	6003      	str	r3, [r0, #0]
 8007920:	6043      	str	r3, [r0, #4]
 8007922:	6083      	str	r3, [r0, #8]
 8007924:	8181      	strh	r1, [r0, #12]
 8007926:	6643      	str	r3, [r0, #100]	@ 0x64
 8007928:	81c2      	strh	r2, [r0, #14]
 800792a:	6103      	str	r3, [r0, #16]
 800792c:	6143      	str	r3, [r0, #20]
 800792e:	6183      	str	r3, [r0, #24]
 8007930:	0019      	movs	r1, r3
 8007932:	2208      	movs	r2, #8
 8007934:	305c      	adds	r0, #92	@ 0x5c
 8007936:	f000 f92f 	bl	8007b98 <memset>
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <std+0x50>)
 800793c:	6224      	str	r4, [r4, #32]
 800793e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007940:	4b0a      	ldr	r3, [pc, #40]	@ (800796c <std+0x54>)
 8007942:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007944:	4b0a      	ldr	r3, [pc, #40]	@ (8007970 <std+0x58>)
 8007946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007948:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <std+0x5c>)
 800794a:	6323      	str	r3, [r4, #48]	@ 0x30
 800794c:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <std+0x60>)
 800794e:	429c      	cmp	r4, r3
 8007950:	d005      	beq.n	800795e <std+0x46>
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <std+0x64>)
 8007954:	429c      	cmp	r4, r3
 8007956:	d002      	beq.n	800795e <std+0x46>
 8007958:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <std+0x68>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d103      	bne.n	8007966 <std+0x4e>
 800795e:	0020      	movs	r0, r4
 8007960:	3058      	adds	r0, #88	@ 0x58
 8007962:	f000 f99d 	bl	8007ca0 <__retarget_lock_init_recursive>
 8007966:	bd10      	pop	{r4, pc}
 8007968:	08007b01 	.word	0x08007b01
 800796c:	08007b29 	.word	0x08007b29
 8007970:	08007b61 	.word	0x08007b61
 8007974:	08007b8d 	.word	0x08007b8d
 8007978:	200005b8 	.word	0x200005b8
 800797c:	20000620 	.word	0x20000620
 8007980:	20000688 	.word	0x20000688

08007984 <stdio_exit_handler>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4a03      	ldr	r2, [pc, #12]	@ (8007994 <stdio_exit_handler+0x10>)
 8007988:	4903      	ldr	r1, [pc, #12]	@ (8007998 <stdio_exit_handler+0x14>)
 800798a:	4804      	ldr	r0, [pc, #16]	@ (800799c <stdio_exit_handler+0x18>)
 800798c:	f000 f86c 	bl	8007a68 <_fwalk_sglue>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	2000000c 	.word	0x2000000c
 8007998:	08009979 	.word	0x08009979
 800799c:	2000001c 	.word	0x2000001c

080079a0 <cleanup_stdio>:
 80079a0:	6841      	ldr	r1, [r0, #4]
 80079a2:	4b0b      	ldr	r3, [pc, #44]	@ (80079d0 <cleanup_stdio+0x30>)
 80079a4:	b510      	push	{r4, lr}
 80079a6:	0004      	movs	r4, r0
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d001      	beq.n	80079b0 <cleanup_stdio+0x10>
 80079ac:	f001 ffe4 	bl	8009978 <_fflush_r>
 80079b0:	68a1      	ldr	r1, [r4, #8]
 80079b2:	4b08      	ldr	r3, [pc, #32]	@ (80079d4 <cleanup_stdio+0x34>)
 80079b4:	4299      	cmp	r1, r3
 80079b6:	d002      	beq.n	80079be <cleanup_stdio+0x1e>
 80079b8:	0020      	movs	r0, r4
 80079ba:	f001 ffdd 	bl	8009978 <_fflush_r>
 80079be:	68e1      	ldr	r1, [r4, #12]
 80079c0:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <cleanup_stdio+0x38>)
 80079c2:	4299      	cmp	r1, r3
 80079c4:	d002      	beq.n	80079cc <cleanup_stdio+0x2c>
 80079c6:	0020      	movs	r0, r4
 80079c8:	f001 ffd6 	bl	8009978 <_fflush_r>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	46c0      	nop			@ (mov r8, r8)
 80079d0:	200005b8 	.word	0x200005b8
 80079d4:	20000620 	.word	0x20000620
 80079d8:	20000688 	.word	0x20000688

080079dc <global_stdio_init.part.0>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4b09      	ldr	r3, [pc, #36]	@ (8007a04 <global_stdio_init.part.0+0x28>)
 80079e0:	4a09      	ldr	r2, [pc, #36]	@ (8007a08 <global_stdio_init.part.0+0x2c>)
 80079e2:	2104      	movs	r1, #4
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	4809      	ldr	r0, [pc, #36]	@ (8007a0c <global_stdio_init.part.0+0x30>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	f7ff ff95 	bl	8007918 <std>
 80079ee:	2201      	movs	r2, #1
 80079f0:	2109      	movs	r1, #9
 80079f2:	4807      	ldr	r0, [pc, #28]	@ (8007a10 <global_stdio_init.part.0+0x34>)
 80079f4:	f7ff ff90 	bl	8007918 <std>
 80079f8:	2202      	movs	r2, #2
 80079fa:	2112      	movs	r1, #18
 80079fc:	4805      	ldr	r0, [pc, #20]	@ (8007a14 <global_stdio_init.part.0+0x38>)
 80079fe:	f7ff ff8b 	bl	8007918 <std>
 8007a02:	bd10      	pop	{r4, pc}
 8007a04:	200006f0 	.word	0x200006f0
 8007a08:	08007985 	.word	0x08007985
 8007a0c:	200005b8 	.word	0x200005b8
 8007a10:	20000620 	.word	0x20000620
 8007a14:	20000688 	.word	0x20000688

08007a18 <__sfp_lock_acquire>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	4802      	ldr	r0, [pc, #8]	@ (8007a24 <__sfp_lock_acquire+0xc>)
 8007a1c:	f000 f941 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	200006f9 	.word	0x200006f9

08007a28 <__sfp_lock_release>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4802      	ldr	r0, [pc, #8]	@ (8007a34 <__sfp_lock_release+0xc>)
 8007a2c:	f000 f93a 	bl	8007ca4 <__retarget_lock_release_recursive>
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	200006f9 	.word	0x200006f9

08007a38 <__sinit>:
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	0004      	movs	r4, r0
 8007a3c:	f7ff ffec 	bl	8007a18 <__sfp_lock_acquire>
 8007a40:	6a23      	ldr	r3, [r4, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <__sinit+0x14>
 8007a46:	f7ff ffef 	bl	8007a28 <__sfp_lock_release>
 8007a4a:	bd10      	pop	{r4, pc}
 8007a4c:	4b04      	ldr	r3, [pc, #16]	@ (8007a60 <__sinit+0x28>)
 8007a4e:	6223      	str	r3, [r4, #32]
 8007a50:	4b04      	ldr	r3, [pc, #16]	@ (8007a64 <__sinit+0x2c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1f6      	bne.n	8007a46 <__sinit+0xe>
 8007a58:	f7ff ffc0 	bl	80079dc <global_stdio_init.part.0>
 8007a5c:	e7f3      	b.n	8007a46 <__sinit+0xe>
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	080079a1 	.word	0x080079a1
 8007a64:	200006f0 	.word	0x200006f0

08007a68 <_fwalk_sglue>:
 8007a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a6a:	0014      	movs	r4, r2
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	9000      	str	r0, [sp, #0]
 8007a70:	9101      	str	r1, [sp, #4]
 8007a72:	68a5      	ldr	r5, [r4, #8]
 8007a74:	6867      	ldr	r7, [r4, #4]
 8007a76:	3f01      	subs	r7, #1
 8007a78:	d504      	bpl.n	8007a84 <_fwalk_sglue+0x1c>
 8007a7a:	6824      	ldr	r4, [r4, #0]
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d1f8      	bne.n	8007a72 <_fwalk_sglue+0xa>
 8007a80:	0030      	movs	r0, r6
 8007a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a84:	89ab      	ldrh	r3, [r5, #12]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d908      	bls.n	8007a9c <_fwalk_sglue+0x34>
 8007a8a:	220e      	movs	r2, #14
 8007a8c:	5eab      	ldrsh	r3, [r5, r2]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	d004      	beq.n	8007a9c <_fwalk_sglue+0x34>
 8007a92:	0029      	movs	r1, r5
 8007a94:	9800      	ldr	r0, [sp, #0]
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	4798      	blx	r3
 8007a9a:	4306      	orrs	r6, r0
 8007a9c:	3568      	adds	r5, #104	@ 0x68
 8007a9e:	e7ea      	b.n	8007a76 <_fwalk_sglue+0xe>

08007aa0 <iprintf>:
 8007aa0:	b40f      	push	{r0, r1, r2, r3}
 8007aa2:	b507      	push	{r0, r1, r2, lr}
 8007aa4:	4905      	ldr	r1, [pc, #20]	@ (8007abc <iprintf+0x1c>)
 8007aa6:	ab04      	add	r3, sp, #16
 8007aa8:	6808      	ldr	r0, [r1, #0]
 8007aaa:	cb04      	ldmia	r3!, {r2}
 8007aac:	6881      	ldr	r1, [r0, #8]
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	f001 fdc0 	bl	8009634 <_vfiprintf_r>
 8007ab4:	b003      	add	sp, #12
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	b004      	add	sp, #16
 8007aba:	4718      	bx	r3
 8007abc:	20000018 	.word	0x20000018

08007ac0 <siprintf>:
 8007ac0:	b40e      	push	{r1, r2, r3}
 8007ac2:	b500      	push	{lr}
 8007ac4:	490b      	ldr	r1, [pc, #44]	@ (8007af4 <siprintf+0x34>)
 8007ac6:	b09c      	sub	sp, #112	@ 0x70
 8007ac8:	ab1d      	add	r3, sp, #116	@ 0x74
 8007aca:	9002      	str	r0, [sp, #8]
 8007acc:	9006      	str	r0, [sp, #24]
 8007ace:	9107      	str	r1, [sp, #28]
 8007ad0:	9104      	str	r1, [sp, #16]
 8007ad2:	4809      	ldr	r0, [pc, #36]	@ (8007af8 <siprintf+0x38>)
 8007ad4:	4909      	ldr	r1, [pc, #36]	@ (8007afc <siprintf+0x3c>)
 8007ad6:	cb04      	ldmia	r3!, {r2}
 8007ad8:	9105      	str	r1, [sp, #20]
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	a902      	add	r1, sp, #8
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	f001 fc82 	bl	80093e8 <_svfiprintf_r>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	9b02      	ldr	r3, [sp, #8]
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	b01c      	add	sp, #112	@ 0x70
 8007aec:	bc08      	pop	{r3}
 8007aee:	b003      	add	sp, #12
 8007af0:	4718      	bx	r3
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	7fffffff 	.word	0x7fffffff
 8007af8:	20000018 	.word	0x20000018
 8007afc:	ffff0208 	.word	0xffff0208

08007b00 <__sread>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	000c      	movs	r4, r1
 8007b04:	250e      	movs	r5, #14
 8007b06:	5f49      	ldrsh	r1, [r1, r5]
 8007b08:	f000 f878 	bl	8007bfc <_read_r>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	db03      	blt.n	8007b18 <__sread+0x18>
 8007b10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007b12:	181b      	adds	r3, r3, r0
 8007b14:	6563      	str	r3, [r4, #84]	@ 0x54
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	4a02      	ldr	r2, [pc, #8]	@ (8007b24 <__sread+0x24>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	e7f9      	b.n	8007b16 <__sread+0x16>
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	ffffefff 	.word	0xffffefff

08007b28 <__swrite>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	001f      	movs	r7, r3
 8007b2c:	898b      	ldrh	r3, [r1, #12]
 8007b2e:	0005      	movs	r5, r0
 8007b30:	000c      	movs	r4, r1
 8007b32:	0016      	movs	r6, r2
 8007b34:	05db      	lsls	r3, r3, #23
 8007b36:	d505      	bpl.n	8007b44 <__swrite+0x1c>
 8007b38:	230e      	movs	r3, #14
 8007b3a:	5ec9      	ldrsh	r1, [r1, r3]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2302      	movs	r3, #2
 8007b40:	f000 f848 	bl	8007bd4 <_lseek_r>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	4a05      	ldr	r2, [pc, #20]	@ (8007b5c <__swrite+0x34>)
 8007b48:	0028      	movs	r0, r5
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	0032      	movs	r2, r6
 8007b50:	230e      	movs	r3, #14
 8007b52:	5ee1      	ldrsh	r1, [r4, r3]
 8007b54:	003b      	movs	r3, r7
 8007b56:	f000 f865 	bl	8007c24 <_write_r>
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5c:	ffffefff 	.word	0xffffefff

08007b60 <__sseek>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	000c      	movs	r4, r1
 8007b64:	250e      	movs	r5, #14
 8007b66:	5f49      	ldrsh	r1, [r1, r5]
 8007b68:	f000 f834 	bl	8007bd4 <_lseek_r>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	1c42      	adds	r2, r0, #1
 8007b70:	d103      	bne.n	8007b7a <__sseek+0x1a>
 8007b72:	4a05      	ldr	r2, [pc, #20]	@ (8007b88 <__sseek+0x28>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	2280      	movs	r2, #128	@ 0x80
 8007b7c:	0152      	lsls	r2, r2, #5
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b84:	e7f8      	b.n	8007b78 <__sseek+0x18>
 8007b86:	46c0      	nop			@ (mov r8, r8)
 8007b88:	ffffefff 	.word	0xffffefff

08007b8c <__sclose>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	230e      	movs	r3, #14
 8007b90:	5ec9      	ldrsh	r1, [r1, r3]
 8007b92:	f000 f80d 	bl	8007bb0 <_close_r>
 8007b96:	bd10      	pop	{r4, pc}

08007b98 <memset>:
 8007b98:	0003      	movs	r3, r0
 8007b9a:	1882      	adds	r2, r0, r2
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d100      	bne.n	8007ba2 <memset+0xa>
 8007ba0:	4770      	bx	lr
 8007ba2:	7019      	strb	r1, [r3, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	e7f9      	b.n	8007b9c <memset+0x4>

08007ba8 <_localeconv_r>:
 8007ba8:	4800      	ldr	r0, [pc, #0]	@ (8007bac <_localeconv_r+0x4>)
 8007baa:	4770      	bx	lr
 8007bac:	20000158 	.word	0x20000158

08007bb0 <_close_r>:
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	b570      	push	{r4, r5, r6, lr}
 8007bb4:	4d06      	ldr	r5, [pc, #24]	@ (8007bd0 <_close_r+0x20>)
 8007bb6:	0004      	movs	r4, r0
 8007bb8:	0008      	movs	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7fa ffd5 	bl	8002b6a <_close>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d103      	bne.n	8007bcc <_close_r+0x1c>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d000      	beq.n	8007bcc <_close_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	200006f4 	.word	0x200006f4

08007bd4 <_lseek_r>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	0004      	movs	r4, r0
 8007bd8:	0008      	movs	r0, r1
 8007bda:	0011      	movs	r1, r2
 8007bdc:	001a      	movs	r2, r3
 8007bde:	2300      	movs	r3, #0
 8007be0:	4d05      	ldr	r5, [pc, #20]	@ (8007bf8 <_lseek_r+0x24>)
 8007be2:	602b      	str	r3, [r5, #0]
 8007be4:	f7fa ffe2 	bl	8002bac <_lseek>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d103      	bne.n	8007bf4 <_lseek_r+0x20>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d000      	beq.n	8007bf4 <_lseek_r+0x20>
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	200006f4 	.word	0x200006f4

08007bfc <_read_r>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	0004      	movs	r4, r0
 8007c00:	0008      	movs	r0, r1
 8007c02:	0011      	movs	r1, r2
 8007c04:	001a      	movs	r2, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	4d05      	ldr	r5, [pc, #20]	@ (8007c20 <_read_r+0x24>)
 8007c0a:	602b      	str	r3, [r5, #0]
 8007c0c:	f7fa ff74 	bl	8002af8 <_read>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d103      	bne.n	8007c1c <_read_r+0x20>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d000      	beq.n	8007c1c <_read_r+0x20>
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}
 8007c1e:	46c0      	nop			@ (mov r8, r8)
 8007c20:	200006f4 	.word	0x200006f4

08007c24 <_write_r>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	0004      	movs	r4, r0
 8007c28:	0008      	movs	r0, r1
 8007c2a:	0011      	movs	r1, r2
 8007c2c:	001a      	movs	r2, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4d05      	ldr	r5, [pc, #20]	@ (8007c48 <_write_r+0x24>)
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7fa ff7d 	bl	8002b32 <_write>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d103      	bne.n	8007c44 <_write_r+0x20>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d000      	beq.n	8007c44 <_write_r+0x20>
 8007c42:	6023      	str	r3, [r4, #0]
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	200006f4 	.word	0x200006f4

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	@ (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	46c0      	nop			@ (mov r8, r8)
 8007c54:	20000018 	.word	0x20000018

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	4c0c      	ldr	r4, [pc, #48]	@ (8007c90 <__libc_init_array+0x38>)
 8007c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007c94 <__libc_init_array+0x3c>)
 8007c60:	1b64      	subs	r4, r4, r5
 8007c62:	10a4      	asrs	r4, r4, #2
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	2600      	movs	r6, #0
 8007c6a:	f002 f909 	bl	8009e80 <_init>
 8007c6e:	4c0a      	ldr	r4, [pc, #40]	@ (8007c98 <__libc_init_array+0x40>)
 8007c70:	4d0a      	ldr	r5, [pc, #40]	@ (8007c9c <__libc_init_array+0x44>)
 8007c72:	1b64      	subs	r4, r4, r5
 8007c74:	10a4      	asrs	r4, r4, #2
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	00b3      	lsls	r3, r6, #2
 8007c7e:	58eb      	ldr	r3, [r5, r3]
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	00b3      	lsls	r3, r6, #2
 8007c88:	58eb      	ldr	r3, [r5, r3]
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	0800b070 	.word	0x0800b070
 8007c94:	0800b070 	.word	0x0800b070
 8007c98:	0800b074 	.word	0x0800b074
 8007c9c:	0800b070 	.word	0x0800b070

08007ca0 <__retarget_lock_init_recursive>:
 8007ca0:	4770      	bx	lr

08007ca2 <__retarget_lock_acquire_recursive>:
 8007ca2:	4770      	bx	lr

08007ca4 <__retarget_lock_release_recursive>:
 8007ca4:	4770      	bx	lr

08007ca6 <memchr>:
 8007ca6:	b2c9      	uxtb	r1, r1
 8007ca8:	1882      	adds	r2, r0, r2
 8007caa:	4290      	cmp	r0, r2
 8007cac:	d101      	bne.n	8007cb2 <memchr+0xc>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	4770      	bx	lr
 8007cb2:	7803      	ldrb	r3, [r0, #0]
 8007cb4:	428b      	cmp	r3, r1
 8007cb6:	d0fb      	beq.n	8007cb0 <memchr+0xa>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	e7f6      	b.n	8007caa <memchr+0x4>

08007cbc <memcpy>:
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	b510      	push	{r4, lr}
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d100      	bne.n	8007cc6 <memcpy+0xa>
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	5ccc      	ldrb	r4, [r1, r3]
 8007cc8:	54c4      	strb	r4, [r0, r3]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	e7f8      	b.n	8007cc0 <memcpy+0x4>

08007cce <quorem>:
 8007cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd0:	6902      	ldr	r2, [r0, #16]
 8007cd2:	690f      	ldr	r7, [r1, #16]
 8007cd4:	b087      	sub	sp, #28
 8007cd6:	0006      	movs	r6, r0
 8007cd8:	000b      	movs	r3, r1
 8007cda:	2000      	movs	r0, #0
 8007cdc:	9102      	str	r1, [sp, #8]
 8007cde:	42ba      	cmp	r2, r7
 8007ce0:	db6d      	blt.n	8007dbe <quorem+0xf0>
 8007ce2:	3f01      	subs	r7, #1
 8007ce4:	00bc      	lsls	r4, r7, #2
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	191b      	adds	r3, r3, r4
 8007cec:	9303      	str	r3, [sp, #12]
 8007cee:	0033      	movs	r3, r6
 8007cf0:	3314      	adds	r3, #20
 8007cf2:	191c      	adds	r4, r3, r4
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	9804      	ldr	r0, [sp, #16]
 8007cfe:	681d      	ldr	r5, [r3, #0]
 8007d00:	3501      	adds	r5, #1
 8007d02:	0029      	movs	r1, r5
 8007d04:	f7f8 fa18 	bl	8000138 <__udivsi3>
 8007d08:	9b04      	ldr	r3, [sp, #16]
 8007d0a:	9000      	str	r0, [sp, #0]
 8007d0c:	42ab      	cmp	r3, r5
 8007d0e:	d32b      	bcc.n	8007d68 <quorem+0x9a>
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	9d01      	ldr	r5, [sp, #4]
 8007d14:	469c      	mov	ip, r3
 8007d16:	2300      	movs	r3, #0
 8007d18:	9305      	str	r3, [sp, #20]
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	4662      	mov	r2, ip
 8007d1e:	ca08      	ldmia	r2!, {r3}
 8007d20:	6828      	ldr	r0, [r5, #0]
 8007d22:	4694      	mov	ip, r2
 8007d24:	9a00      	ldr	r2, [sp, #0]
 8007d26:	b299      	uxth	r1, r3
 8007d28:	4351      	muls	r1, r2
 8007d2a:	9a05      	ldr	r2, [sp, #20]
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	1889      	adds	r1, r1, r2
 8007d30:	9a00      	ldr	r2, [sp, #0]
 8007d32:	4353      	muls	r3, r2
 8007d34:	0c0a      	lsrs	r2, r1, #16
 8007d36:	189b      	adds	r3, r3, r2
 8007d38:	0c1a      	lsrs	r2, r3, #16
 8007d3a:	b289      	uxth	r1, r1
 8007d3c:	9205      	str	r2, [sp, #20]
 8007d3e:	b282      	uxth	r2, r0
 8007d40:	1a52      	subs	r2, r2, r1
 8007d42:	9904      	ldr	r1, [sp, #16]
 8007d44:	0c00      	lsrs	r0, r0, #16
 8007d46:	1852      	adds	r2, r2, r1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	1411      	asrs	r1, r2, #16
 8007d4c:	1ac3      	subs	r3, r0, r3
 8007d4e:	185b      	adds	r3, r3, r1
 8007d50:	1419      	asrs	r1, r3, #16
 8007d52:	b292      	uxth	r2, r2
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	431a      	orrs	r2, r3
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	9104      	str	r1, [sp, #16]
 8007d5c:	c504      	stmia	r5!, {r2}
 8007d5e:	4563      	cmp	r3, ip
 8007d60:	d2dc      	bcs.n	8007d1c <quorem+0x4e>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d030      	beq.n	8007dca <quorem+0xfc>
 8007d68:	0030      	movs	r0, r6
 8007d6a:	9902      	ldr	r1, [sp, #8]
 8007d6c:	f001 f9c6 	bl	80090fc <__mcmp>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	db23      	blt.n	8007dbc <quorem+0xee>
 8007d74:	0034      	movs	r4, r6
 8007d76:	2500      	movs	r5, #0
 8007d78:	9902      	ldr	r1, [sp, #8]
 8007d7a:	3414      	adds	r4, #20
 8007d7c:	3114      	adds	r1, #20
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	c901      	ldmia	r1!, {r0}
 8007d82:	9302      	str	r3, [sp, #8]
 8007d84:	466b      	mov	r3, sp
 8007d86:	891b      	ldrh	r3, [r3, #8]
 8007d88:	b282      	uxth	r2, r0
 8007d8a:	1a9a      	subs	r2, r3, r2
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	1952      	adds	r2, r2, r5
 8007d90:	0c00      	lsrs	r0, r0, #16
 8007d92:	0c1b      	lsrs	r3, r3, #16
 8007d94:	1a1b      	subs	r3, r3, r0
 8007d96:	1410      	asrs	r0, r2, #16
 8007d98:	181b      	adds	r3, r3, r0
 8007d9a:	141d      	asrs	r5, r3, #16
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	041b      	lsls	r3, r3, #16
 8007da0:	431a      	orrs	r2, r3
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	c404      	stmia	r4!, {r2}
 8007da6:	428b      	cmp	r3, r1
 8007da8:	d2e9      	bcs.n	8007d7e <quorem+0xb0>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	00bb      	lsls	r3, r7, #2
 8007dae:	18d3      	adds	r3, r2, r3
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	d013      	beq.n	8007dde <quorem+0x110>
 8007db6:	9b00      	ldr	r3, [sp, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	9800      	ldr	r0, [sp, #0]
 8007dbe:	b007      	add	sp, #28
 8007dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d104      	bne.n	8007dd2 <quorem+0x104>
 8007dc8:	3f01      	subs	r7, #1
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	3c04      	subs	r4, #4
 8007dce:	42a3      	cmp	r3, r4
 8007dd0:	d3f7      	bcc.n	8007dc2 <quorem+0xf4>
 8007dd2:	6137      	str	r7, [r6, #16]
 8007dd4:	e7c8      	b.n	8007d68 <quorem+0x9a>
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	d104      	bne.n	8007de6 <quorem+0x118>
 8007ddc:	3f01      	subs	r7, #1
 8007dde:	9a01      	ldr	r2, [sp, #4]
 8007de0:	3b04      	subs	r3, #4
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3f7      	bcc.n	8007dd6 <quorem+0x108>
 8007de6:	6137      	str	r7, [r6, #16]
 8007de8:	e7e5      	b.n	8007db6 <quorem+0xe8>
	...

08007dec <_dtoa_r>:
 8007dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dee:	0014      	movs	r4, r2
 8007df0:	001d      	movs	r5, r3
 8007df2:	69c6      	ldr	r6, [r0, #28]
 8007df4:	b09d      	sub	sp, #116	@ 0x74
 8007df6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007df8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007dfa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007dfc:	9003      	str	r0, [sp, #12]
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d10f      	bne.n	8007e22 <_dtoa_r+0x36>
 8007e02:	2010      	movs	r0, #16
 8007e04:	f000 fe30 	bl	8008a68 <malloc>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1e02      	subs	r2, r0, #0
 8007e0c:	61d8      	str	r0, [r3, #28]
 8007e0e:	d104      	bne.n	8007e1a <_dtoa_r+0x2e>
 8007e10:	21ef      	movs	r1, #239	@ 0xef
 8007e12:	4bc7      	ldr	r3, [pc, #796]	@ (8008130 <_dtoa_r+0x344>)
 8007e14:	48c7      	ldr	r0, [pc, #796]	@ (8008134 <_dtoa_r+0x348>)
 8007e16:	f001 fea1 	bl	8009b5c <__assert_func>
 8007e1a:	6046      	str	r6, [r0, #4]
 8007e1c:	6086      	str	r6, [r0, #8]
 8007e1e:	6006      	str	r6, [r0, #0]
 8007e20:	60c6      	str	r6, [r0, #12]
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	6819      	ldr	r1, [r3, #0]
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d00b      	beq.n	8007e44 <_dtoa_r+0x58>
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4093      	lsls	r3, r2
 8007e32:	604a      	str	r2, [r1, #4]
 8007e34:	608b      	str	r3, [r1, #8]
 8007e36:	9803      	ldr	r0, [sp, #12]
 8007e38:	f000 ff16 	bl	8008c68 <_Bfree>
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	da1e      	bge.n	8007e86 <_dtoa_r+0x9a>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	006b      	lsls	r3, r5, #1
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007e54:	4bb8      	ldr	r3, [pc, #736]	@ (8008138 <_dtoa_r+0x34c>)
 8007e56:	4ab8      	ldr	r2, [pc, #736]	@ (8008138 <_dtoa_r+0x34c>)
 8007e58:	403b      	ands	r3, r7
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d116      	bne.n	8007e8c <_dtoa_r+0xa0>
 8007e5e:	4bb7      	ldr	r3, [pc, #732]	@ (800813c <_dtoa_r+0x350>)
 8007e60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	033b      	lsls	r3, r7, #12
 8007e66:	0b1b      	lsrs	r3, r3, #12
 8007e68:	4323      	orrs	r3, r4
 8007e6a:	d101      	bne.n	8007e70 <_dtoa_r+0x84>
 8007e6c:	f000 fd83 	bl	8008976 <_dtoa_r+0xb8a>
 8007e70:	4bb3      	ldr	r3, [pc, #716]	@ (8008140 <_dtoa_r+0x354>)
 8007e72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007e74:	9308      	str	r3, [sp, #32]
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	d002      	beq.n	8007e80 <_dtoa_r+0x94>
 8007e7a:	4bb2      	ldr	r3, [pc, #712]	@ (8008144 <_dtoa_r+0x358>)
 8007e7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	9808      	ldr	r0, [sp, #32]
 8007e82:	b01d      	add	sp, #116	@ 0x74
 8007e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e86:	2300      	movs	r3, #0
 8007e88:	603b      	str	r3, [r7, #0]
 8007e8a:	e7e2      	b.n	8007e52 <_dtoa_r+0x66>
 8007e8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e90:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f7f8 fad2 	bl	8000444 <__aeabi_dcmpeq>
 8007ea0:	1e06      	subs	r6, r0, #0
 8007ea2:	d00b      	beq.n	8007ebc <_dtoa_r+0xd0>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <_dtoa_r+0xca>
 8007eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8008148 <_dtoa_r+0x35c>)
 8007eb2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	4ba5      	ldr	r3, [pc, #660]	@ (800814c <_dtoa_r+0x360>)
 8007eb8:	9308      	str	r3, [sp, #32]
 8007eba:	e7e1      	b.n	8007e80 <_dtoa_r+0x94>
 8007ebc:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	9803      	ldr	r0, [sp, #12]
 8007ec6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ec8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007eca:	f001 f9cd 	bl	8009268 <__d2b>
 8007ece:	007a      	lsls	r2, r7, #1
 8007ed0:	9005      	str	r0, [sp, #20]
 8007ed2:	0d52      	lsrs	r2, r2, #21
 8007ed4:	d100      	bne.n	8007ed8 <_dtoa_r+0xec>
 8007ed6:	e07b      	b.n	8007fd0 <_dtoa_r+0x1e4>
 8007ed8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007eda:	9618      	str	r6, [sp, #96]	@ 0x60
 8007edc:	0319      	lsls	r1, r3, #12
 8007ede:	4b9c      	ldr	r3, [pc, #624]	@ (8008150 <_dtoa_r+0x364>)
 8007ee0:	0b09      	lsrs	r1, r1, #12
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	499b      	ldr	r1, [pc, #620]	@ (8008154 <_dtoa_r+0x368>)
 8007ee6:	1857      	adds	r7, r2, r1
 8007ee8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007eea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007eec:	0019      	movs	r1, r3
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4b99      	ldr	r3, [pc, #612]	@ (8008158 <_dtoa_r+0x36c>)
 8007ef2:	f7f9 fd45 	bl	8001980 <__aeabi_dsub>
 8007ef6:	4a99      	ldr	r2, [pc, #612]	@ (800815c <_dtoa_r+0x370>)
 8007ef8:	4b99      	ldr	r3, [pc, #612]	@ (8008160 <_dtoa_r+0x374>)
 8007efa:	f7f9 fa79 	bl	80013f0 <__aeabi_dmul>
 8007efe:	4a99      	ldr	r2, [pc, #612]	@ (8008164 <_dtoa_r+0x378>)
 8007f00:	4b99      	ldr	r3, [pc, #612]	@ (8008168 <_dtoa_r+0x37c>)
 8007f02:	f7f8 facd 	bl	80004a0 <__aeabi_dadd>
 8007f06:	0004      	movs	r4, r0
 8007f08:	0038      	movs	r0, r7
 8007f0a:	000d      	movs	r5, r1
 8007f0c:	f7fa f932 	bl	8002174 <__aeabi_i2d>
 8007f10:	4a96      	ldr	r2, [pc, #600]	@ (800816c <_dtoa_r+0x380>)
 8007f12:	4b97      	ldr	r3, [pc, #604]	@ (8008170 <_dtoa_r+0x384>)
 8007f14:	f7f9 fa6c 	bl	80013f0 <__aeabi_dmul>
 8007f18:	0002      	movs	r2, r0
 8007f1a:	000b      	movs	r3, r1
 8007f1c:	0020      	movs	r0, r4
 8007f1e:	0029      	movs	r1, r5
 8007f20:	f7f8 fabe 	bl	80004a0 <__aeabi_dadd>
 8007f24:	0004      	movs	r4, r0
 8007f26:	000d      	movs	r5, r1
 8007f28:	f7fa f8e8 	bl	80020fc <__aeabi_d2iz>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	9004      	str	r0, [sp, #16]
 8007f30:	2300      	movs	r3, #0
 8007f32:	0020      	movs	r0, r4
 8007f34:	0029      	movs	r1, r5
 8007f36:	f7f8 fa8b 	bl	8000450 <__aeabi_dcmplt>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d00b      	beq.n	8007f56 <_dtoa_r+0x16a>
 8007f3e:	9804      	ldr	r0, [sp, #16]
 8007f40:	f7fa f918 	bl	8002174 <__aeabi_i2d>
 8007f44:	002b      	movs	r3, r5
 8007f46:	0022      	movs	r2, r4
 8007f48:	f7f8 fa7c 	bl	8000444 <__aeabi_dcmpeq>
 8007f4c:	4243      	negs	r3, r0
 8007f4e:	4158      	adcs	r0, r3
 8007f50:	9b04      	ldr	r3, [sp, #16]
 8007f52:	1a1b      	subs	r3, r3, r0
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	2301      	movs	r3, #1
 8007f58:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	2b16      	cmp	r3, #22
 8007f5e:	d810      	bhi.n	8007f82 <_dtoa_r+0x196>
 8007f60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007f62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007f64:	9a04      	ldr	r2, [sp, #16]
 8007f66:	4b83      	ldr	r3, [pc, #524]	@ (8008174 <_dtoa_r+0x388>)
 8007f68:	00d2      	lsls	r2, r2, #3
 8007f6a:	189b      	adds	r3, r3, r2
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f7f8 fa6e 	bl	8000450 <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d047      	beq.n	8008008 <_dtoa_r+0x21c>
 8007f78:	9b04      	ldr	r3, [sp, #16]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f82:	2200      	movs	r2, #0
 8007f84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007f86:	9206      	str	r2, [sp, #24]
 8007f88:	1bdb      	subs	r3, r3, r7
 8007f8a:	1e5a      	subs	r2, r3, #1
 8007f8c:	d53e      	bpl.n	800800c <_dtoa_r+0x220>
 8007f8e:	2201      	movs	r2, #1
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	9306      	str	r3, [sp, #24]
 8007f94:	2300      	movs	r3, #0
 8007f96:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f98:	9b04      	ldr	r3, [sp, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	db38      	blt.n	8008010 <_dtoa_r+0x224>
 8007f9e:	9a04      	ldr	r2, [sp, #16]
 8007fa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fa2:	4694      	mov	ip, r2
 8007fa4:	4463      	add	r3, ip
 8007fa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9214      	str	r2, [sp, #80]	@ 0x50
 8007fac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007fb0:	2401      	movs	r4, #1
 8007fb2:	2b09      	cmp	r3, #9
 8007fb4:	d867      	bhi.n	8008086 <_dtoa_r+0x29a>
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	dd02      	ble.n	8007fc0 <_dtoa_r+0x1d4>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	3b04      	subs	r3, #4
 8007fbe:	9322      	str	r3, [sp, #136]	@ 0x88
 8007fc0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007fc2:	1e98      	subs	r0, r3, #2
 8007fc4:	2803      	cmp	r0, #3
 8007fc6:	d867      	bhi.n	8008098 <_dtoa_r+0x2ac>
 8007fc8:	f7f8 f8a2 	bl	8000110 <__gnu_thumb1_case_uqi>
 8007fcc:	5b383a2b 	.word	0x5b383a2b
 8007fd0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007fd2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007fd4:	18f6      	adds	r6, r6, r3
 8007fd6:	4b68      	ldr	r3, [pc, #416]	@ (8008178 <_dtoa_r+0x38c>)
 8007fd8:	18f2      	adds	r2, r6, r3
 8007fda:	2a20      	cmp	r2, #32
 8007fdc:	dd0f      	ble.n	8007ffe <_dtoa_r+0x212>
 8007fde:	2340      	movs	r3, #64	@ 0x40
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	409f      	lsls	r7, r3
 8007fe4:	4b65      	ldr	r3, [pc, #404]	@ (800817c <_dtoa_r+0x390>)
 8007fe6:	0038      	movs	r0, r7
 8007fe8:	18f3      	adds	r3, r6, r3
 8007fea:	40dc      	lsrs	r4, r3
 8007fec:	4320      	orrs	r0, r4
 8007fee:	f7fa f8ef 	bl	80021d0 <__aeabi_ui2d>
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4b62      	ldr	r3, [pc, #392]	@ (8008180 <_dtoa_r+0x394>)
 8007ff6:	1e77      	subs	r7, r6, #1
 8007ff8:	18cb      	adds	r3, r1, r3
 8007ffa:	9218      	str	r2, [sp, #96]	@ 0x60
 8007ffc:	e776      	b.n	8007eec <_dtoa_r+0x100>
 8007ffe:	2320      	movs	r3, #32
 8008000:	0020      	movs	r0, r4
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	4098      	lsls	r0, r3
 8008006:	e7f2      	b.n	8007fee <_dtoa_r+0x202>
 8008008:	9015      	str	r0, [sp, #84]	@ 0x54
 800800a:	e7ba      	b.n	8007f82 <_dtoa_r+0x196>
 800800c:	920d      	str	r2, [sp, #52]	@ 0x34
 800800e:	e7c3      	b.n	8007f98 <_dtoa_r+0x1ac>
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	9306      	str	r3, [sp, #24]
 8008018:	4253      	negs	r3, r2
 800801a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800801c:	2300      	movs	r3, #0
 800801e:	9314      	str	r3, [sp, #80]	@ 0x50
 8008020:	e7c5      	b.n	8007fae <_dtoa_r+0x1c2>
 8008022:	2300      	movs	r3, #0
 8008024:	9310      	str	r3, [sp, #64]	@ 0x40
 8008026:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008028:	930e      	str	r3, [sp, #56]	@ 0x38
 800802a:	9309      	str	r3, [sp, #36]	@ 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	dc13      	bgt.n	8008058 <_dtoa_r+0x26c>
 8008030:	2301      	movs	r3, #1
 8008032:	001a      	movs	r2, r3
 8008034:	930e      	str	r3, [sp, #56]	@ 0x38
 8008036:	9309      	str	r3, [sp, #36]	@ 0x24
 8008038:	9223      	str	r2, [sp, #140]	@ 0x8c
 800803a:	e00d      	b.n	8008058 <_dtoa_r+0x26c>
 800803c:	2301      	movs	r3, #1
 800803e:	e7f1      	b.n	8008024 <_dtoa_r+0x238>
 8008040:	2300      	movs	r3, #0
 8008042:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008044:	9310      	str	r3, [sp, #64]	@ 0x40
 8008046:	4694      	mov	ip, r2
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	4463      	add	r3, ip
 800804c:	930e      	str	r3, [sp, #56]	@ 0x38
 800804e:	3301      	adds	r3, #1
 8008050:	9309      	str	r3, [sp, #36]	@ 0x24
 8008052:	2b00      	cmp	r3, #0
 8008054:	dc00      	bgt.n	8008058 <_dtoa_r+0x26c>
 8008056:	2301      	movs	r3, #1
 8008058:	9a03      	ldr	r2, [sp, #12]
 800805a:	2100      	movs	r1, #0
 800805c:	69d0      	ldr	r0, [r2, #28]
 800805e:	2204      	movs	r2, #4
 8008060:	0015      	movs	r5, r2
 8008062:	3514      	adds	r5, #20
 8008064:	429d      	cmp	r5, r3
 8008066:	d91b      	bls.n	80080a0 <_dtoa_r+0x2b4>
 8008068:	6041      	str	r1, [r0, #4]
 800806a:	9803      	ldr	r0, [sp, #12]
 800806c:	f000 fdb8 	bl	8008be0 <_Balloc>
 8008070:	9008      	str	r0, [sp, #32]
 8008072:	2800      	cmp	r0, #0
 8008074:	d117      	bne.n	80080a6 <_dtoa_r+0x2ba>
 8008076:	21b0      	movs	r1, #176	@ 0xb0
 8008078:	4b42      	ldr	r3, [pc, #264]	@ (8008184 <_dtoa_r+0x398>)
 800807a:	482e      	ldr	r0, [pc, #184]	@ (8008134 <_dtoa_r+0x348>)
 800807c:	9a08      	ldr	r2, [sp, #32]
 800807e:	31ff      	adds	r1, #255	@ 0xff
 8008080:	e6c9      	b.n	8007e16 <_dtoa_r+0x2a>
 8008082:	2301      	movs	r3, #1
 8008084:	e7dd      	b.n	8008042 <_dtoa_r+0x256>
 8008086:	2300      	movs	r3, #0
 8008088:	9410      	str	r4, [sp, #64]	@ 0x40
 800808a:	9322      	str	r3, [sp, #136]	@ 0x88
 800808c:	3b01      	subs	r3, #1
 800808e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008090:	9309      	str	r3, [sp, #36]	@ 0x24
 8008092:	2200      	movs	r2, #0
 8008094:	3313      	adds	r3, #19
 8008096:	e7cf      	b.n	8008038 <_dtoa_r+0x24c>
 8008098:	2301      	movs	r3, #1
 800809a:	9310      	str	r3, [sp, #64]	@ 0x40
 800809c:	3b02      	subs	r3, #2
 800809e:	e7f6      	b.n	800808e <_dtoa_r+0x2a2>
 80080a0:	3101      	adds	r1, #1
 80080a2:	0052      	lsls	r2, r2, #1
 80080a4:	e7dc      	b.n	8008060 <_dtoa_r+0x274>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	9a08      	ldr	r2, [sp, #32]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b0:	2b0e      	cmp	r3, #14
 80080b2:	d900      	bls.n	80080b6 <_dtoa_r+0x2ca>
 80080b4:	e0d9      	b.n	800826a <_dtoa_r+0x47e>
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	d100      	bne.n	80080bc <_dtoa_r+0x2d0>
 80080ba:	e0d6      	b.n	800826a <_dtoa_r+0x47e>
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dd64      	ble.n	800818c <_dtoa_r+0x3a0>
 80080c2:	210f      	movs	r1, #15
 80080c4:	9a04      	ldr	r2, [sp, #16]
 80080c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008174 <_dtoa_r+0x388>)
 80080c8:	400a      	ands	r2, r1
 80080ca:	00d2      	lsls	r2, r2, #3
 80080cc:	189b      	adds	r3, r3, r2
 80080ce:	681e      	ldr	r6, [r3, #0]
 80080d0:	685f      	ldr	r7, [r3, #4]
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	2402      	movs	r4, #2
 80080d6:	111d      	asrs	r5, r3, #4
 80080d8:	05db      	lsls	r3, r3, #23
 80080da:	d50a      	bpl.n	80080f2 <_dtoa_r+0x306>
 80080dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008188 <_dtoa_r+0x39c>)
 80080de:	400d      	ands	r5, r1
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80080e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80080e8:	f7f8 fd3e 	bl	8000b68 <__aeabi_ddiv>
 80080ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80080ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080f0:	3401      	adds	r4, #1
 80080f2:	4b25      	ldr	r3, [pc, #148]	@ (8008188 <_dtoa_r+0x39c>)
 80080f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	d108      	bne.n	800810c <_dtoa_r+0x320>
 80080fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080fe:	0032      	movs	r2, r6
 8008100:	003b      	movs	r3, r7
 8008102:	f7f8 fd31 	bl	8000b68 <__aeabi_ddiv>
 8008106:	900a      	str	r0, [sp, #40]	@ 0x28
 8008108:	910b      	str	r1, [sp, #44]	@ 0x2c
 800810a:	e05a      	b.n	80081c2 <_dtoa_r+0x3d6>
 800810c:	2301      	movs	r3, #1
 800810e:	421d      	tst	r5, r3
 8008110:	d009      	beq.n	8008126 <_dtoa_r+0x33a>
 8008112:	18e4      	adds	r4, r4, r3
 8008114:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008116:	0030      	movs	r0, r6
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	0039      	movs	r1, r7
 800811e:	f7f9 f967 	bl	80013f0 <__aeabi_dmul>
 8008122:	0006      	movs	r6, r0
 8008124:	000f      	movs	r7, r1
 8008126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008128:	106d      	asrs	r5, r5, #1
 800812a:	3308      	adds	r3, #8
 800812c:	e7e2      	b.n	80080f4 <_dtoa_r+0x308>
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	0800ad41 	.word	0x0800ad41
 8008134:	0800ad58 	.word	0x0800ad58
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	0000270f 	.word	0x0000270f
 8008140:	0800ad3d 	.word	0x0800ad3d
 8008144:	0800ad40 	.word	0x0800ad40
 8008148:	0800ad11 	.word	0x0800ad11
 800814c:	0800ad10 	.word	0x0800ad10
 8008150:	3ff00000 	.word	0x3ff00000
 8008154:	fffffc01 	.word	0xfffffc01
 8008158:	3ff80000 	.word	0x3ff80000
 800815c:	636f4361 	.word	0x636f4361
 8008160:	3fd287a7 	.word	0x3fd287a7
 8008164:	8b60c8b3 	.word	0x8b60c8b3
 8008168:	3fc68a28 	.word	0x3fc68a28
 800816c:	509f79fb 	.word	0x509f79fb
 8008170:	3fd34413 	.word	0x3fd34413
 8008174:	0800ae50 	.word	0x0800ae50
 8008178:	00000432 	.word	0x00000432
 800817c:	00000412 	.word	0x00000412
 8008180:	fe100000 	.word	0xfe100000
 8008184:	0800adb0 	.word	0x0800adb0
 8008188:	0800ae28 	.word	0x0800ae28
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	2402      	movs	r4, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d016      	beq.n	80081c2 <_dtoa_r+0x3d6>
 8008194:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008196:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008198:	220f      	movs	r2, #15
 800819a:	425d      	negs	r5, r3
 800819c:	402a      	ands	r2, r5
 800819e:	4bd7      	ldr	r3, [pc, #860]	@ (80084fc <_dtoa_r+0x710>)
 80081a0:	00d2      	lsls	r2, r2, #3
 80081a2:	189b      	adds	r3, r3, r2
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f7f9 f922 	bl	80013f0 <__aeabi_dmul>
 80081ac:	2701      	movs	r7, #1
 80081ae:	2300      	movs	r3, #0
 80081b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80081b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081b4:	4ed2      	ldr	r6, [pc, #840]	@ (8008500 <_dtoa_r+0x714>)
 80081b6:	112d      	asrs	r5, r5, #4
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	d000      	beq.n	80081be <_dtoa_r+0x3d2>
 80081bc:	e0ba      	b.n	8008334 <_dtoa_r+0x548>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1a1      	bne.n	8008106 <_dtoa_r+0x31a>
 80081c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80081c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80081c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d100      	bne.n	80081ce <_dtoa_r+0x3e2>
 80081cc:	e0bd      	b.n	800834a <_dtoa_r+0x55e>
 80081ce:	2200      	movs	r2, #0
 80081d0:	0030      	movs	r0, r6
 80081d2:	0039      	movs	r1, r7
 80081d4:	4bcb      	ldr	r3, [pc, #812]	@ (8008504 <_dtoa_r+0x718>)
 80081d6:	f7f8 f93b 	bl	8000450 <__aeabi_dcmplt>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d100      	bne.n	80081e0 <_dtoa_r+0x3f4>
 80081de:	e0b4      	b.n	800834a <_dtoa_r+0x55e>
 80081e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d100      	bne.n	80081e8 <_dtoa_r+0x3fc>
 80081e6:	e0b0      	b.n	800834a <_dtoa_r+0x55e>
 80081e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dd39      	ble.n	8008262 <_dtoa_r+0x476>
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	2200      	movs	r2, #0
 80081f2:	3b01      	subs	r3, #1
 80081f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80081f6:	0030      	movs	r0, r6
 80081f8:	4bc3      	ldr	r3, [pc, #780]	@ (8008508 <_dtoa_r+0x71c>)
 80081fa:	0039      	movs	r1, r7
 80081fc:	f7f9 f8f8 	bl	80013f0 <__aeabi_dmul>
 8008200:	900a      	str	r0, [sp, #40]	@ 0x28
 8008202:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008206:	3401      	adds	r4, #1
 8008208:	0020      	movs	r0, r4
 800820a:	9311      	str	r3, [sp, #68]	@ 0x44
 800820c:	f7f9 ffb2 	bl	8002174 <__aeabi_i2d>
 8008210:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008214:	f7f9 f8ec 	bl	80013f0 <__aeabi_dmul>
 8008218:	4bbc      	ldr	r3, [pc, #752]	@ (800850c <_dtoa_r+0x720>)
 800821a:	2200      	movs	r2, #0
 800821c:	f7f8 f940 	bl	80004a0 <__aeabi_dadd>
 8008220:	4bbb      	ldr	r3, [pc, #748]	@ (8008510 <_dtoa_r+0x724>)
 8008222:	0006      	movs	r6, r0
 8008224:	18cf      	adds	r7, r1, r3
 8008226:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008228:	2b00      	cmp	r3, #0
 800822a:	d000      	beq.n	800822e <_dtoa_r+0x442>
 800822c:	e091      	b.n	8008352 <_dtoa_r+0x566>
 800822e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008232:	2200      	movs	r2, #0
 8008234:	4bb7      	ldr	r3, [pc, #732]	@ (8008514 <_dtoa_r+0x728>)
 8008236:	f7f9 fba3 	bl	8001980 <__aeabi_dsub>
 800823a:	0032      	movs	r2, r6
 800823c:	003b      	movs	r3, r7
 800823e:	0004      	movs	r4, r0
 8008240:	000d      	movs	r5, r1
 8008242:	f7f8 f919 	bl	8000478 <__aeabi_dcmpgt>
 8008246:	2800      	cmp	r0, #0
 8008248:	d000      	beq.n	800824c <_dtoa_r+0x460>
 800824a:	e29d      	b.n	8008788 <_dtoa_r+0x99c>
 800824c:	2180      	movs	r1, #128	@ 0x80
 800824e:	0609      	lsls	r1, r1, #24
 8008250:	187b      	adds	r3, r7, r1
 8008252:	0032      	movs	r2, r6
 8008254:	0020      	movs	r0, r4
 8008256:	0029      	movs	r1, r5
 8008258:	f7f8 f8fa 	bl	8000450 <__aeabi_dcmplt>
 800825c:	2800      	cmp	r0, #0
 800825e:	d000      	beq.n	8008262 <_dtoa_r+0x476>
 8008260:	e130      	b.n	80084c4 <_dtoa_r+0x6d8>
 8008262:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008264:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008266:	930a      	str	r3, [sp, #40]	@ 0x28
 8008268:	940b      	str	r4, [sp, #44]	@ 0x2c
 800826a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800826c:	2b00      	cmp	r3, #0
 800826e:	da00      	bge.n	8008272 <_dtoa_r+0x486>
 8008270:	e177      	b.n	8008562 <_dtoa_r+0x776>
 8008272:	9a04      	ldr	r2, [sp, #16]
 8008274:	2a0e      	cmp	r2, #14
 8008276:	dd00      	ble.n	800827a <_dtoa_r+0x48e>
 8008278:	e173      	b.n	8008562 <_dtoa_r+0x776>
 800827a:	4ba0      	ldr	r3, [pc, #640]	@ (80084fc <_dtoa_r+0x710>)
 800827c:	00d2      	lsls	r2, r2, #3
 800827e:	189b      	adds	r3, r3, r2
 8008280:	685c      	ldr	r4, [r3, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	9306      	str	r3, [sp, #24]
 8008286:	9407      	str	r4, [sp, #28]
 8008288:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800828a:	2b00      	cmp	r3, #0
 800828c:	da03      	bge.n	8008296 <_dtoa_r+0x4aa>
 800828e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc00      	bgt.n	8008296 <_dtoa_r+0x4aa>
 8008294:	e106      	b.n	80084a4 <_dtoa_r+0x6b8>
 8008296:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008298:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800829a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829c:	9d08      	ldr	r5, [sp, #32]
 800829e:	3b01      	subs	r3, #1
 80082a0:	195b      	adds	r3, r3, r5
 80082a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a4:	9a06      	ldr	r2, [sp, #24]
 80082a6:	9b07      	ldr	r3, [sp, #28]
 80082a8:	0030      	movs	r0, r6
 80082aa:	0039      	movs	r1, r7
 80082ac:	f7f8 fc5c 	bl	8000b68 <__aeabi_ddiv>
 80082b0:	f7f9 ff24 	bl	80020fc <__aeabi_d2iz>
 80082b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80082b6:	f7f9 ff5d 	bl	8002174 <__aeabi_i2d>
 80082ba:	9a06      	ldr	r2, [sp, #24]
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	f7f9 f897 	bl	80013f0 <__aeabi_dmul>
 80082c2:	0002      	movs	r2, r0
 80082c4:	000b      	movs	r3, r1
 80082c6:	0030      	movs	r0, r6
 80082c8:	0039      	movs	r1, r7
 80082ca:	f7f9 fb59 	bl	8001980 <__aeabi_dsub>
 80082ce:	002b      	movs	r3, r5
 80082d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082d2:	3501      	adds	r5, #1
 80082d4:	3230      	adds	r2, #48	@ 0x30
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082da:	002c      	movs	r4, r5
 80082dc:	429a      	cmp	r2, r3
 80082de:	d000      	beq.n	80082e2 <_dtoa_r+0x4f6>
 80082e0:	e131      	b.n	8008546 <_dtoa_r+0x75a>
 80082e2:	0002      	movs	r2, r0
 80082e4:	000b      	movs	r3, r1
 80082e6:	f7f8 f8db 	bl	80004a0 <__aeabi_dadd>
 80082ea:	9a06      	ldr	r2, [sp, #24]
 80082ec:	9b07      	ldr	r3, [sp, #28]
 80082ee:	0006      	movs	r6, r0
 80082f0:	000f      	movs	r7, r1
 80082f2:	f7f8 f8c1 	bl	8000478 <__aeabi_dcmpgt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d000      	beq.n	80082fc <_dtoa_r+0x510>
 80082fa:	e10f      	b.n	800851c <_dtoa_r+0x730>
 80082fc:	9a06      	ldr	r2, [sp, #24]
 80082fe:	9b07      	ldr	r3, [sp, #28]
 8008300:	0030      	movs	r0, r6
 8008302:	0039      	movs	r1, r7
 8008304:	f7f8 f89e 	bl	8000444 <__aeabi_dcmpeq>
 8008308:	2800      	cmp	r0, #0
 800830a:	d003      	beq.n	8008314 <_dtoa_r+0x528>
 800830c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830e:	07dd      	lsls	r5, r3, #31
 8008310:	d500      	bpl.n	8008314 <_dtoa_r+0x528>
 8008312:	e103      	b.n	800851c <_dtoa_r+0x730>
 8008314:	9905      	ldr	r1, [sp, #20]
 8008316:	9803      	ldr	r0, [sp, #12]
 8008318:	f000 fca6 	bl	8008c68 <_Bfree>
 800831c:	2300      	movs	r3, #0
 800831e:	7023      	strb	r3, [r4, #0]
 8008320:	9b04      	ldr	r3, [sp, #16]
 8008322:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008324:	3301      	adds	r3, #1
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800832a:	2b00      	cmp	r3, #0
 800832c:	d100      	bne.n	8008330 <_dtoa_r+0x544>
 800832e:	e5a7      	b.n	8007e80 <_dtoa_r+0x94>
 8008330:	601c      	str	r4, [r3, #0]
 8008332:	e5a5      	b.n	8007e80 <_dtoa_r+0x94>
 8008334:	423d      	tst	r5, r7
 8008336:	d005      	beq.n	8008344 <_dtoa_r+0x558>
 8008338:	6832      	ldr	r2, [r6, #0]
 800833a:	6873      	ldr	r3, [r6, #4]
 800833c:	f7f9 f858 	bl	80013f0 <__aeabi_dmul>
 8008340:	003b      	movs	r3, r7
 8008342:	3401      	adds	r4, #1
 8008344:	106d      	asrs	r5, r5, #1
 8008346:	3608      	adds	r6, #8
 8008348:	e736      	b.n	80081b8 <_dtoa_r+0x3cc>
 800834a:	9b04      	ldr	r3, [sp, #16]
 800834c:	930c      	str	r3, [sp, #48]	@ 0x30
 800834e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008350:	e75a      	b.n	8008208 <_dtoa_r+0x41c>
 8008352:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008354:	4b69      	ldr	r3, [pc, #420]	@ (80084fc <_dtoa_r+0x710>)
 8008356:	3a01      	subs	r2, #1
 8008358:	00d2      	lsls	r2, r2, #3
 800835a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800835c:	189b      	adds	r3, r3, r2
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2900      	cmp	r1, #0
 8008364:	d04c      	beq.n	8008400 <_dtoa_r+0x614>
 8008366:	2000      	movs	r0, #0
 8008368:	496b      	ldr	r1, [pc, #428]	@ (8008518 <_dtoa_r+0x72c>)
 800836a:	f7f8 fbfd 	bl	8000b68 <__aeabi_ddiv>
 800836e:	0032      	movs	r2, r6
 8008370:	003b      	movs	r3, r7
 8008372:	f7f9 fb05 	bl	8001980 <__aeabi_dsub>
 8008376:	9a08      	ldr	r2, [sp, #32]
 8008378:	0006      	movs	r6, r0
 800837a:	4694      	mov	ip, r2
 800837c:	000f      	movs	r7, r1
 800837e:	9b08      	ldr	r3, [sp, #32]
 8008380:	9316      	str	r3, [sp, #88]	@ 0x58
 8008382:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008384:	4463      	add	r3, ip
 8008386:	9311      	str	r3, [sp, #68]	@ 0x44
 8008388:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800838a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800838c:	f7f9 feb6 	bl	80020fc <__aeabi_d2iz>
 8008390:	0005      	movs	r5, r0
 8008392:	f7f9 feef 	bl	8002174 <__aeabi_i2d>
 8008396:	0002      	movs	r2, r0
 8008398:	000b      	movs	r3, r1
 800839a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800839c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800839e:	f7f9 faef 	bl	8001980 <__aeabi_dsub>
 80083a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083a4:	3530      	adds	r5, #48	@ 0x30
 80083a6:	1c5c      	adds	r4, r3, #1
 80083a8:	701d      	strb	r5, [r3, #0]
 80083aa:	0032      	movs	r2, r6
 80083ac:	003b      	movs	r3, r7
 80083ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80083b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80083b2:	f7f8 f84d 	bl	8000450 <__aeabi_dcmplt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d16a      	bne.n	8008490 <_dtoa_r+0x6a4>
 80083ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083be:	2000      	movs	r0, #0
 80083c0:	4950      	ldr	r1, [pc, #320]	@ (8008504 <_dtoa_r+0x718>)
 80083c2:	f7f9 fadd 	bl	8001980 <__aeabi_dsub>
 80083c6:	0032      	movs	r2, r6
 80083c8:	003b      	movs	r3, r7
 80083ca:	f7f8 f841 	bl	8000450 <__aeabi_dcmplt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d000      	beq.n	80083d4 <_dtoa_r+0x5e8>
 80083d2:	e0a5      	b.n	8008520 <_dtoa_r+0x734>
 80083d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	d100      	bne.n	80083dc <_dtoa_r+0x5f0>
 80083da:	e742      	b.n	8008262 <_dtoa_r+0x476>
 80083dc:	2200      	movs	r2, #0
 80083de:	0030      	movs	r0, r6
 80083e0:	0039      	movs	r1, r7
 80083e2:	4b49      	ldr	r3, [pc, #292]	@ (8008508 <_dtoa_r+0x71c>)
 80083e4:	f7f9 f804 	bl	80013f0 <__aeabi_dmul>
 80083e8:	2200      	movs	r2, #0
 80083ea:	0006      	movs	r6, r0
 80083ec:	000f      	movs	r7, r1
 80083ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083f2:	4b45      	ldr	r3, [pc, #276]	@ (8008508 <_dtoa_r+0x71c>)
 80083f4:	f7f8 fffc 	bl	80013f0 <__aeabi_dmul>
 80083f8:	9416      	str	r4, [sp, #88]	@ 0x58
 80083fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80083fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80083fe:	e7c3      	b.n	8008388 <_dtoa_r+0x59c>
 8008400:	0030      	movs	r0, r6
 8008402:	0039      	movs	r1, r7
 8008404:	f7f8 fff4 	bl	80013f0 <__aeabi_dmul>
 8008408:	9d08      	ldr	r5, [sp, #32]
 800840a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800840c:	002b      	movs	r3, r5
 800840e:	4694      	mov	ip, r2
 8008410:	9016      	str	r0, [sp, #88]	@ 0x58
 8008412:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008414:	4463      	add	r3, ip
 8008416:	9319      	str	r3, [sp, #100]	@ 0x64
 8008418:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800841a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800841c:	f7f9 fe6e 	bl	80020fc <__aeabi_d2iz>
 8008420:	0004      	movs	r4, r0
 8008422:	f7f9 fea7 	bl	8002174 <__aeabi_i2d>
 8008426:	000b      	movs	r3, r1
 8008428:	0002      	movs	r2, r0
 800842a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800842c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800842e:	f7f9 faa7 	bl	8001980 <__aeabi_dsub>
 8008432:	3430      	adds	r4, #48	@ 0x30
 8008434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008436:	702c      	strb	r4, [r5, #0]
 8008438:	3501      	adds	r5, #1
 800843a:	0006      	movs	r6, r0
 800843c:	000f      	movs	r7, r1
 800843e:	42ab      	cmp	r3, r5
 8008440:	d129      	bne.n	8008496 <_dtoa_r+0x6aa>
 8008442:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008444:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008446:	9b08      	ldr	r3, [sp, #32]
 8008448:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800844a:	469c      	mov	ip, r3
 800844c:	2200      	movs	r2, #0
 800844e:	4b32      	ldr	r3, [pc, #200]	@ (8008518 <_dtoa_r+0x72c>)
 8008450:	4464      	add	r4, ip
 8008452:	f7f8 f825 	bl	80004a0 <__aeabi_dadd>
 8008456:	0002      	movs	r2, r0
 8008458:	000b      	movs	r3, r1
 800845a:	0030      	movs	r0, r6
 800845c:	0039      	movs	r1, r7
 800845e:	f7f8 f80b 	bl	8000478 <__aeabi_dcmpgt>
 8008462:	2800      	cmp	r0, #0
 8008464:	d15c      	bne.n	8008520 <_dtoa_r+0x734>
 8008466:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008468:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800846a:	2000      	movs	r0, #0
 800846c:	492a      	ldr	r1, [pc, #168]	@ (8008518 <_dtoa_r+0x72c>)
 800846e:	f7f9 fa87 	bl	8001980 <__aeabi_dsub>
 8008472:	0002      	movs	r2, r0
 8008474:	000b      	movs	r3, r1
 8008476:	0030      	movs	r0, r6
 8008478:	0039      	movs	r1, r7
 800847a:	f7f7 ffe9 	bl	8000450 <__aeabi_dcmplt>
 800847e:	2800      	cmp	r0, #0
 8008480:	d100      	bne.n	8008484 <_dtoa_r+0x698>
 8008482:	e6ee      	b.n	8008262 <_dtoa_r+0x476>
 8008484:	0023      	movs	r3, r4
 8008486:	3c01      	subs	r4, #1
 8008488:	7822      	ldrb	r2, [r4, #0]
 800848a:	2a30      	cmp	r2, #48	@ 0x30
 800848c:	d0fa      	beq.n	8008484 <_dtoa_r+0x698>
 800848e:	001c      	movs	r4, r3
 8008490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	e73e      	b.n	8008314 <_dtoa_r+0x528>
 8008496:	2200      	movs	r2, #0
 8008498:	4b1b      	ldr	r3, [pc, #108]	@ (8008508 <_dtoa_r+0x71c>)
 800849a:	f7f8 ffa9 	bl	80013f0 <__aeabi_dmul>
 800849e:	900a      	str	r0, [sp, #40]	@ 0x28
 80084a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084a2:	e7b9      	b.n	8008418 <_dtoa_r+0x62c>
 80084a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10c      	bne.n	80084c4 <_dtoa_r+0x6d8>
 80084aa:	9806      	ldr	r0, [sp, #24]
 80084ac:	9907      	ldr	r1, [sp, #28]
 80084ae:	2200      	movs	r2, #0
 80084b0:	4b18      	ldr	r3, [pc, #96]	@ (8008514 <_dtoa_r+0x728>)
 80084b2:	f7f8 ff9d 	bl	80013f0 <__aeabi_dmul>
 80084b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ba:	f7f7 ffe7 	bl	800048c <__aeabi_dcmpge>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d100      	bne.n	80084c4 <_dtoa_r+0x6d8>
 80084c2:	e164      	b.n	800878e <_dtoa_r+0x9a2>
 80084c4:	2600      	movs	r6, #0
 80084c6:	0037      	movs	r7, r6
 80084c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084ca:	9c08      	ldr	r4, [sp, #32]
 80084cc:	43db      	mvns	r3, r3
 80084ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80084d0:	2300      	movs	r3, #0
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	0031      	movs	r1, r6
 80084d6:	9803      	ldr	r0, [sp, #12]
 80084d8:	f000 fbc6 	bl	8008c68 <_Bfree>
 80084dc:	2f00      	cmp	r7, #0
 80084de:	d0d7      	beq.n	8008490 <_dtoa_r+0x6a4>
 80084e0:	9b04      	ldr	r3, [sp, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <_dtoa_r+0x706>
 80084e6:	42bb      	cmp	r3, r7
 80084e8:	d003      	beq.n	80084f2 <_dtoa_r+0x706>
 80084ea:	0019      	movs	r1, r3
 80084ec:	9803      	ldr	r0, [sp, #12]
 80084ee:	f000 fbbb 	bl	8008c68 <_Bfree>
 80084f2:	0039      	movs	r1, r7
 80084f4:	9803      	ldr	r0, [sp, #12]
 80084f6:	f000 fbb7 	bl	8008c68 <_Bfree>
 80084fa:	e7c9      	b.n	8008490 <_dtoa_r+0x6a4>
 80084fc:	0800ae50 	.word	0x0800ae50
 8008500:	0800ae28 	.word	0x0800ae28
 8008504:	3ff00000 	.word	0x3ff00000
 8008508:	40240000 	.word	0x40240000
 800850c:	401c0000 	.word	0x401c0000
 8008510:	fcc00000 	.word	0xfcc00000
 8008514:	40140000 	.word	0x40140000
 8008518:	3fe00000 	.word	0x3fe00000
 800851c:	9b04      	ldr	r3, [sp, #16]
 800851e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008520:	0023      	movs	r3, r4
 8008522:	001c      	movs	r4, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	2a39      	cmp	r2, #57	@ 0x39
 800852a:	d108      	bne.n	800853e <_dtoa_r+0x752>
 800852c:	9a08      	ldr	r2, [sp, #32]
 800852e:	429a      	cmp	r2, r3
 8008530:	d1f7      	bne.n	8008522 <_dtoa_r+0x736>
 8008532:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008534:	9908      	ldr	r1, [sp, #32]
 8008536:	3201      	adds	r2, #1
 8008538:	920c      	str	r2, [sp, #48]	@ 0x30
 800853a:	2230      	movs	r2, #48	@ 0x30
 800853c:	700a      	strb	r2, [r1, #0]
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	3201      	adds	r2, #1
 8008542:	701a      	strb	r2, [r3, #0]
 8008544:	e7a4      	b.n	8008490 <_dtoa_r+0x6a4>
 8008546:	2200      	movs	r2, #0
 8008548:	4bc6      	ldr	r3, [pc, #792]	@ (8008864 <_dtoa_r+0xa78>)
 800854a:	f7f8 ff51 	bl	80013f0 <__aeabi_dmul>
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	0006      	movs	r6, r0
 8008554:	000f      	movs	r7, r1
 8008556:	f7f7 ff75 	bl	8000444 <__aeabi_dcmpeq>
 800855a:	2800      	cmp	r0, #0
 800855c:	d100      	bne.n	8008560 <_dtoa_r+0x774>
 800855e:	e6a1      	b.n	80082a4 <_dtoa_r+0x4b8>
 8008560:	e6d8      	b.n	8008314 <_dtoa_r+0x528>
 8008562:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008564:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008566:	9c06      	ldr	r4, [sp, #24]
 8008568:	2f00      	cmp	r7, #0
 800856a:	d014      	beq.n	8008596 <_dtoa_r+0x7aa>
 800856c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800856e:	2a01      	cmp	r2, #1
 8008570:	dd00      	ble.n	8008574 <_dtoa_r+0x788>
 8008572:	e0c8      	b.n	8008706 <_dtoa_r+0x91a>
 8008574:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008576:	2a00      	cmp	r2, #0
 8008578:	d100      	bne.n	800857c <_dtoa_r+0x790>
 800857a:	e0be      	b.n	80086fa <_dtoa_r+0x90e>
 800857c:	4aba      	ldr	r2, [pc, #744]	@ (8008868 <_dtoa_r+0xa7c>)
 800857e:	189b      	adds	r3, r3, r2
 8008580:	9a06      	ldr	r2, [sp, #24]
 8008582:	2101      	movs	r1, #1
 8008584:	18d2      	adds	r2, r2, r3
 8008586:	9206      	str	r2, [sp, #24]
 8008588:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800858a:	9803      	ldr	r0, [sp, #12]
 800858c:	18d3      	adds	r3, r2, r3
 800858e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008590:	f000 fc22 	bl	8008dd8 <__i2b>
 8008594:	0007      	movs	r7, r0
 8008596:	2c00      	cmp	r4, #0
 8008598:	d00e      	beq.n	80085b8 <_dtoa_r+0x7cc>
 800859a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	dd0b      	ble.n	80085b8 <_dtoa_r+0x7cc>
 80085a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085a2:	0023      	movs	r3, r4
 80085a4:	4294      	cmp	r4, r2
 80085a6:	dd00      	ble.n	80085aa <_dtoa_r+0x7be>
 80085a8:	0013      	movs	r3, r2
 80085aa:	9a06      	ldr	r2, [sp, #24]
 80085ac:	1ae4      	subs	r4, r4, r3
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	9206      	str	r2, [sp, #24]
 80085b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80085b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d01f      	beq.n	80085fe <_dtoa_r+0x812>
 80085be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d100      	bne.n	80085c6 <_dtoa_r+0x7da>
 80085c4:	e0b5      	b.n	8008732 <_dtoa_r+0x946>
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	d010      	beq.n	80085ec <_dtoa_r+0x800>
 80085ca:	0039      	movs	r1, r7
 80085cc:	002a      	movs	r2, r5
 80085ce:	9803      	ldr	r0, [sp, #12]
 80085d0:	f000 fccc 	bl	8008f6c <__pow5mult>
 80085d4:	9a05      	ldr	r2, [sp, #20]
 80085d6:	0001      	movs	r1, r0
 80085d8:	0007      	movs	r7, r0
 80085da:	9803      	ldr	r0, [sp, #12]
 80085dc:	f000 fc14 	bl	8008e08 <__multiply>
 80085e0:	0006      	movs	r6, r0
 80085e2:	9905      	ldr	r1, [sp, #20]
 80085e4:	9803      	ldr	r0, [sp, #12]
 80085e6:	f000 fb3f 	bl	8008c68 <_Bfree>
 80085ea:	9605      	str	r6, [sp, #20]
 80085ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ee:	1b5a      	subs	r2, r3, r5
 80085f0:	42ab      	cmp	r3, r5
 80085f2:	d004      	beq.n	80085fe <_dtoa_r+0x812>
 80085f4:	9905      	ldr	r1, [sp, #20]
 80085f6:	9803      	ldr	r0, [sp, #12]
 80085f8:	f000 fcb8 	bl	8008f6c <__pow5mult>
 80085fc:	9005      	str	r0, [sp, #20]
 80085fe:	2101      	movs	r1, #1
 8008600:	9803      	ldr	r0, [sp, #12]
 8008602:	f000 fbe9 	bl	8008dd8 <__i2b>
 8008606:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008608:	0006      	movs	r6, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d100      	bne.n	8008610 <_dtoa_r+0x824>
 800860e:	e1bc      	b.n	800898a <_dtoa_r+0xb9e>
 8008610:	001a      	movs	r2, r3
 8008612:	0001      	movs	r1, r0
 8008614:	9803      	ldr	r0, [sp, #12]
 8008616:	f000 fca9 	bl	8008f6c <__pow5mult>
 800861a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800861c:	0006      	movs	r6, r0
 800861e:	2500      	movs	r5, #0
 8008620:	2b01      	cmp	r3, #1
 8008622:	dc16      	bgt.n	8008652 <_dtoa_r+0x866>
 8008624:	2500      	movs	r5, #0
 8008626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008628:	42ab      	cmp	r3, r5
 800862a:	d10e      	bne.n	800864a <_dtoa_r+0x85e>
 800862c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800862e:	031b      	lsls	r3, r3, #12
 8008630:	42ab      	cmp	r3, r5
 8008632:	d10a      	bne.n	800864a <_dtoa_r+0x85e>
 8008634:	4b8d      	ldr	r3, [pc, #564]	@ (800886c <_dtoa_r+0xa80>)
 8008636:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008638:	4213      	tst	r3, r2
 800863a:	d006      	beq.n	800864a <_dtoa_r+0x85e>
 800863c:	9b06      	ldr	r3, [sp, #24]
 800863e:	3501      	adds	r5, #1
 8008640:	3301      	adds	r3, #1
 8008642:	9306      	str	r3, [sp, #24]
 8008644:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008646:	3301      	adds	r3, #1
 8008648:	930d      	str	r3, [sp, #52]	@ 0x34
 800864a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800864c:	2001      	movs	r0, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d008      	beq.n	8008664 <_dtoa_r+0x878>
 8008652:	6933      	ldr	r3, [r6, #16]
 8008654:	3303      	adds	r3, #3
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	18f3      	adds	r3, r6, r3
 800865a:	6858      	ldr	r0, [r3, #4]
 800865c:	f000 fb6c 	bl	8008d38 <__hi0bits>
 8008660:	2320      	movs	r3, #32
 8008662:	1a18      	subs	r0, r3, r0
 8008664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008666:	1818      	adds	r0, r3, r0
 8008668:	0002      	movs	r2, r0
 800866a:	231f      	movs	r3, #31
 800866c:	401a      	ands	r2, r3
 800866e:	4218      	tst	r0, r3
 8008670:	d065      	beq.n	800873e <_dtoa_r+0x952>
 8008672:	3301      	adds	r3, #1
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	2b04      	cmp	r3, #4
 8008678:	dd5d      	ble.n	8008736 <_dtoa_r+0x94a>
 800867a:	231c      	movs	r3, #28
 800867c:	1a9b      	subs	r3, r3, r2
 800867e:	9a06      	ldr	r2, [sp, #24]
 8008680:	18e4      	adds	r4, r4, r3
 8008682:	18d2      	adds	r2, r2, r3
 8008684:	9206      	str	r2, [sp, #24]
 8008686:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008688:	18d3      	adds	r3, r2, r3
 800868a:	930d      	str	r3, [sp, #52]	@ 0x34
 800868c:	9b06      	ldr	r3, [sp, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	dd05      	ble.n	800869e <_dtoa_r+0x8b2>
 8008692:	001a      	movs	r2, r3
 8008694:	9905      	ldr	r1, [sp, #20]
 8008696:	9803      	ldr	r0, [sp, #12]
 8008698:	f000 fcc4 	bl	8009024 <__lshift>
 800869c:	9005      	str	r0, [sp, #20]
 800869e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dd05      	ble.n	80086b0 <_dtoa_r+0x8c4>
 80086a4:	0031      	movs	r1, r6
 80086a6:	001a      	movs	r2, r3
 80086a8:	9803      	ldr	r0, [sp, #12]
 80086aa:	f000 fcbb 	bl	8009024 <__lshift>
 80086ae:	0006      	movs	r6, r0
 80086b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d045      	beq.n	8008742 <_dtoa_r+0x956>
 80086b6:	0031      	movs	r1, r6
 80086b8:	9805      	ldr	r0, [sp, #20]
 80086ba:	f000 fd1f 	bl	80090fc <__mcmp>
 80086be:	2800      	cmp	r0, #0
 80086c0:	da3f      	bge.n	8008742 <_dtoa_r+0x956>
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	220a      	movs	r2, #10
 80086c6:	3b01      	subs	r3, #1
 80086c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80086ca:	9905      	ldr	r1, [sp, #20]
 80086cc:	2300      	movs	r3, #0
 80086ce:	9803      	ldr	r0, [sp, #12]
 80086d0:	f000 faee 	bl	8008cb0 <__multadd>
 80086d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086d6:	9005      	str	r0, [sp, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d100      	bne.n	80086de <_dtoa_r+0x8f2>
 80086dc:	e15c      	b.n	8008998 <_dtoa_r+0xbac>
 80086de:	2300      	movs	r3, #0
 80086e0:	0039      	movs	r1, r7
 80086e2:	220a      	movs	r2, #10
 80086e4:	9803      	ldr	r0, [sp, #12]
 80086e6:	f000 fae3 	bl	8008cb0 <__multadd>
 80086ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ec:	0007      	movs	r7, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dc55      	bgt.n	800879e <_dtoa_r+0x9b2>
 80086f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	dc2d      	bgt.n	8008754 <_dtoa_r+0x968>
 80086f8:	e051      	b.n	800879e <_dtoa_r+0x9b2>
 80086fa:	2336      	movs	r3, #54	@ 0x36
 80086fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80086fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008700:	9c06      	ldr	r4, [sp, #24]
 8008702:	1a9b      	subs	r3, r3, r2
 8008704:	e73c      	b.n	8008580 <_dtoa_r+0x794>
 8008706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008708:	1e5d      	subs	r5, r3, #1
 800870a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870c:	42ab      	cmp	r3, r5
 800870e:	db08      	blt.n	8008722 <_dtoa_r+0x936>
 8008710:	1b5d      	subs	r5, r3, r5
 8008712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008714:	9c06      	ldr	r4, [sp, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	db00      	blt.n	800871c <_dtoa_r+0x930>
 800871a:	e731      	b.n	8008580 <_dtoa_r+0x794>
 800871c:	1ae4      	subs	r4, r4, r3
 800871e:	2300      	movs	r3, #0
 8008720:	e72e      	b.n	8008580 <_dtoa_r+0x794>
 8008722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008724:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008726:	1aeb      	subs	r3, r5, r3
 8008728:	18d3      	adds	r3, r2, r3
 800872a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800872c:	9314      	str	r3, [sp, #80]	@ 0x50
 800872e:	2500      	movs	r5, #0
 8008730:	e7ef      	b.n	8008712 <_dtoa_r+0x926>
 8008732:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008734:	e75e      	b.n	80085f4 <_dtoa_r+0x808>
 8008736:	2b04      	cmp	r3, #4
 8008738:	d0a8      	beq.n	800868c <_dtoa_r+0x8a0>
 800873a:	331c      	adds	r3, #28
 800873c:	e79f      	b.n	800867e <_dtoa_r+0x892>
 800873e:	0013      	movs	r3, r2
 8008740:	e7fb      	b.n	800873a <_dtoa_r+0x94e>
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	930c      	str	r3, [sp, #48]	@ 0x30
 8008746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008748:	930e      	str	r3, [sp, #56]	@ 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	dc23      	bgt.n	8008796 <_dtoa_r+0x9aa>
 800874e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008750:	2b02      	cmp	r3, #2
 8008752:	dd20      	ble.n	8008796 <_dtoa_r+0x9aa>
 8008754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d000      	beq.n	800875c <_dtoa_r+0x970>
 800875a:	e6b5      	b.n	80084c8 <_dtoa_r+0x6dc>
 800875c:	0031      	movs	r1, r6
 800875e:	2205      	movs	r2, #5
 8008760:	9803      	ldr	r0, [sp, #12]
 8008762:	f000 faa5 	bl	8008cb0 <__multadd>
 8008766:	0006      	movs	r6, r0
 8008768:	0001      	movs	r1, r0
 800876a:	9805      	ldr	r0, [sp, #20]
 800876c:	f000 fcc6 	bl	80090fc <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	dc00      	bgt.n	8008776 <_dtoa_r+0x98a>
 8008774:	e6a8      	b.n	80084c8 <_dtoa_r+0x6dc>
 8008776:	9b08      	ldr	r3, [sp, #32]
 8008778:	9a08      	ldr	r2, [sp, #32]
 800877a:	1c5c      	adds	r4, r3, #1
 800877c:	2331      	movs	r3, #49	@ 0x31
 800877e:	7013      	strb	r3, [r2, #0]
 8008780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008782:	3301      	adds	r3, #1
 8008784:	930c      	str	r3, [sp, #48]	@ 0x30
 8008786:	e6a3      	b.n	80084d0 <_dtoa_r+0x6e4>
 8008788:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800878a:	0037      	movs	r7, r6
 800878c:	e7f3      	b.n	8008776 <_dtoa_r+0x98a>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008792:	930c      	str	r3, [sp, #48]	@ 0x30
 8008794:	e7f9      	b.n	800878a <_dtoa_r+0x99e>
 8008796:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d100      	bne.n	800879e <_dtoa_r+0x9b2>
 800879c:	e100      	b.n	80089a0 <_dtoa_r+0xbb4>
 800879e:	2c00      	cmp	r4, #0
 80087a0:	dd05      	ble.n	80087ae <_dtoa_r+0x9c2>
 80087a2:	0039      	movs	r1, r7
 80087a4:	0022      	movs	r2, r4
 80087a6:	9803      	ldr	r0, [sp, #12]
 80087a8:	f000 fc3c 	bl	8009024 <__lshift>
 80087ac:	0007      	movs	r7, r0
 80087ae:	0038      	movs	r0, r7
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	d018      	beq.n	80087e6 <_dtoa_r+0x9fa>
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	9803      	ldr	r0, [sp, #12]
 80087b8:	f000 fa12 	bl	8008be0 <_Balloc>
 80087bc:	1e04      	subs	r4, r0, #0
 80087be:	d105      	bne.n	80087cc <_dtoa_r+0x9e0>
 80087c0:	0022      	movs	r2, r4
 80087c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008870 <_dtoa_r+0xa84>)
 80087c4:	482b      	ldr	r0, [pc, #172]	@ (8008874 <_dtoa_r+0xa88>)
 80087c6:	492c      	ldr	r1, [pc, #176]	@ (8008878 <_dtoa_r+0xa8c>)
 80087c8:	f7ff fb25 	bl	8007e16 <_dtoa_r+0x2a>
 80087cc:	0039      	movs	r1, r7
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	310c      	adds	r1, #12
 80087d2:	3202      	adds	r2, #2
 80087d4:	0092      	lsls	r2, r2, #2
 80087d6:	300c      	adds	r0, #12
 80087d8:	f7ff fa70 	bl	8007cbc <memcpy>
 80087dc:	2201      	movs	r2, #1
 80087de:	0021      	movs	r1, r4
 80087e0:	9803      	ldr	r0, [sp, #12]
 80087e2:	f000 fc1f 	bl	8009024 <__lshift>
 80087e6:	9b08      	ldr	r3, [sp, #32]
 80087e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ea:	9306      	str	r3, [sp, #24]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	189b      	adds	r3, r3, r2
 80087f0:	2201      	movs	r2, #1
 80087f2:	9704      	str	r7, [sp, #16]
 80087f4:	0007      	movs	r7, r0
 80087f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fa:	4013      	ands	r3, r2
 80087fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80087fe:	0031      	movs	r1, r6
 8008800:	9805      	ldr	r0, [sp, #20]
 8008802:	f7ff fa64 	bl	8007cce <quorem>
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	0005      	movs	r5, r0
 800880a:	900a      	str	r0, [sp, #40]	@ 0x28
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	f000 fc75 	bl	80090fc <__mcmp>
 8008812:	003a      	movs	r2, r7
 8008814:	900d      	str	r0, [sp, #52]	@ 0x34
 8008816:	0031      	movs	r1, r6
 8008818:	9803      	ldr	r0, [sp, #12]
 800881a:	f000 fc8b 	bl	8009134 <__mdiff>
 800881e:	2201      	movs	r2, #1
 8008820:	68c3      	ldr	r3, [r0, #12]
 8008822:	0004      	movs	r4, r0
 8008824:	3530      	adds	r5, #48	@ 0x30
 8008826:	9209      	str	r2, [sp, #36]	@ 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <_dtoa_r+0xa4a>
 800882c:	0001      	movs	r1, r0
 800882e:	9805      	ldr	r0, [sp, #20]
 8008830:	f000 fc64 	bl	80090fc <__mcmp>
 8008834:	9009      	str	r0, [sp, #36]	@ 0x24
 8008836:	0021      	movs	r1, r4
 8008838:	9803      	ldr	r0, [sp, #12]
 800883a:	f000 fa15 	bl	8008c68 <_Bfree>
 800883e:	9b06      	ldr	r3, [sp, #24]
 8008840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008842:	1c5c      	adds	r4, r3, #1
 8008844:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008846:	4313      	orrs	r3, r2
 8008848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800884a:	4313      	orrs	r3, r2
 800884c:	d116      	bne.n	800887c <_dtoa_r+0xa90>
 800884e:	2d39      	cmp	r5, #57	@ 0x39
 8008850:	d02f      	beq.n	80088b2 <_dtoa_r+0xac6>
 8008852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd01      	ble.n	800885c <_dtoa_r+0xa70>
 8008858:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800885a:	3531      	adds	r5, #49	@ 0x31
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	701d      	strb	r5, [r3, #0]
 8008860:	e638      	b.n	80084d4 <_dtoa_r+0x6e8>
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	40240000 	.word	0x40240000
 8008868:	00000433 	.word	0x00000433
 800886c:	7ff00000 	.word	0x7ff00000
 8008870:	0800adb0 	.word	0x0800adb0
 8008874:	0800ad58 	.word	0x0800ad58
 8008878:	000002ef 	.word	0x000002ef
 800887c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800887e:	2b00      	cmp	r3, #0
 8008880:	db04      	blt.n	800888c <_dtoa_r+0xaa0>
 8008882:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008884:	4313      	orrs	r3, r2
 8008886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008888:	4313      	orrs	r3, r2
 800888a:	d11e      	bne.n	80088ca <_dtoa_r+0xade>
 800888c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	dde4      	ble.n	800885c <_dtoa_r+0xa70>
 8008892:	9905      	ldr	r1, [sp, #20]
 8008894:	2201      	movs	r2, #1
 8008896:	9803      	ldr	r0, [sp, #12]
 8008898:	f000 fbc4 	bl	8009024 <__lshift>
 800889c:	0031      	movs	r1, r6
 800889e:	9005      	str	r0, [sp, #20]
 80088a0:	f000 fc2c 	bl	80090fc <__mcmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	dc02      	bgt.n	80088ae <_dtoa_r+0xac2>
 80088a8:	d1d8      	bne.n	800885c <_dtoa_r+0xa70>
 80088aa:	07eb      	lsls	r3, r5, #31
 80088ac:	d5d6      	bpl.n	800885c <_dtoa_r+0xa70>
 80088ae:	2d39      	cmp	r5, #57	@ 0x39
 80088b0:	d1d2      	bne.n	8008858 <_dtoa_r+0xa6c>
 80088b2:	2339      	movs	r3, #57	@ 0x39
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	7013      	strb	r3, [r2, #0]
 80088b8:	0023      	movs	r3, r4
 80088ba:	001c      	movs	r4, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	2a39      	cmp	r2, #57	@ 0x39
 80088c2:	d04f      	beq.n	8008964 <_dtoa_r+0xb78>
 80088c4:	3201      	adds	r2, #1
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e604      	b.n	80084d4 <_dtoa_r+0x6e8>
 80088ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd03      	ble.n	80088d8 <_dtoa_r+0xaec>
 80088d0:	2d39      	cmp	r5, #57	@ 0x39
 80088d2:	d0ee      	beq.n	80088b2 <_dtoa_r+0xac6>
 80088d4:	3501      	adds	r5, #1
 80088d6:	e7c1      	b.n	800885c <_dtoa_r+0xa70>
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	9a06      	ldr	r2, [sp, #24]
 80088dc:	701d      	strb	r5, [r3, #0]
 80088de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d02a      	beq.n	800893a <_dtoa_r+0xb4e>
 80088e4:	2300      	movs	r3, #0
 80088e6:	220a      	movs	r2, #10
 80088e8:	9905      	ldr	r1, [sp, #20]
 80088ea:	9803      	ldr	r0, [sp, #12]
 80088ec:	f000 f9e0 	bl	8008cb0 <__multadd>
 80088f0:	9b04      	ldr	r3, [sp, #16]
 80088f2:	9005      	str	r0, [sp, #20]
 80088f4:	42bb      	cmp	r3, r7
 80088f6:	d109      	bne.n	800890c <_dtoa_r+0xb20>
 80088f8:	2300      	movs	r3, #0
 80088fa:	220a      	movs	r2, #10
 80088fc:	9904      	ldr	r1, [sp, #16]
 80088fe:	9803      	ldr	r0, [sp, #12]
 8008900:	f000 f9d6 	bl	8008cb0 <__multadd>
 8008904:	9004      	str	r0, [sp, #16]
 8008906:	0007      	movs	r7, r0
 8008908:	9406      	str	r4, [sp, #24]
 800890a:	e778      	b.n	80087fe <_dtoa_r+0xa12>
 800890c:	9904      	ldr	r1, [sp, #16]
 800890e:	2300      	movs	r3, #0
 8008910:	220a      	movs	r2, #10
 8008912:	9803      	ldr	r0, [sp, #12]
 8008914:	f000 f9cc 	bl	8008cb0 <__multadd>
 8008918:	2300      	movs	r3, #0
 800891a:	9004      	str	r0, [sp, #16]
 800891c:	220a      	movs	r2, #10
 800891e:	0039      	movs	r1, r7
 8008920:	9803      	ldr	r0, [sp, #12]
 8008922:	f000 f9c5 	bl	8008cb0 <__multadd>
 8008926:	e7ee      	b.n	8008906 <_dtoa_r+0xb1a>
 8008928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800892a:	2401      	movs	r4, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	dd00      	ble.n	8008932 <_dtoa_r+0xb46>
 8008930:	001c      	movs	r4, r3
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	191c      	adds	r4, r3, r4
 8008936:	2300      	movs	r3, #0
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	9905      	ldr	r1, [sp, #20]
 800893c:	2201      	movs	r2, #1
 800893e:	9803      	ldr	r0, [sp, #12]
 8008940:	f000 fb70 	bl	8009024 <__lshift>
 8008944:	0031      	movs	r1, r6
 8008946:	9005      	str	r0, [sp, #20]
 8008948:	f000 fbd8 	bl	80090fc <__mcmp>
 800894c:	2800      	cmp	r0, #0
 800894e:	dcb3      	bgt.n	80088b8 <_dtoa_r+0xacc>
 8008950:	d101      	bne.n	8008956 <_dtoa_r+0xb6a>
 8008952:	07ed      	lsls	r5, r5, #31
 8008954:	d4b0      	bmi.n	80088b8 <_dtoa_r+0xacc>
 8008956:	0023      	movs	r3, r4
 8008958:	001c      	movs	r4, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	2a30      	cmp	r2, #48	@ 0x30
 8008960:	d0fa      	beq.n	8008958 <_dtoa_r+0xb6c>
 8008962:	e5b7      	b.n	80084d4 <_dtoa_r+0x6e8>
 8008964:	9a08      	ldr	r2, [sp, #32]
 8008966:	429a      	cmp	r2, r3
 8008968:	d1a7      	bne.n	80088ba <_dtoa_r+0xace>
 800896a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800896c:	3301      	adds	r3, #1
 800896e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008970:	2331      	movs	r3, #49	@ 0x31
 8008972:	7013      	strb	r3, [r2, #0]
 8008974:	e5ae      	b.n	80084d4 <_dtoa_r+0x6e8>
 8008976:	4b15      	ldr	r3, [pc, #84]	@ (80089cc <_dtoa_r+0xbe0>)
 8008978:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	4b14      	ldr	r3, [pc, #80]	@ (80089d0 <_dtoa_r+0xbe4>)
 800897e:	2a00      	cmp	r2, #0
 8008980:	d001      	beq.n	8008986 <_dtoa_r+0xb9a>
 8008982:	f7ff fa7b 	bl	8007e7c <_dtoa_r+0x90>
 8008986:	f7ff fa7b 	bl	8007e80 <_dtoa_r+0x94>
 800898a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800898c:	2b01      	cmp	r3, #1
 800898e:	dc00      	bgt.n	8008992 <_dtoa_r+0xba6>
 8008990:	e648      	b.n	8008624 <_dtoa_r+0x838>
 8008992:	2001      	movs	r0, #1
 8008994:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008996:	e665      	b.n	8008664 <_dtoa_r+0x878>
 8008998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	dc00      	bgt.n	80089a0 <_dtoa_r+0xbb4>
 800899e:	e6d6      	b.n	800874e <_dtoa_r+0x962>
 80089a0:	2400      	movs	r4, #0
 80089a2:	0031      	movs	r1, r6
 80089a4:	9805      	ldr	r0, [sp, #20]
 80089a6:	f7ff f992 	bl	8007cce <quorem>
 80089aa:	9b08      	ldr	r3, [sp, #32]
 80089ac:	3030      	adds	r0, #48	@ 0x30
 80089ae:	5518      	strb	r0, [r3, r4]
 80089b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089b2:	3401      	adds	r4, #1
 80089b4:	0005      	movs	r5, r0
 80089b6:	429c      	cmp	r4, r3
 80089b8:	dab6      	bge.n	8008928 <_dtoa_r+0xb3c>
 80089ba:	2300      	movs	r3, #0
 80089bc:	220a      	movs	r2, #10
 80089be:	9905      	ldr	r1, [sp, #20]
 80089c0:	9803      	ldr	r0, [sp, #12]
 80089c2:	f000 f975 	bl	8008cb0 <__multadd>
 80089c6:	9005      	str	r0, [sp, #20]
 80089c8:	e7eb      	b.n	80089a2 <_dtoa_r+0xbb6>
 80089ca:	46c0      	nop			@ (mov r8, r8)
 80089cc:	0800ad34 	.word	0x0800ad34
 80089d0:	0800ad3c 	.word	0x0800ad3c

080089d4 <_free_r>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	0005      	movs	r5, r0
 80089d8:	1e0c      	subs	r4, r1, #0
 80089da:	d010      	beq.n	80089fe <_free_r+0x2a>
 80089dc:	3c04      	subs	r4, #4
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	da00      	bge.n	80089e6 <_free_r+0x12>
 80089e4:	18e4      	adds	r4, r4, r3
 80089e6:	0028      	movs	r0, r5
 80089e8:	f000 f8ea 	bl	8008bc0 <__malloc_lock>
 80089ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008a64 <_free_r+0x90>)
 80089ee:	6813      	ldr	r3, [r2, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <_free_r+0x2c>
 80089f4:	6063      	str	r3, [r4, #4]
 80089f6:	6014      	str	r4, [r2, #0]
 80089f8:	0028      	movs	r0, r5
 80089fa:	f000 f8e9 	bl	8008bd0 <__malloc_unlock>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d908      	bls.n	8008a16 <_free_r+0x42>
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	1821      	adds	r1, r4, r0
 8008a08:	428b      	cmp	r3, r1
 8008a0a:	d1f3      	bne.n	80089f4 <_free_r+0x20>
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	1809      	adds	r1, r1, r0
 8008a12:	6021      	str	r1, [r4, #0]
 8008a14:	e7ee      	b.n	80089f4 <_free_r+0x20>
 8008a16:	001a      	movs	r2, r3
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <_free_r+0x4e>
 8008a1e:	42a3      	cmp	r3, r4
 8008a20:	d9f9      	bls.n	8008a16 <_free_r+0x42>
 8008a22:	6811      	ldr	r1, [r2, #0]
 8008a24:	1850      	adds	r0, r2, r1
 8008a26:	42a0      	cmp	r0, r4
 8008a28:	d10b      	bne.n	8008a42 <_free_r+0x6e>
 8008a2a:	6820      	ldr	r0, [r4, #0]
 8008a2c:	1809      	adds	r1, r1, r0
 8008a2e:	1850      	adds	r0, r2, r1
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	4283      	cmp	r3, r0
 8008a34:	d1e0      	bne.n	80089f8 <_free_r+0x24>
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	1841      	adds	r1, r0, r1
 8008a3c:	6011      	str	r1, [r2, #0]
 8008a3e:	6053      	str	r3, [r2, #4]
 8008a40:	e7da      	b.n	80089f8 <_free_r+0x24>
 8008a42:	42a0      	cmp	r0, r4
 8008a44:	d902      	bls.n	8008a4c <_free_r+0x78>
 8008a46:	230c      	movs	r3, #12
 8008a48:	602b      	str	r3, [r5, #0]
 8008a4a:	e7d5      	b.n	80089f8 <_free_r+0x24>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	1821      	adds	r1, r4, r0
 8008a50:	428b      	cmp	r3, r1
 8008a52:	d103      	bne.n	8008a5c <_free_r+0x88>
 8008a54:	6819      	ldr	r1, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	1809      	adds	r1, r1, r0
 8008a5a:	6021      	str	r1, [r4, #0]
 8008a5c:	6063      	str	r3, [r4, #4]
 8008a5e:	6054      	str	r4, [r2, #4]
 8008a60:	e7ca      	b.n	80089f8 <_free_r+0x24>
 8008a62:	46c0      	nop			@ (mov r8, r8)
 8008a64:	20000700 	.word	0x20000700

08008a68 <malloc>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4b03      	ldr	r3, [pc, #12]	@ (8008a78 <malloc+0x10>)
 8008a6c:	0001      	movs	r1, r0
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	f000 f826 	bl	8008ac0 <_malloc_r>
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	46c0      	nop			@ (mov r8, r8)
 8008a78:	20000018 	.word	0x20000018

08008a7c <sbrk_aligned>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008abc <sbrk_aligned+0x40>)
 8008a80:	000d      	movs	r5, r1
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	0004      	movs	r4, r0
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d102      	bne.n	8008a90 <sbrk_aligned+0x14>
 8008a8a:	f001 f855 	bl	8009b38 <_sbrk_r>
 8008a8e:	6030      	str	r0, [r6, #0]
 8008a90:	0029      	movs	r1, r5
 8008a92:	0020      	movs	r0, r4
 8008a94:	f001 f850 	bl	8009b38 <_sbrk_r>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d103      	bne.n	8008aa4 <sbrk_aligned+0x28>
 8008a9c:	2501      	movs	r5, #1
 8008a9e:	426d      	negs	r5, r5
 8008aa0:	0028      	movs	r0, r5
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	1cc5      	adds	r5, r0, #3
 8008aa8:	439d      	bics	r5, r3
 8008aaa:	42a8      	cmp	r0, r5
 8008aac:	d0f8      	beq.n	8008aa0 <sbrk_aligned+0x24>
 8008aae:	1a29      	subs	r1, r5, r0
 8008ab0:	0020      	movs	r0, r4
 8008ab2:	f001 f841 	bl	8009b38 <_sbrk_r>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d1f2      	bne.n	8008aa0 <sbrk_aligned+0x24>
 8008aba:	e7ef      	b.n	8008a9c <sbrk_aligned+0x20>
 8008abc:	200006fc 	.word	0x200006fc

08008ac0 <_malloc_r>:
 8008ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	1ccb      	adds	r3, r1, #3
 8008ac6:	4393      	bics	r3, r2
 8008ac8:	3308      	adds	r3, #8
 8008aca:	0005      	movs	r5, r0
 8008acc:	001f      	movs	r7, r3
 8008ace:	2b0c      	cmp	r3, #12
 8008ad0:	d234      	bcs.n	8008b3c <_malloc_r+0x7c>
 8008ad2:	270c      	movs	r7, #12
 8008ad4:	42b9      	cmp	r1, r7
 8008ad6:	d833      	bhi.n	8008b40 <_malloc_r+0x80>
 8008ad8:	0028      	movs	r0, r5
 8008ada:	f000 f871 	bl	8008bc0 <__malloc_lock>
 8008ade:	4e37      	ldr	r6, [pc, #220]	@ (8008bbc <_malloc_r+0xfc>)
 8008ae0:	6833      	ldr	r3, [r6, #0]
 8008ae2:	001c      	movs	r4, r3
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	d12f      	bne.n	8008b48 <_malloc_r+0x88>
 8008ae8:	0039      	movs	r1, r7
 8008aea:	0028      	movs	r0, r5
 8008aec:	f7ff ffc6 	bl	8008a7c <sbrk_aligned>
 8008af0:	0004      	movs	r4, r0
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	d15f      	bne.n	8008bb6 <_malloc_r+0xf6>
 8008af6:	6834      	ldr	r4, [r6, #0]
 8008af8:	9400      	str	r4, [sp, #0]
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d14a      	bne.n	8008b96 <_malloc_r+0xd6>
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	d052      	beq.n	8008baa <_malloc_r+0xea>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	0028      	movs	r0, r5
 8008b08:	18e3      	adds	r3, r4, r3
 8008b0a:	9900      	ldr	r1, [sp, #0]
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	f001 f813 	bl	8009b38 <_sbrk_r>
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	4283      	cmp	r3, r0
 8008b16:	d148      	bne.n	8008baa <_malloc_r+0xea>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	0028      	movs	r0, r5
 8008b1c:	1aff      	subs	r7, r7, r3
 8008b1e:	0039      	movs	r1, r7
 8008b20:	f7ff ffac 	bl	8008a7c <sbrk_aligned>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d040      	beq.n	8008baa <_malloc_r+0xea>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	19db      	adds	r3, r3, r7
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	6833      	ldr	r3, [r6, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	d133      	bne.n	8008b9e <_malloc_r+0xde>
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	e019      	b.n	8008b70 <_malloc_r+0xb0>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dac9      	bge.n	8008ad4 <_malloc_r+0x14>
 8008b40:	230c      	movs	r3, #12
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	2000      	movs	r0, #0
 8008b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b48:	6821      	ldr	r1, [r4, #0]
 8008b4a:	1bc9      	subs	r1, r1, r7
 8008b4c:	d420      	bmi.n	8008b90 <_malloc_r+0xd0>
 8008b4e:	290b      	cmp	r1, #11
 8008b50:	d90a      	bls.n	8008b68 <_malloc_r+0xa8>
 8008b52:	19e2      	adds	r2, r4, r7
 8008b54:	6027      	str	r7, [r4, #0]
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	d104      	bne.n	8008b64 <_malloc_r+0xa4>
 8008b5a:	6032      	str	r2, [r6, #0]
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	6011      	str	r1, [r2, #0]
 8008b60:	6053      	str	r3, [r2, #4]
 8008b62:	e005      	b.n	8008b70 <_malloc_r+0xb0>
 8008b64:	605a      	str	r2, [r3, #4]
 8008b66:	e7f9      	b.n	8008b5c <_malloc_r+0x9c>
 8008b68:	6862      	ldr	r2, [r4, #4]
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	d10e      	bne.n	8008b8c <_malloc_r+0xcc>
 8008b6e:	6032      	str	r2, [r6, #0]
 8008b70:	0028      	movs	r0, r5
 8008b72:	f000 f82d 	bl	8008bd0 <__malloc_unlock>
 8008b76:	0020      	movs	r0, r4
 8008b78:	2207      	movs	r2, #7
 8008b7a:	300b      	adds	r0, #11
 8008b7c:	1d23      	adds	r3, r4, #4
 8008b7e:	4390      	bics	r0, r2
 8008b80:	1ac2      	subs	r2, r0, r3
 8008b82:	4298      	cmp	r0, r3
 8008b84:	d0df      	beq.n	8008b46 <_malloc_r+0x86>
 8008b86:	1a1b      	subs	r3, r3, r0
 8008b88:	50a3      	str	r3, [r4, r2]
 8008b8a:	e7dc      	b.n	8008b46 <_malloc_r+0x86>
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	e7ef      	b.n	8008b70 <_malloc_r+0xb0>
 8008b90:	0023      	movs	r3, r4
 8008b92:	6864      	ldr	r4, [r4, #4]
 8008b94:	e7a6      	b.n	8008ae4 <_malloc_r+0x24>
 8008b96:	9c00      	ldr	r4, [sp, #0]
 8008b98:	6863      	ldr	r3, [r4, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	e7ad      	b.n	8008afa <_malloc_r+0x3a>
 8008b9e:	001a      	movs	r2, r3
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	d1fb      	bne.n	8008b9e <_malloc_r+0xde>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e7da      	b.n	8008b60 <_malloc_r+0xa0>
 8008baa:	230c      	movs	r3, #12
 8008bac:	0028      	movs	r0, r5
 8008bae:	602b      	str	r3, [r5, #0]
 8008bb0:	f000 f80e 	bl	8008bd0 <__malloc_unlock>
 8008bb4:	e7c6      	b.n	8008b44 <_malloc_r+0x84>
 8008bb6:	6007      	str	r7, [r0, #0]
 8008bb8:	e7da      	b.n	8008b70 <_malloc_r+0xb0>
 8008bba:	46c0      	nop			@ (mov r8, r8)
 8008bbc:	20000700 	.word	0x20000700

08008bc0 <__malloc_lock>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	4802      	ldr	r0, [pc, #8]	@ (8008bcc <__malloc_lock+0xc>)
 8008bc4:	f7ff f86d 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	46c0      	nop			@ (mov r8, r8)
 8008bcc:	200006f8 	.word	0x200006f8

08008bd0 <__malloc_unlock>:
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	4802      	ldr	r0, [pc, #8]	@ (8008bdc <__malloc_unlock+0xc>)
 8008bd4:	f7ff f866 	bl	8007ca4 <__retarget_lock_release_recursive>
 8008bd8:	bd10      	pop	{r4, pc}
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	200006f8 	.word	0x200006f8

08008be0 <_Balloc>:
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	69c5      	ldr	r5, [r0, #28]
 8008be4:	0006      	movs	r6, r0
 8008be6:	000c      	movs	r4, r1
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	d10e      	bne.n	8008c0a <_Balloc+0x2a>
 8008bec:	2010      	movs	r0, #16
 8008bee:	f7ff ff3b 	bl	8008a68 <malloc>
 8008bf2:	1e02      	subs	r2, r0, #0
 8008bf4:	61f0      	str	r0, [r6, #28]
 8008bf6:	d104      	bne.n	8008c02 <_Balloc+0x22>
 8008bf8:	216b      	movs	r1, #107	@ 0x6b
 8008bfa:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <_Balloc+0x80>)
 8008bfc:	4819      	ldr	r0, [pc, #100]	@ (8008c64 <_Balloc+0x84>)
 8008bfe:	f000 ffad 	bl	8009b5c <__assert_func>
 8008c02:	6045      	str	r5, [r0, #4]
 8008c04:	6085      	str	r5, [r0, #8]
 8008c06:	6005      	str	r5, [r0, #0]
 8008c08:	60c5      	str	r5, [r0, #12]
 8008c0a:	69f5      	ldr	r5, [r6, #28]
 8008c0c:	68eb      	ldr	r3, [r5, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d013      	beq.n	8008c3a <_Balloc+0x5a>
 8008c12:	69f3      	ldr	r3, [r6, #28]
 8008c14:	00a2      	lsls	r2, r4, #2
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	189b      	adds	r3, r3, r2
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d118      	bne.n	8008c52 <_Balloc+0x72>
 8008c20:	2101      	movs	r1, #1
 8008c22:	000d      	movs	r5, r1
 8008c24:	40a5      	lsls	r5, r4
 8008c26:	1d6a      	adds	r2, r5, #5
 8008c28:	0030      	movs	r0, r6
 8008c2a:	0092      	lsls	r2, r2, #2
 8008c2c:	f000 ffb4 	bl	8009b98 <_calloc_r>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d00c      	beq.n	8008c4e <_Balloc+0x6e>
 8008c34:	6044      	str	r4, [r0, #4]
 8008c36:	6085      	str	r5, [r0, #8]
 8008c38:	e00d      	b.n	8008c56 <_Balloc+0x76>
 8008c3a:	2221      	movs	r2, #33	@ 0x21
 8008c3c:	2104      	movs	r1, #4
 8008c3e:	0030      	movs	r0, r6
 8008c40:	f000 ffaa 	bl	8009b98 <_calloc_r>
 8008c44:	69f3      	ldr	r3, [r6, #28]
 8008c46:	60e8      	str	r0, [r5, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e1      	bne.n	8008c12 <_Balloc+0x32>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	6802      	ldr	r2, [r0, #0]
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6103      	str	r3, [r0, #16]
 8008c5a:	60c3      	str	r3, [r0, #12]
 8008c5c:	e7f8      	b.n	8008c50 <_Balloc+0x70>
 8008c5e:	46c0      	nop			@ (mov r8, r8)
 8008c60:	0800ad41 	.word	0x0800ad41
 8008c64:	0800adc1 	.word	0x0800adc1

08008c68 <_Bfree>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	69c6      	ldr	r6, [r0, #28]
 8008c6c:	0005      	movs	r5, r0
 8008c6e:	000c      	movs	r4, r1
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	d10e      	bne.n	8008c92 <_Bfree+0x2a>
 8008c74:	2010      	movs	r0, #16
 8008c76:	f7ff fef7 	bl	8008a68 <malloc>
 8008c7a:	1e02      	subs	r2, r0, #0
 8008c7c:	61e8      	str	r0, [r5, #28]
 8008c7e:	d104      	bne.n	8008c8a <_Bfree+0x22>
 8008c80:	218f      	movs	r1, #143	@ 0x8f
 8008c82:	4b09      	ldr	r3, [pc, #36]	@ (8008ca8 <_Bfree+0x40>)
 8008c84:	4809      	ldr	r0, [pc, #36]	@ (8008cac <_Bfree+0x44>)
 8008c86:	f000 ff69 	bl	8009b5c <__assert_func>
 8008c8a:	6046      	str	r6, [r0, #4]
 8008c8c:	6086      	str	r6, [r0, #8]
 8008c8e:	6006      	str	r6, [r0, #0]
 8008c90:	60c6      	str	r6, [r0, #12]
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d007      	beq.n	8008ca6 <_Bfree+0x3e>
 8008c96:	69eb      	ldr	r3, [r5, #28]
 8008c98:	6862      	ldr	r2, [r4, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	0092      	lsls	r2, r2, #2
 8008c9e:	189b      	adds	r3, r3, r2
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	601c      	str	r4, [r3, #0]
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}
 8008ca8:	0800ad41 	.word	0x0800ad41
 8008cac:	0800adc1 	.word	0x0800adc1

08008cb0 <__multadd>:
 8008cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb2:	000f      	movs	r7, r1
 8008cb4:	9001      	str	r0, [sp, #4]
 8008cb6:	000c      	movs	r4, r1
 8008cb8:	001e      	movs	r6, r3
 8008cba:	2000      	movs	r0, #0
 8008cbc:	690d      	ldr	r5, [r1, #16]
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	b299      	uxth	r1, r3
 8008cc6:	4351      	muls	r1, r2
 8008cc8:	0c1b      	lsrs	r3, r3, #16
 8008cca:	4353      	muls	r3, r2
 8008ccc:	1989      	adds	r1, r1, r6
 8008cce:	0c0e      	lsrs	r6, r1, #16
 8008cd0:	199b      	adds	r3, r3, r6
 8008cd2:	0c1e      	lsrs	r6, r3, #16
 8008cd4:	b289      	uxth	r1, r1
 8008cd6:	041b      	lsls	r3, r3, #16
 8008cd8:	185b      	adds	r3, r3, r1
 8008cda:	c708      	stmia	r7!, {r3}
 8008cdc:	4285      	cmp	r5, r0
 8008cde:	dcef      	bgt.n	8008cc0 <__multadd+0x10>
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	d022      	beq.n	8008d2a <__multadd+0x7a>
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	42ab      	cmp	r3, r5
 8008ce8:	dc19      	bgt.n	8008d1e <__multadd+0x6e>
 8008cea:	6861      	ldr	r1, [r4, #4]
 8008cec:	9801      	ldr	r0, [sp, #4]
 8008cee:	3101      	adds	r1, #1
 8008cf0:	f7ff ff76 	bl	8008be0 <_Balloc>
 8008cf4:	1e07      	subs	r7, r0, #0
 8008cf6:	d105      	bne.n	8008d04 <__multadd+0x54>
 8008cf8:	003a      	movs	r2, r7
 8008cfa:	21ba      	movs	r1, #186	@ 0xba
 8008cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d30 <__multadd+0x80>)
 8008cfe:	480d      	ldr	r0, [pc, #52]	@ (8008d34 <__multadd+0x84>)
 8008d00:	f000 ff2c 	bl	8009b5c <__assert_func>
 8008d04:	0021      	movs	r1, r4
 8008d06:	6922      	ldr	r2, [r4, #16]
 8008d08:	310c      	adds	r1, #12
 8008d0a:	3202      	adds	r2, #2
 8008d0c:	0092      	lsls	r2, r2, #2
 8008d0e:	300c      	adds	r0, #12
 8008d10:	f7fe ffd4 	bl	8007cbc <memcpy>
 8008d14:	0021      	movs	r1, r4
 8008d16:	9801      	ldr	r0, [sp, #4]
 8008d18:	f7ff ffa6 	bl	8008c68 <_Bfree>
 8008d1c:	003c      	movs	r4, r7
 8008d1e:	1d2b      	adds	r3, r5, #4
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	18e3      	adds	r3, r4, r3
 8008d24:	3501      	adds	r5, #1
 8008d26:	605e      	str	r6, [r3, #4]
 8008d28:	6125      	str	r5, [r4, #16]
 8008d2a:	0020      	movs	r0, r4
 8008d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	0800adb0 	.word	0x0800adb0
 8008d34:	0800adc1 	.word	0x0800adc1

08008d38 <__hi0bits>:
 8008d38:	2280      	movs	r2, #128	@ 0x80
 8008d3a:	0003      	movs	r3, r0
 8008d3c:	0252      	lsls	r2, r2, #9
 8008d3e:	2000      	movs	r0, #0
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d201      	bcs.n	8008d48 <__hi0bits+0x10>
 8008d44:	041b      	lsls	r3, r3, #16
 8008d46:	3010      	adds	r0, #16
 8008d48:	2280      	movs	r2, #128	@ 0x80
 8008d4a:	0452      	lsls	r2, r2, #17
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d201      	bcs.n	8008d54 <__hi0bits+0x1c>
 8008d50:	3008      	adds	r0, #8
 8008d52:	021b      	lsls	r3, r3, #8
 8008d54:	2280      	movs	r2, #128	@ 0x80
 8008d56:	0552      	lsls	r2, r2, #21
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d201      	bcs.n	8008d60 <__hi0bits+0x28>
 8008d5c:	3004      	adds	r0, #4
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	2280      	movs	r2, #128	@ 0x80
 8008d62:	05d2      	lsls	r2, r2, #23
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d201      	bcs.n	8008d6c <__hi0bits+0x34>
 8008d68:	3002      	adds	r0, #2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	db03      	blt.n	8008d78 <__hi0bits+0x40>
 8008d70:	3001      	adds	r0, #1
 8008d72:	4213      	tst	r3, r2
 8008d74:	d100      	bne.n	8008d78 <__hi0bits+0x40>
 8008d76:	2020      	movs	r0, #32
 8008d78:	4770      	bx	lr

08008d7a <__lo0bits>:
 8008d7a:	6803      	ldr	r3, [r0, #0]
 8008d7c:	0001      	movs	r1, r0
 8008d7e:	2207      	movs	r2, #7
 8008d80:	0018      	movs	r0, r3
 8008d82:	4010      	ands	r0, r2
 8008d84:	4213      	tst	r3, r2
 8008d86:	d00d      	beq.n	8008da4 <__lo0bits+0x2a>
 8008d88:	3a06      	subs	r2, #6
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	4213      	tst	r3, r2
 8008d8e:	d105      	bne.n	8008d9c <__lo0bits+0x22>
 8008d90:	3002      	adds	r0, #2
 8008d92:	4203      	tst	r3, r0
 8008d94:	d003      	beq.n	8008d9e <__lo0bits+0x24>
 8008d96:	40d3      	lsrs	r3, r2
 8008d98:	0010      	movs	r0, r2
 8008d9a:	600b      	str	r3, [r1, #0]
 8008d9c:	4770      	bx	lr
 8008d9e:	089b      	lsrs	r3, r3, #2
 8008da0:	600b      	str	r3, [r1, #0]
 8008da2:	e7fb      	b.n	8008d9c <__lo0bits+0x22>
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	d101      	bne.n	8008dae <__lo0bits+0x34>
 8008daa:	2010      	movs	r0, #16
 8008dac:	0c1b      	lsrs	r3, r3, #16
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	2a00      	cmp	r2, #0
 8008db2:	d101      	bne.n	8008db8 <__lo0bits+0x3e>
 8008db4:	3008      	adds	r0, #8
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	071a      	lsls	r2, r3, #28
 8008dba:	d101      	bne.n	8008dc0 <__lo0bits+0x46>
 8008dbc:	3004      	adds	r0, #4
 8008dbe:	091b      	lsrs	r3, r3, #4
 8008dc0:	079a      	lsls	r2, r3, #30
 8008dc2:	d101      	bne.n	8008dc8 <__lo0bits+0x4e>
 8008dc4:	3002      	adds	r0, #2
 8008dc6:	089b      	lsrs	r3, r3, #2
 8008dc8:	07da      	lsls	r2, r3, #31
 8008dca:	d4e9      	bmi.n	8008da0 <__lo0bits+0x26>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	d1e6      	bne.n	8008da0 <__lo0bits+0x26>
 8008dd2:	2020      	movs	r0, #32
 8008dd4:	e7e2      	b.n	8008d9c <__lo0bits+0x22>
	...

08008dd8 <__i2b>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	000c      	movs	r4, r1
 8008ddc:	2101      	movs	r1, #1
 8008dde:	f7ff feff 	bl	8008be0 <_Balloc>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d107      	bne.n	8008df6 <__i2b+0x1e>
 8008de6:	2146      	movs	r1, #70	@ 0x46
 8008de8:	4c05      	ldr	r4, [pc, #20]	@ (8008e00 <__i2b+0x28>)
 8008dea:	0002      	movs	r2, r0
 8008dec:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <__i2b+0x2c>)
 8008dee:	0020      	movs	r0, r4
 8008df0:	31ff      	adds	r1, #255	@ 0xff
 8008df2:	f000 feb3 	bl	8009b5c <__assert_func>
 8008df6:	2301      	movs	r3, #1
 8008df8:	6144      	str	r4, [r0, #20]
 8008dfa:	6103      	str	r3, [r0, #16]
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	0800adc1 	.word	0x0800adc1
 8008e04:	0800adb0 	.word	0x0800adb0

08008e08 <__multiply>:
 8008e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0a:	0014      	movs	r4, r2
 8008e0c:	690a      	ldr	r2, [r1, #16]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	000d      	movs	r5, r1
 8008e12:	b08b      	sub	sp, #44	@ 0x2c
 8008e14:	429a      	cmp	r2, r3
 8008e16:	db02      	blt.n	8008e1e <__multiply+0x16>
 8008e18:	0023      	movs	r3, r4
 8008e1a:	000c      	movs	r4, r1
 8008e1c:	001d      	movs	r5, r3
 8008e1e:	6927      	ldr	r7, [r4, #16]
 8008e20:	692e      	ldr	r6, [r5, #16]
 8008e22:	6861      	ldr	r1, [r4, #4]
 8008e24:	19bb      	adds	r3, r7, r6
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	68a3      	ldr	r3, [r4, #8]
 8008e2a:	19ba      	adds	r2, r7, r6
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	da00      	bge.n	8008e32 <__multiply+0x2a>
 8008e30:	3101      	adds	r1, #1
 8008e32:	f7ff fed5 	bl	8008be0 <_Balloc>
 8008e36:	9002      	str	r0, [sp, #8]
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d106      	bne.n	8008e4a <__multiply+0x42>
 8008e3c:	21b1      	movs	r1, #177	@ 0xb1
 8008e3e:	4b49      	ldr	r3, [pc, #292]	@ (8008f64 <__multiply+0x15c>)
 8008e40:	4849      	ldr	r0, [pc, #292]	@ (8008f68 <__multiply+0x160>)
 8008e42:	9a02      	ldr	r2, [sp, #8]
 8008e44:	0049      	lsls	r1, r1, #1
 8008e46:	f000 fe89 	bl	8009b5c <__assert_func>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	3314      	adds	r3, #20
 8008e50:	469c      	mov	ip, r3
 8008e52:	19bb      	adds	r3, r7, r6
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4463      	add	r3, ip
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	4663      	mov	r3, ip
 8008e5c:	9904      	ldr	r1, [sp, #16]
 8008e5e:	428b      	cmp	r3, r1
 8008e60:	d32a      	bcc.n	8008eb8 <__multiply+0xb0>
 8008e62:	0023      	movs	r3, r4
 8008e64:	00bf      	lsls	r7, r7, #2
 8008e66:	3314      	adds	r3, #20
 8008e68:	3514      	adds	r5, #20
 8008e6a:	9308      	str	r3, [sp, #32]
 8008e6c:	00b6      	lsls	r6, r6, #2
 8008e6e:	19db      	adds	r3, r3, r7
 8008e70:	9305      	str	r3, [sp, #20]
 8008e72:	19ab      	adds	r3, r5, r6
 8008e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e76:	2304      	movs	r3, #4
 8008e78:	9306      	str	r3, [sp, #24]
 8008e7a:	0023      	movs	r3, r4
 8008e7c:	9a05      	ldr	r2, [sp, #20]
 8008e7e:	3315      	adds	r3, #21
 8008e80:	9501      	str	r5, [sp, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d305      	bcc.n	8008e92 <__multiply+0x8a>
 8008e86:	1b13      	subs	r3, r2, r4
 8008e88:	3b15      	subs	r3, #21
 8008e8a:	089b      	lsrs	r3, r3, #2
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	9306      	str	r3, [sp, #24]
 8008e92:	9b01      	ldr	r3, [sp, #4]
 8008e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d310      	bcc.n	8008ebc <__multiply+0xb4>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd05      	ble.n	8008eac <__multiply+0xa4>
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	3b04      	subs	r3, #4
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d056      	beq.n	8008f5a <__multiply+0x152>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	9a03      	ldr	r2, [sp, #12]
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	611a      	str	r2, [r3, #16]
 8008eb4:	b00b      	add	sp, #44	@ 0x2c
 8008eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb8:	c304      	stmia	r3!, {r2}
 8008eba:	e7cf      	b.n	8008e5c <__multiply+0x54>
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	b280      	uxth	r0, r0
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d01e      	beq.n	8008f04 <__multiply+0xfc>
 8008ec6:	4667      	mov	r7, ip
 8008ec8:	2500      	movs	r5, #0
 8008eca:	9e08      	ldr	r6, [sp, #32]
 8008ecc:	ce02      	ldmia	r6!, {r1}
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	9307      	str	r3, [sp, #28]
 8008ed2:	b28b      	uxth	r3, r1
 8008ed4:	4343      	muls	r3, r0
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	466b      	mov	r3, sp
 8008eda:	0c09      	lsrs	r1, r1, #16
 8008edc:	8b9b      	ldrh	r3, [r3, #28]
 8008ede:	4341      	muls	r1, r0
 8008ee0:	18d3      	adds	r3, r2, r3
 8008ee2:	9a07      	ldr	r2, [sp, #28]
 8008ee4:	195b      	adds	r3, r3, r5
 8008ee6:	0c12      	lsrs	r2, r2, #16
 8008ee8:	1889      	adds	r1, r1, r2
 8008eea:	0c1a      	lsrs	r2, r3, #16
 8008eec:	188a      	adds	r2, r1, r2
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	0c15      	lsrs	r5, r2, #16
 8008ef2:	0412      	lsls	r2, r2, #16
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	9b05      	ldr	r3, [sp, #20]
 8008ef8:	c704      	stmia	r7!, {r2}
 8008efa:	42b3      	cmp	r3, r6
 8008efc:	d8e6      	bhi.n	8008ecc <__multiply+0xc4>
 8008efe:	4663      	mov	r3, ip
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	509d      	str	r5, [r3, r2]
 8008f04:	9b01      	ldr	r3, [sp, #4]
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	0c00      	lsrs	r0, r0, #16
 8008f0a:	d020      	beq.n	8008f4e <__multiply+0x146>
 8008f0c:	4663      	mov	r3, ip
 8008f0e:	0025      	movs	r5, r4
 8008f10:	4661      	mov	r1, ip
 8008f12:	2700      	movs	r7, #0
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3514      	adds	r5, #20
 8008f18:	682a      	ldr	r2, [r5, #0]
 8008f1a:	680e      	ldr	r6, [r1, #0]
 8008f1c:	b292      	uxth	r2, r2
 8008f1e:	4342      	muls	r2, r0
 8008f20:	0c36      	lsrs	r6, r6, #16
 8008f22:	1992      	adds	r2, r2, r6
 8008f24:	19d2      	adds	r2, r2, r7
 8008f26:	0416      	lsls	r6, r2, #16
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	431e      	orrs	r6, r3
 8008f2c:	600e      	str	r6, [r1, #0]
 8008f2e:	cd40      	ldmia	r5!, {r6}
 8008f30:	684b      	ldr	r3, [r1, #4]
 8008f32:	0c36      	lsrs	r6, r6, #16
 8008f34:	4346      	muls	r6, r0
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	0c12      	lsrs	r2, r2, #16
 8008f3a:	18f3      	adds	r3, r6, r3
 8008f3c:	189b      	adds	r3, r3, r2
 8008f3e:	9a05      	ldr	r2, [sp, #20]
 8008f40:	0c1f      	lsrs	r7, r3, #16
 8008f42:	3104      	adds	r1, #4
 8008f44:	42aa      	cmp	r2, r5
 8008f46:	d8e7      	bhi.n	8008f18 <__multiply+0x110>
 8008f48:	4662      	mov	r2, ip
 8008f4a:	9906      	ldr	r1, [sp, #24]
 8008f4c:	5053      	str	r3, [r2, r1]
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	2304      	movs	r3, #4
 8008f56:	449c      	add	ip, r3
 8008f58:	e79b      	b.n	8008e92 <__multiply+0x8a>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	e79b      	b.n	8008e9a <__multiply+0x92>
 8008f62:	46c0      	nop			@ (mov r8, r8)
 8008f64:	0800adb0 	.word	0x0800adb0
 8008f68:	0800adc1 	.word	0x0800adc1

08008f6c <__pow5mult>:
 8008f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f6e:	2303      	movs	r3, #3
 8008f70:	0015      	movs	r5, r2
 8008f72:	0007      	movs	r7, r0
 8008f74:	000e      	movs	r6, r1
 8008f76:	401a      	ands	r2, r3
 8008f78:	421d      	tst	r5, r3
 8008f7a:	d008      	beq.n	8008f8e <__pow5mult+0x22>
 8008f7c:	4925      	ldr	r1, [pc, #148]	@ (8009014 <__pow5mult+0xa8>)
 8008f7e:	3a01      	subs	r2, #1
 8008f80:	0092      	lsls	r2, r2, #2
 8008f82:	5852      	ldr	r2, [r2, r1]
 8008f84:	2300      	movs	r3, #0
 8008f86:	0031      	movs	r1, r6
 8008f88:	f7ff fe92 	bl	8008cb0 <__multadd>
 8008f8c:	0006      	movs	r6, r0
 8008f8e:	10ad      	asrs	r5, r5, #2
 8008f90:	d03d      	beq.n	800900e <__pow5mult+0xa2>
 8008f92:	69fc      	ldr	r4, [r7, #28]
 8008f94:	2c00      	cmp	r4, #0
 8008f96:	d10f      	bne.n	8008fb8 <__pow5mult+0x4c>
 8008f98:	2010      	movs	r0, #16
 8008f9a:	f7ff fd65 	bl	8008a68 <malloc>
 8008f9e:	1e02      	subs	r2, r0, #0
 8008fa0:	61f8      	str	r0, [r7, #28]
 8008fa2:	d105      	bne.n	8008fb0 <__pow5mult+0x44>
 8008fa4:	21b4      	movs	r1, #180	@ 0xb4
 8008fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8009018 <__pow5mult+0xac>)
 8008fa8:	481c      	ldr	r0, [pc, #112]	@ (800901c <__pow5mult+0xb0>)
 8008faa:	31ff      	adds	r1, #255	@ 0xff
 8008fac:	f000 fdd6 	bl	8009b5c <__assert_func>
 8008fb0:	6044      	str	r4, [r0, #4]
 8008fb2:	6084      	str	r4, [r0, #8]
 8008fb4:	6004      	str	r4, [r0, #0]
 8008fb6:	60c4      	str	r4, [r0, #12]
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	689c      	ldr	r4, [r3, #8]
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	2c00      	cmp	r4, #0
 8008fc0:	d108      	bne.n	8008fd4 <__pow5mult+0x68>
 8008fc2:	0038      	movs	r0, r7
 8008fc4:	4916      	ldr	r1, [pc, #88]	@ (8009020 <__pow5mult+0xb4>)
 8008fc6:	f7ff ff07 	bl	8008dd8 <__i2b>
 8008fca:	9b01      	ldr	r3, [sp, #4]
 8008fcc:	0004      	movs	r4, r0
 8008fce:	6098      	str	r0, [r3, #8]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6003      	str	r3, [r0, #0]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	421d      	tst	r5, r3
 8008fd8:	d00a      	beq.n	8008ff0 <__pow5mult+0x84>
 8008fda:	0031      	movs	r1, r6
 8008fdc:	0022      	movs	r2, r4
 8008fde:	0038      	movs	r0, r7
 8008fe0:	f7ff ff12 	bl	8008e08 <__multiply>
 8008fe4:	0031      	movs	r1, r6
 8008fe6:	9001      	str	r0, [sp, #4]
 8008fe8:	0038      	movs	r0, r7
 8008fea:	f7ff fe3d 	bl	8008c68 <_Bfree>
 8008fee:	9e01      	ldr	r6, [sp, #4]
 8008ff0:	106d      	asrs	r5, r5, #1
 8008ff2:	d00c      	beq.n	800900e <__pow5mult+0xa2>
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d107      	bne.n	800900a <__pow5mult+0x9e>
 8008ffa:	0022      	movs	r2, r4
 8008ffc:	0021      	movs	r1, r4
 8008ffe:	0038      	movs	r0, r7
 8009000:	f7ff ff02 	bl	8008e08 <__multiply>
 8009004:	2300      	movs	r3, #0
 8009006:	6020      	str	r0, [r4, #0]
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	0004      	movs	r4, r0
 800900c:	e7e2      	b.n	8008fd4 <__pow5mult+0x68>
 800900e:	0030      	movs	r0, r6
 8009010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009012:	46c0      	nop			@ (mov r8, r8)
 8009014:	0800ae1c 	.word	0x0800ae1c
 8009018:	0800ad41 	.word	0x0800ad41
 800901c:	0800adc1 	.word	0x0800adc1
 8009020:	00000271 	.word	0x00000271

08009024 <__lshift>:
 8009024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009026:	000c      	movs	r4, r1
 8009028:	0016      	movs	r6, r2
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	1157      	asrs	r7, r2, #5
 800902e:	b085      	sub	sp, #20
 8009030:	18fb      	adds	r3, r7, r3
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	3301      	adds	r3, #1
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	6849      	ldr	r1, [r1, #4]
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	9002      	str	r0, [sp, #8]
 800903e:	9a00      	ldr	r2, [sp, #0]
 8009040:	4293      	cmp	r3, r2
 8009042:	db10      	blt.n	8009066 <__lshift+0x42>
 8009044:	9802      	ldr	r0, [sp, #8]
 8009046:	f7ff fdcb 	bl	8008be0 <_Balloc>
 800904a:	2300      	movs	r3, #0
 800904c:	0001      	movs	r1, r0
 800904e:	0005      	movs	r5, r0
 8009050:	001a      	movs	r2, r3
 8009052:	3114      	adds	r1, #20
 8009054:	4298      	cmp	r0, r3
 8009056:	d10c      	bne.n	8009072 <__lshift+0x4e>
 8009058:	21ef      	movs	r1, #239	@ 0xef
 800905a:	002a      	movs	r2, r5
 800905c:	4b25      	ldr	r3, [pc, #148]	@ (80090f4 <__lshift+0xd0>)
 800905e:	4826      	ldr	r0, [pc, #152]	@ (80090f8 <__lshift+0xd4>)
 8009060:	0049      	lsls	r1, r1, #1
 8009062:	f000 fd7b 	bl	8009b5c <__assert_func>
 8009066:	3101      	adds	r1, #1
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	e7e8      	b.n	800903e <__lshift+0x1a>
 800906c:	0098      	lsls	r0, r3, #2
 800906e:	500a      	str	r2, [r1, r0]
 8009070:	3301      	adds	r3, #1
 8009072:	42bb      	cmp	r3, r7
 8009074:	dbfa      	blt.n	800906c <__lshift+0x48>
 8009076:	43fb      	mvns	r3, r7
 8009078:	17db      	asrs	r3, r3, #31
 800907a:	401f      	ands	r7, r3
 800907c:	00bf      	lsls	r7, r7, #2
 800907e:	0023      	movs	r3, r4
 8009080:	201f      	movs	r0, #31
 8009082:	19c9      	adds	r1, r1, r7
 8009084:	0037      	movs	r7, r6
 8009086:	6922      	ldr	r2, [r4, #16]
 8009088:	3314      	adds	r3, #20
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	189a      	adds	r2, r3, r2
 800908e:	4007      	ands	r7, r0
 8009090:	4206      	tst	r6, r0
 8009092:	d029      	beq.n	80090e8 <__lshift+0xc4>
 8009094:	3001      	adds	r0, #1
 8009096:	1bc0      	subs	r0, r0, r7
 8009098:	9003      	str	r0, [sp, #12]
 800909a:	468c      	mov	ip, r1
 800909c:	2000      	movs	r0, #0
 800909e:	681e      	ldr	r6, [r3, #0]
 80090a0:	40be      	lsls	r6, r7
 80090a2:	4306      	orrs	r6, r0
 80090a4:	4660      	mov	r0, ip
 80090a6:	c040      	stmia	r0!, {r6}
 80090a8:	4684      	mov	ip, r0
 80090aa:	9e03      	ldr	r6, [sp, #12]
 80090ac:	cb01      	ldmia	r3!, {r0}
 80090ae:	40f0      	lsrs	r0, r6
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d8f4      	bhi.n	800909e <__lshift+0x7a>
 80090b4:	0026      	movs	r6, r4
 80090b6:	3615      	adds	r6, #21
 80090b8:	2304      	movs	r3, #4
 80090ba:	42b2      	cmp	r2, r6
 80090bc:	d304      	bcc.n	80090c8 <__lshift+0xa4>
 80090be:	1b13      	subs	r3, r2, r4
 80090c0:	3b15      	subs	r3, #21
 80090c2:	089b      	lsrs	r3, r3, #2
 80090c4:	3301      	adds	r3, #1
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	50c8      	str	r0, [r1, r3]
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d002      	beq.n	80090d4 <__lshift+0xb0>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	3302      	adds	r3, #2
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	9802      	ldr	r0, [sp, #8]
 80090d8:	3b01      	subs	r3, #1
 80090da:	0021      	movs	r1, r4
 80090dc:	612b      	str	r3, [r5, #16]
 80090de:	f7ff fdc3 	bl	8008c68 <_Bfree>
 80090e2:	0028      	movs	r0, r5
 80090e4:	b005      	add	sp, #20
 80090e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e8:	cb01      	ldmia	r3!, {r0}
 80090ea:	c101      	stmia	r1!, {r0}
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d8fb      	bhi.n	80090e8 <__lshift+0xc4>
 80090f0:	e7f0      	b.n	80090d4 <__lshift+0xb0>
 80090f2:	46c0      	nop			@ (mov r8, r8)
 80090f4:	0800adb0 	.word	0x0800adb0
 80090f8:	0800adc1 	.word	0x0800adc1

080090fc <__mcmp>:
 80090fc:	b530      	push	{r4, r5, lr}
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	6904      	ldr	r4, [r0, #16]
 8009102:	0002      	movs	r2, r0
 8009104:	1ae0      	subs	r0, r4, r3
 8009106:	429c      	cmp	r4, r3
 8009108:	d10f      	bne.n	800912a <__mcmp+0x2e>
 800910a:	3214      	adds	r2, #20
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	3114      	adds	r1, #20
 8009110:	0014      	movs	r4, r2
 8009112:	18c9      	adds	r1, r1, r3
 8009114:	18d2      	adds	r2, r2, r3
 8009116:	3a04      	subs	r2, #4
 8009118:	3904      	subs	r1, #4
 800911a:	6815      	ldr	r5, [r2, #0]
 800911c:	680b      	ldr	r3, [r1, #0]
 800911e:	429d      	cmp	r5, r3
 8009120:	d004      	beq.n	800912c <__mcmp+0x30>
 8009122:	2001      	movs	r0, #1
 8009124:	429d      	cmp	r5, r3
 8009126:	d200      	bcs.n	800912a <__mcmp+0x2e>
 8009128:	3802      	subs	r0, #2
 800912a:	bd30      	pop	{r4, r5, pc}
 800912c:	4294      	cmp	r4, r2
 800912e:	d3f2      	bcc.n	8009116 <__mcmp+0x1a>
 8009130:	e7fb      	b.n	800912a <__mcmp+0x2e>
	...

08009134 <__mdiff>:
 8009134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009136:	000c      	movs	r4, r1
 8009138:	b087      	sub	sp, #28
 800913a:	9000      	str	r0, [sp, #0]
 800913c:	0011      	movs	r1, r2
 800913e:	0020      	movs	r0, r4
 8009140:	0017      	movs	r7, r2
 8009142:	f7ff ffdb 	bl	80090fc <__mcmp>
 8009146:	1e05      	subs	r5, r0, #0
 8009148:	d110      	bne.n	800916c <__mdiff+0x38>
 800914a:	0001      	movs	r1, r0
 800914c:	9800      	ldr	r0, [sp, #0]
 800914e:	f7ff fd47 	bl	8008be0 <_Balloc>
 8009152:	1e02      	subs	r2, r0, #0
 8009154:	d104      	bne.n	8009160 <__mdiff+0x2c>
 8009156:	4b40      	ldr	r3, [pc, #256]	@ (8009258 <__mdiff+0x124>)
 8009158:	4840      	ldr	r0, [pc, #256]	@ (800925c <__mdiff+0x128>)
 800915a:	4941      	ldr	r1, [pc, #260]	@ (8009260 <__mdiff+0x12c>)
 800915c:	f000 fcfe 	bl	8009b5c <__assert_func>
 8009160:	2301      	movs	r3, #1
 8009162:	6145      	str	r5, [r0, #20]
 8009164:	6103      	str	r3, [r0, #16]
 8009166:	0010      	movs	r0, r2
 8009168:	b007      	add	sp, #28
 800916a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916c:	2600      	movs	r6, #0
 800916e:	42b0      	cmp	r0, r6
 8009170:	da03      	bge.n	800917a <__mdiff+0x46>
 8009172:	0023      	movs	r3, r4
 8009174:	003c      	movs	r4, r7
 8009176:	001f      	movs	r7, r3
 8009178:	3601      	adds	r6, #1
 800917a:	6861      	ldr	r1, [r4, #4]
 800917c:	9800      	ldr	r0, [sp, #0]
 800917e:	f7ff fd2f 	bl	8008be0 <_Balloc>
 8009182:	1e02      	subs	r2, r0, #0
 8009184:	d103      	bne.n	800918e <__mdiff+0x5a>
 8009186:	4b34      	ldr	r3, [pc, #208]	@ (8009258 <__mdiff+0x124>)
 8009188:	4834      	ldr	r0, [pc, #208]	@ (800925c <__mdiff+0x128>)
 800918a:	4936      	ldr	r1, [pc, #216]	@ (8009264 <__mdiff+0x130>)
 800918c:	e7e6      	b.n	800915c <__mdiff+0x28>
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	3414      	adds	r4, #20
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	18e3      	adds	r3, r4, r3
 8009198:	0021      	movs	r1, r4
 800919a:	9401      	str	r4, [sp, #4]
 800919c:	003c      	movs	r4, r7
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3414      	adds	r4, #20
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	18e3      	adds	r3, r4, r3
 80091a8:	9303      	str	r3, [sp, #12]
 80091aa:	0003      	movs	r3, r0
 80091ac:	60c6      	str	r6, [r0, #12]
 80091ae:	468c      	mov	ip, r1
 80091b0:	2000      	movs	r0, #0
 80091b2:	3314      	adds	r3, #20
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	4663      	mov	r3, ip
 80091ba:	cb20      	ldmia	r3!, {r5}
 80091bc:	b2a9      	uxth	r1, r5
 80091be:	000e      	movs	r6, r1
 80091c0:	469c      	mov	ip, r3
 80091c2:	cc08      	ldmia	r4!, {r3}
 80091c4:	0c2d      	lsrs	r5, r5, #16
 80091c6:	b299      	uxth	r1, r3
 80091c8:	1a71      	subs	r1, r6, r1
 80091ca:	1809      	adds	r1, r1, r0
 80091cc:	0c1b      	lsrs	r3, r3, #16
 80091ce:	1408      	asrs	r0, r1, #16
 80091d0:	1aeb      	subs	r3, r5, r3
 80091d2:	181b      	adds	r3, r3, r0
 80091d4:	1418      	asrs	r0, r3, #16
 80091d6:	b289      	uxth	r1, r1
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	4319      	orrs	r1, r3
 80091dc:	9b05      	ldr	r3, [sp, #20]
 80091de:	c302      	stmia	r3!, {r1}
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d8e7      	bhi.n	80091b8 <__mdiff+0x84>
 80091e8:	0039      	movs	r1, r7
 80091ea:	9c03      	ldr	r4, [sp, #12]
 80091ec:	3115      	adds	r1, #21
 80091ee:	2304      	movs	r3, #4
 80091f0:	428c      	cmp	r4, r1
 80091f2:	d304      	bcc.n	80091fe <__mdiff+0xca>
 80091f4:	1be3      	subs	r3, r4, r7
 80091f6:	3b15      	subs	r3, #21
 80091f8:	089b      	lsrs	r3, r3, #2
 80091fa:	3301      	adds	r3, #1
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	9901      	ldr	r1, [sp, #4]
 8009200:	18cd      	adds	r5, r1, r3
 8009202:	9904      	ldr	r1, [sp, #16]
 8009204:	002e      	movs	r6, r5
 8009206:	18cb      	adds	r3, r1, r3
 8009208:	001f      	movs	r7, r3
 800920a:	9902      	ldr	r1, [sp, #8]
 800920c:	428e      	cmp	r6, r1
 800920e:	d311      	bcc.n	8009234 <__mdiff+0x100>
 8009210:	9c02      	ldr	r4, [sp, #8]
 8009212:	1ee9      	subs	r1, r5, #3
 8009214:	2000      	movs	r0, #0
 8009216:	428c      	cmp	r4, r1
 8009218:	d304      	bcc.n	8009224 <__mdiff+0xf0>
 800921a:	0021      	movs	r1, r4
 800921c:	3103      	adds	r1, #3
 800921e:	1b49      	subs	r1, r1, r5
 8009220:	0889      	lsrs	r1, r1, #2
 8009222:	0088      	lsls	r0, r1, #2
 8009224:	181b      	adds	r3, r3, r0
 8009226:	3b04      	subs	r3, #4
 8009228:	6819      	ldr	r1, [r3, #0]
 800922a:	2900      	cmp	r1, #0
 800922c:	d010      	beq.n	8009250 <__mdiff+0x11c>
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	6113      	str	r3, [r2, #16]
 8009232:	e798      	b.n	8009166 <__mdiff+0x32>
 8009234:	4684      	mov	ip, r0
 8009236:	ce02      	ldmia	r6!, {r1}
 8009238:	b288      	uxth	r0, r1
 800923a:	4460      	add	r0, ip
 800923c:	1400      	asrs	r0, r0, #16
 800923e:	0c0c      	lsrs	r4, r1, #16
 8009240:	1904      	adds	r4, r0, r4
 8009242:	4461      	add	r1, ip
 8009244:	1420      	asrs	r0, r4, #16
 8009246:	b289      	uxth	r1, r1
 8009248:	0424      	lsls	r4, r4, #16
 800924a:	4321      	orrs	r1, r4
 800924c:	c702      	stmia	r7!, {r1}
 800924e:	e7dc      	b.n	800920a <__mdiff+0xd6>
 8009250:	9900      	ldr	r1, [sp, #0]
 8009252:	3901      	subs	r1, #1
 8009254:	9100      	str	r1, [sp, #0]
 8009256:	e7e6      	b.n	8009226 <__mdiff+0xf2>
 8009258:	0800adb0 	.word	0x0800adb0
 800925c:	0800adc1 	.word	0x0800adc1
 8009260:	00000237 	.word	0x00000237
 8009264:	00000245 	.word	0x00000245

08009268 <__d2b>:
 8009268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800926a:	2101      	movs	r1, #1
 800926c:	0016      	movs	r6, r2
 800926e:	001f      	movs	r7, r3
 8009270:	f7ff fcb6 	bl	8008be0 <_Balloc>
 8009274:	1e04      	subs	r4, r0, #0
 8009276:	d105      	bne.n	8009284 <__d2b+0x1c>
 8009278:	0022      	movs	r2, r4
 800927a:	4b25      	ldr	r3, [pc, #148]	@ (8009310 <__d2b+0xa8>)
 800927c:	4825      	ldr	r0, [pc, #148]	@ (8009314 <__d2b+0xac>)
 800927e:	4926      	ldr	r1, [pc, #152]	@ (8009318 <__d2b+0xb0>)
 8009280:	f000 fc6c 	bl	8009b5c <__assert_func>
 8009284:	033b      	lsls	r3, r7, #12
 8009286:	007d      	lsls	r5, r7, #1
 8009288:	0b1b      	lsrs	r3, r3, #12
 800928a:	0d6d      	lsrs	r5, r5, #21
 800928c:	d002      	beq.n	8009294 <__d2b+0x2c>
 800928e:	2280      	movs	r2, #128	@ 0x80
 8009290:	0352      	lsls	r2, r2, #13
 8009292:	4313      	orrs	r3, r2
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	2e00      	cmp	r6, #0
 8009298:	d025      	beq.n	80092e6 <__d2b+0x7e>
 800929a:	4668      	mov	r0, sp
 800929c:	9600      	str	r6, [sp, #0]
 800929e:	f7ff fd6c 	bl	8008d7a <__lo0bits>
 80092a2:	9b01      	ldr	r3, [sp, #4]
 80092a4:	9900      	ldr	r1, [sp, #0]
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d01b      	beq.n	80092e2 <__d2b+0x7a>
 80092aa:	2220      	movs	r2, #32
 80092ac:	001e      	movs	r6, r3
 80092ae:	1a12      	subs	r2, r2, r0
 80092b0:	4096      	lsls	r6, r2
 80092b2:	0032      	movs	r2, r6
 80092b4:	40c3      	lsrs	r3, r0
 80092b6:	430a      	orrs	r2, r1
 80092b8:	6162      	str	r2, [r4, #20]
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	9e01      	ldr	r6, [sp, #4]
 80092be:	61a6      	str	r6, [r4, #24]
 80092c0:	1e73      	subs	r3, r6, #1
 80092c2:	419e      	sbcs	r6, r3
 80092c4:	3601      	adds	r6, #1
 80092c6:	6126      	str	r6, [r4, #16]
 80092c8:	2d00      	cmp	r5, #0
 80092ca:	d014      	beq.n	80092f6 <__d2b+0x8e>
 80092cc:	2635      	movs	r6, #53	@ 0x35
 80092ce:	4b13      	ldr	r3, [pc, #76]	@ (800931c <__d2b+0xb4>)
 80092d0:	18ed      	adds	r5, r5, r3
 80092d2:	9b08      	ldr	r3, [sp, #32]
 80092d4:	182d      	adds	r5, r5, r0
 80092d6:	601d      	str	r5, [r3, #0]
 80092d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092da:	1a36      	subs	r6, r6, r0
 80092dc:	601e      	str	r6, [r3, #0]
 80092de:	0020      	movs	r0, r4
 80092e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092e2:	6161      	str	r1, [r4, #20]
 80092e4:	e7ea      	b.n	80092bc <__d2b+0x54>
 80092e6:	a801      	add	r0, sp, #4
 80092e8:	f7ff fd47 	bl	8008d7a <__lo0bits>
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	2601      	movs	r6, #1
 80092f0:	6163      	str	r3, [r4, #20]
 80092f2:	3020      	adds	r0, #32
 80092f4:	e7e7      	b.n	80092c6 <__d2b+0x5e>
 80092f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009320 <__d2b+0xb8>)
 80092f8:	18c0      	adds	r0, r0, r3
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	6018      	str	r0, [r3, #0]
 80092fe:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <__d2b+0xbc>)
 8009300:	18f3      	adds	r3, r6, r3
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	18e3      	adds	r3, r4, r3
 8009306:	6958      	ldr	r0, [r3, #20]
 8009308:	f7ff fd16 	bl	8008d38 <__hi0bits>
 800930c:	0176      	lsls	r6, r6, #5
 800930e:	e7e3      	b.n	80092d8 <__d2b+0x70>
 8009310:	0800adb0 	.word	0x0800adb0
 8009314:	0800adc1 	.word	0x0800adc1
 8009318:	0000030f 	.word	0x0000030f
 800931c:	fffffbcd 	.word	0xfffffbcd
 8009320:	fffffbce 	.word	0xfffffbce
 8009324:	3fffffff 	.word	0x3fffffff

08009328 <__ssputs_r>:
 8009328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932a:	688e      	ldr	r6, [r1, #8]
 800932c:	b085      	sub	sp, #20
 800932e:	001f      	movs	r7, r3
 8009330:	000c      	movs	r4, r1
 8009332:	680b      	ldr	r3, [r1, #0]
 8009334:	9002      	str	r0, [sp, #8]
 8009336:	9203      	str	r2, [sp, #12]
 8009338:	42be      	cmp	r6, r7
 800933a:	d830      	bhi.n	800939e <__ssputs_r+0x76>
 800933c:	210c      	movs	r1, #12
 800933e:	5e62      	ldrsh	r2, [r4, r1]
 8009340:	2190      	movs	r1, #144	@ 0x90
 8009342:	00c9      	lsls	r1, r1, #3
 8009344:	420a      	tst	r2, r1
 8009346:	d028      	beq.n	800939a <__ssputs_r+0x72>
 8009348:	2003      	movs	r0, #3
 800934a:	6921      	ldr	r1, [r4, #16]
 800934c:	1a5b      	subs	r3, r3, r1
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	6963      	ldr	r3, [r4, #20]
 8009352:	4343      	muls	r3, r0
 8009354:	9801      	ldr	r0, [sp, #4]
 8009356:	0fdd      	lsrs	r5, r3, #31
 8009358:	18ed      	adds	r5, r5, r3
 800935a:	1c7b      	adds	r3, r7, #1
 800935c:	181b      	adds	r3, r3, r0
 800935e:	106d      	asrs	r5, r5, #1
 8009360:	42ab      	cmp	r3, r5
 8009362:	d900      	bls.n	8009366 <__ssputs_r+0x3e>
 8009364:	001d      	movs	r5, r3
 8009366:	0552      	lsls	r2, r2, #21
 8009368:	d528      	bpl.n	80093bc <__ssputs_r+0x94>
 800936a:	0029      	movs	r1, r5
 800936c:	9802      	ldr	r0, [sp, #8]
 800936e:	f7ff fba7 	bl	8008ac0 <_malloc_r>
 8009372:	1e06      	subs	r6, r0, #0
 8009374:	d02c      	beq.n	80093d0 <__ssputs_r+0xa8>
 8009376:	9a01      	ldr	r2, [sp, #4]
 8009378:	6921      	ldr	r1, [r4, #16]
 800937a:	f7fe fc9f 	bl	8007cbc <memcpy>
 800937e:	89a2      	ldrh	r2, [r4, #12]
 8009380:	4b18      	ldr	r3, [pc, #96]	@ (80093e4 <__ssputs_r+0xbc>)
 8009382:	401a      	ands	r2, r3
 8009384:	2380      	movs	r3, #128	@ 0x80
 8009386:	4313      	orrs	r3, r2
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	6126      	str	r6, [r4, #16]
 800938e:	18f6      	adds	r6, r6, r3
 8009390:	6026      	str	r6, [r4, #0]
 8009392:	003e      	movs	r6, r7
 8009394:	6165      	str	r5, [r4, #20]
 8009396:	1aed      	subs	r5, r5, r3
 8009398:	60a5      	str	r5, [r4, #8]
 800939a:	42be      	cmp	r6, r7
 800939c:	d900      	bls.n	80093a0 <__ssputs_r+0x78>
 800939e:	003e      	movs	r6, r7
 80093a0:	0032      	movs	r2, r6
 80093a2:	9903      	ldr	r1, [sp, #12]
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	f000 fbb3 	bl	8009b10 <memmove>
 80093aa:	2000      	movs	r0, #0
 80093ac:	68a3      	ldr	r3, [r4, #8]
 80093ae:	1b9b      	subs	r3, r3, r6
 80093b0:	60a3      	str	r3, [r4, #8]
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	199b      	adds	r3, r3, r6
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	b005      	add	sp, #20
 80093ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093bc:	002a      	movs	r2, r5
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	f000 fc29 	bl	8009c16 <_realloc_r>
 80093c4:	1e06      	subs	r6, r0, #0
 80093c6:	d1e0      	bne.n	800938a <__ssputs_r+0x62>
 80093c8:	6921      	ldr	r1, [r4, #16]
 80093ca:	9802      	ldr	r0, [sp, #8]
 80093cc:	f7ff fb02 	bl	80089d4 <_free_r>
 80093d0:	230c      	movs	r3, #12
 80093d2:	2001      	movs	r0, #1
 80093d4:	9a02      	ldr	r2, [sp, #8]
 80093d6:	4240      	negs	r0, r0
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	89a2      	ldrh	r2, [r4, #12]
 80093dc:	3334      	adds	r3, #52	@ 0x34
 80093de:	4313      	orrs	r3, r2
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7e9      	b.n	80093b8 <__ssputs_r+0x90>
 80093e4:	fffffb7f 	.word	0xfffffb7f

080093e8 <_svfiprintf_r>:
 80093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ea:	b0a1      	sub	sp, #132	@ 0x84
 80093ec:	9003      	str	r0, [sp, #12]
 80093ee:	001d      	movs	r5, r3
 80093f0:	898b      	ldrh	r3, [r1, #12]
 80093f2:	000f      	movs	r7, r1
 80093f4:	0016      	movs	r6, r2
 80093f6:	061b      	lsls	r3, r3, #24
 80093f8:	d511      	bpl.n	800941e <_svfiprintf_r+0x36>
 80093fa:	690b      	ldr	r3, [r1, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10e      	bne.n	800941e <_svfiprintf_r+0x36>
 8009400:	2140      	movs	r1, #64	@ 0x40
 8009402:	f7ff fb5d 	bl	8008ac0 <_malloc_r>
 8009406:	6038      	str	r0, [r7, #0]
 8009408:	6138      	str	r0, [r7, #16]
 800940a:	2800      	cmp	r0, #0
 800940c:	d105      	bne.n	800941a <_svfiprintf_r+0x32>
 800940e:	230c      	movs	r3, #12
 8009410:	9a03      	ldr	r2, [sp, #12]
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	2001      	movs	r0, #1
 8009416:	4240      	negs	r0, r0
 8009418:	e0cf      	b.n	80095ba <_svfiprintf_r+0x1d2>
 800941a:	2340      	movs	r3, #64	@ 0x40
 800941c:	617b      	str	r3, [r7, #20]
 800941e:	2300      	movs	r3, #0
 8009420:	ac08      	add	r4, sp, #32
 8009422:	6163      	str	r3, [r4, #20]
 8009424:	3320      	adds	r3, #32
 8009426:	7663      	strb	r3, [r4, #25]
 8009428:	3310      	adds	r3, #16
 800942a:	76a3      	strb	r3, [r4, #26]
 800942c:	9507      	str	r5, [sp, #28]
 800942e:	0035      	movs	r5, r6
 8009430:	782b      	ldrb	r3, [r5, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <_svfiprintf_r+0x52>
 8009436:	2b25      	cmp	r3, #37	@ 0x25
 8009438:	d148      	bne.n	80094cc <_svfiprintf_r+0xe4>
 800943a:	1bab      	subs	r3, r5, r6
 800943c:	9305      	str	r3, [sp, #20]
 800943e:	42b5      	cmp	r5, r6
 8009440:	d00b      	beq.n	800945a <_svfiprintf_r+0x72>
 8009442:	0032      	movs	r2, r6
 8009444:	0039      	movs	r1, r7
 8009446:	9803      	ldr	r0, [sp, #12]
 8009448:	f7ff ff6e 	bl	8009328 <__ssputs_r>
 800944c:	3001      	adds	r0, #1
 800944e:	d100      	bne.n	8009452 <_svfiprintf_r+0x6a>
 8009450:	e0ae      	b.n	80095b0 <_svfiprintf_r+0x1c8>
 8009452:	6963      	ldr	r3, [r4, #20]
 8009454:	9a05      	ldr	r2, [sp, #20]
 8009456:	189b      	adds	r3, r3, r2
 8009458:	6163      	str	r3, [r4, #20]
 800945a:	782b      	ldrb	r3, [r5, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d100      	bne.n	8009462 <_svfiprintf_r+0x7a>
 8009460:	e0a6      	b.n	80095b0 <_svfiprintf_r+0x1c8>
 8009462:	2201      	movs	r2, #1
 8009464:	2300      	movs	r3, #0
 8009466:	4252      	negs	r2, r2
 8009468:	6062      	str	r2, [r4, #4]
 800946a:	a904      	add	r1, sp, #16
 800946c:	3254      	adds	r2, #84	@ 0x54
 800946e:	1852      	adds	r2, r2, r1
 8009470:	1c6e      	adds	r6, r5, #1
 8009472:	6023      	str	r3, [r4, #0]
 8009474:	60e3      	str	r3, [r4, #12]
 8009476:	60a3      	str	r3, [r4, #8]
 8009478:	7013      	strb	r3, [r2, #0]
 800947a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800947c:	4b54      	ldr	r3, [pc, #336]	@ (80095d0 <_svfiprintf_r+0x1e8>)
 800947e:	2205      	movs	r2, #5
 8009480:	0018      	movs	r0, r3
 8009482:	7831      	ldrb	r1, [r6, #0]
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	f7fe fc0e 	bl	8007ca6 <memchr>
 800948a:	1c75      	adds	r5, r6, #1
 800948c:	2800      	cmp	r0, #0
 800948e:	d11f      	bne.n	80094d0 <_svfiprintf_r+0xe8>
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	06d3      	lsls	r3, r2, #27
 8009494:	d504      	bpl.n	80094a0 <_svfiprintf_r+0xb8>
 8009496:	2353      	movs	r3, #83	@ 0x53
 8009498:	a904      	add	r1, sp, #16
 800949a:	185b      	adds	r3, r3, r1
 800949c:	2120      	movs	r1, #32
 800949e:	7019      	strb	r1, [r3, #0]
 80094a0:	0713      	lsls	r3, r2, #28
 80094a2:	d504      	bpl.n	80094ae <_svfiprintf_r+0xc6>
 80094a4:	2353      	movs	r3, #83	@ 0x53
 80094a6:	a904      	add	r1, sp, #16
 80094a8:	185b      	adds	r3, r3, r1
 80094aa:	212b      	movs	r1, #43	@ 0x2b
 80094ac:	7019      	strb	r1, [r3, #0]
 80094ae:	7833      	ldrb	r3, [r6, #0]
 80094b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b2:	d016      	beq.n	80094e2 <_svfiprintf_r+0xfa>
 80094b4:	0035      	movs	r5, r6
 80094b6:	2100      	movs	r1, #0
 80094b8:	200a      	movs	r0, #10
 80094ba:	68e3      	ldr	r3, [r4, #12]
 80094bc:	782a      	ldrb	r2, [r5, #0]
 80094be:	1c6e      	adds	r6, r5, #1
 80094c0:	3a30      	subs	r2, #48	@ 0x30
 80094c2:	2a09      	cmp	r2, #9
 80094c4:	d950      	bls.n	8009568 <_svfiprintf_r+0x180>
 80094c6:	2900      	cmp	r1, #0
 80094c8:	d111      	bne.n	80094ee <_svfiprintf_r+0x106>
 80094ca:	e017      	b.n	80094fc <_svfiprintf_r+0x114>
 80094cc:	3501      	adds	r5, #1
 80094ce:	e7af      	b.n	8009430 <_svfiprintf_r+0x48>
 80094d0:	9b05      	ldr	r3, [sp, #20]
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	1ac0      	subs	r0, r0, r3
 80094d6:	2301      	movs	r3, #1
 80094d8:	4083      	lsls	r3, r0
 80094da:	4313      	orrs	r3, r2
 80094dc:	002e      	movs	r6, r5
 80094de:	6023      	str	r3, [r4, #0]
 80094e0:	e7cc      	b.n	800947c <_svfiprintf_r+0x94>
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	1d19      	adds	r1, r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	9107      	str	r1, [sp, #28]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db01      	blt.n	80094f2 <_svfiprintf_r+0x10a>
 80094ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094f0:	e004      	b.n	80094fc <_svfiprintf_r+0x114>
 80094f2:	425b      	negs	r3, r3
 80094f4:	60e3      	str	r3, [r4, #12]
 80094f6:	2302      	movs	r3, #2
 80094f8:	4313      	orrs	r3, r2
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	782b      	ldrb	r3, [r5, #0]
 80094fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009500:	d10c      	bne.n	800951c <_svfiprintf_r+0x134>
 8009502:	786b      	ldrb	r3, [r5, #1]
 8009504:	2b2a      	cmp	r3, #42	@ 0x2a
 8009506:	d134      	bne.n	8009572 <_svfiprintf_r+0x18a>
 8009508:	9b07      	ldr	r3, [sp, #28]
 800950a:	3502      	adds	r5, #2
 800950c:	1d1a      	adds	r2, r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	9207      	str	r2, [sp, #28]
 8009512:	2b00      	cmp	r3, #0
 8009514:	da01      	bge.n	800951a <_svfiprintf_r+0x132>
 8009516:	2301      	movs	r3, #1
 8009518:	425b      	negs	r3, r3
 800951a:	9309      	str	r3, [sp, #36]	@ 0x24
 800951c:	4e2d      	ldr	r6, [pc, #180]	@ (80095d4 <_svfiprintf_r+0x1ec>)
 800951e:	2203      	movs	r2, #3
 8009520:	0030      	movs	r0, r6
 8009522:	7829      	ldrb	r1, [r5, #0]
 8009524:	f7fe fbbf 	bl	8007ca6 <memchr>
 8009528:	2800      	cmp	r0, #0
 800952a:	d006      	beq.n	800953a <_svfiprintf_r+0x152>
 800952c:	2340      	movs	r3, #64	@ 0x40
 800952e:	1b80      	subs	r0, r0, r6
 8009530:	4083      	lsls	r3, r0
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	3501      	adds	r5, #1
 8009536:	4313      	orrs	r3, r2
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	7829      	ldrb	r1, [r5, #0]
 800953c:	2206      	movs	r2, #6
 800953e:	4826      	ldr	r0, [pc, #152]	@ (80095d8 <_svfiprintf_r+0x1f0>)
 8009540:	1c6e      	adds	r6, r5, #1
 8009542:	7621      	strb	r1, [r4, #24]
 8009544:	f7fe fbaf 	bl	8007ca6 <memchr>
 8009548:	2800      	cmp	r0, #0
 800954a:	d038      	beq.n	80095be <_svfiprintf_r+0x1d6>
 800954c:	4b23      	ldr	r3, [pc, #140]	@ (80095dc <_svfiprintf_r+0x1f4>)
 800954e:	2b00      	cmp	r3, #0
 8009550:	d122      	bne.n	8009598 <_svfiprintf_r+0x1b0>
 8009552:	2207      	movs	r2, #7
 8009554:	9b07      	ldr	r3, [sp, #28]
 8009556:	3307      	adds	r3, #7
 8009558:	4393      	bics	r3, r2
 800955a:	3308      	adds	r3, #8
 800955c:	9307      	str	r3, [sp, #28]
 800955e:	6963      	ldr	r3, [r4, #20]
 8009560:	9a04      	ldr	r2, [sp, #16]
 8009562:	189b      	adds	r3, r3, r2
 8009564:	6163      	str	r3, [r4, #20]
 8009566:	e762      	b.n	800942e <_svfiprintf_r+0x46>
 8009568:	4343      	muls	r3, r0
 800956a:	0035      	movs	r5, r6
 800956c:	2101      	movs	r1, #1
 800956e:	189b      	adds	r3, r3, r2
 8009570:	e7a4      	b.n	80094bc <_svfiprintf_r+0xd4>
 8009572:	2300      	movs	r3, #0
 8009574:	200a      	movs	r0, #10
 8009576:	0019      	movs	r1, r3
 8009578:	3501      	adds	r5, #1
 800957a:	6063      	str	r3, [r4, #4]
 800957c:	782a      	ldrb	r2, [r5, #0]
 800957e:	1c6e      	adds	r6, r5, #1
 8009580:	3a30      	subs	r2, #48	@ 0x30
 8009582:	2a09      	cmp	r2, #9
 8009584:	d903      	bls.n	800958e <_svfiprintf_r+0x1a6>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d0c8      	beq.n	800951c <_svfiprintf_r+0x134>
 800958a:	9109      	str	r1, [sp, #36]	@ 0x24
 800958c:	e7c6      	b.n	800951c <_svfiprintf_r+0x134>
 800958e:	4341      	muls	r1, r0
 8009590:	0035      	movs	r5, r6
 8009592:	2301      	movs	r3, #1
 8009594:	1889      	adds	r1, r1, r2
 8009596:	e7f1      	b.n	800957c <_svfiprintf_r+0x194>
 8009598:	aa07      	add	r2, sp, #28
 800959a:	9200      	str	r2, [sp, #0]
 800959c:	0021      	movs	r1, r4
 800959e:	003a      	movs	r2, r7
 80095a0:	4b0f      	ldr	r3, [pc, #60]	@ (80095e0 <_svfiprintf_r+0x1f8>)
 80095a2:	9803      	ldr	r0, [sp, #12]
 80095a4:	f7fd fdfc 	bl	80071a0 <_printf_float>
 80095a8:	9004      	str	r0, [sp, #16]
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	d1d6      	bne.n	800955e <_svfiprintf_r+0x176>
 80095b0:	89bb      	ldrh	r3, [r7, #12]
 80095b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80095b4:	065b      	lsls	r3, r3, #25
 80095b6:	d500      	bpl.n	80095ba <_svfiprintf_r+0x1d2>
 80095b8:	e72c      	b.n	8009414 <_svfiprintf_r+0x2c>
 80095ba:	b021      	add	sp, #132	@ 0x84
 80095bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095be:	aa07      	add	r2, sp, #28
 80095c0:	9200      	str	r2, [sp, #0]
 80095c2:	0021      	movs	r1, r4
 80095c4:	003a      	movs	r2, r7
 80095c6:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <_svfiprintf_r+0x1f8>)
 80095c8:	9803      	ldr	r0, [sp, #12]
 80095ca:	f7fe f897 	bl	80076fc <_printf_i>
 80095ce:	e7eb      	b.n	80095a8 <_svfiprintf_r+0x1c0>
 80095d0:	0800af18 	.word	0x0800af18
 80095d4:	0800af1e 	.word	0x0800af1e
 80095d8:	0800af22 	.word	0x0800af22
 80095dc:	080071a1 	.word	0x080071a1
 80095e0:	08009329 	.word	0x08009329

080095e4 <__sfputc_r>:
 80095e4:	6893      	ldr	r3, [r2, #8]
 80095e6:	b510      	push	{r4, lr}
 80095e8:	3b01      	subs	r3, #1
 80095ea:	6093      	str	r3, [r2, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	da04      	bge.n	80095fa <__sfputc_r+0x16>
 80095f0:	6994      	ldr	r4, [r2, #24]
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	db07      	blt.n	8009606 <__sfputc_r+0x22>
 80095f6:	290a      	cmp	r1, #10
 80095f8:	d005      	beq.n	8009606 <__sfputc_r+0x22>
 80095fa:	6813      	ldr	r3, [r2, #0]
 80095fc:	1c58      	adds	r0, r3, #1
 80095fe:	6010      	str	r0, [r2, #0]
 8009600:	7019      	strb	r1, [r3, #0]
 8009602:	0008      	movs	r0, r1
 8009604:	bd10      	pop	{r4, pc}
 8009606:	f000 f9e2 	bl	80099ce <__swbuf_r>
 800960a:	0001      	movs	r1, r0
 800960c:	e7f9      	b.n	8009602 <__sfputc_r+0x1e>

0800960e <__sfputs_r>:
 800960e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009610:	0006      	movs	r6, r0
 8009612:	000f      	movs	r7, r1
 8009614:	0014      	movs	r4, r2
 8009616:	18d5      	adds	r5, r2, r3
 8009618:	42ac      	cmp	r4, r5
 800961a:	d101      	bne.n	8009620 <__sfputs_r+0x12>
 800961c:	2000      	movs	r0, #0
 800961e:	e007      	b.n	8009630 <__sfputs_r+0x22>
 8009620:	7821      	ldrb	r1, [r4, #0]
 8009622:	003a      	movs	r2, r7
 8009624:	0030      	movs	r0, r6
 8009626:	f7ff ffdd 	bl	80095e4 <__sfputc_r>
 800962a:	3401      	adds	r4, #1
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d1f3      	bne.n	8009618 <__sfputs_r+0xa>
 8009630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009634 <_vfiprintf_r>:
 8009634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009636:	b0a1      	sub	sp, #132	@ 0x84
 8009638:	000f      	movs	r7, r1
 800963a:	0015      	movs	r5, r2
 800963c:	001e      	movs	r6, r3
 800963e:	9003      	str	r0, [sp, #12]
 8009640:	2800      	cmp	r0, #0
 8009642:	d004      	beq.n	800964e <_vfiprintf_r+0x1a>
 8009644:	6a03      	ldr	r3, [r0, #32]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <_vfiprintf_r+0x1a>
 800964a:	f7fe f9f5 	bl	8007a38 <__sinit>
 800964e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009650:	07db      	lsls	r3, r3, #31
 8009652:	d405      	bmi.n	8009660 <_vfiprintf_r+0x2c>
 8009654:	89bb      	ldrh	r3, [r7, #12]
 8009656:	059b      	lsls	r3, r3, #22
 8009658:	d402      	bmi.n	8009660 <_vfiprintf_r+0x2c>
 800965a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800965c:	f7fe fb21 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 8009660:	89bb      	ldrh	r3, [r7, #12]
 8009662:	071b      	lsls	r3, r3, #28
 8009664:	d502      	bpl.n	800966c <_vfiprintf_r+0x38>
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d113      	bne.n	8009694 <_vfiprintf_r+0x60>
 800966c:	0039      	movs	r1, r7
 800966e:	9803      	ldr	r0, [sp, #12]
 8009670:	f000 f9f0 	bl	8009a54 <__swsetup_r>
 8009674:	2800      	cmp	r0, #0
 8009676:	d00d      	beq.n	8009694 <_vfiprintf_r+0x60>
 8009678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800967a:	07db      	lsls	r3, r3, #31
 800967c:	d503      	bpl.n	8009686 <_vfiprintf_r+0x52>
 800967e:	2001      	movs	r0, #1
 8009680:	4240      	negs	r0, r0
 8009682:	b021      	add	sp, #132	@ 0x84
 8009684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009686:	89bb      	ldrh	r3, [r7, #12]
 8009688:	059b      	lsls	r3, r3, #22
 800968a:	d4f8      	bmi.n	800967e <_vfiprintf_r+0x4a>
 800968c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800968e:	f7fe fb09 	bl	8007ca4 <__retarget_lock_release_recursive>
 8009692:	e7f4      	b.n	800967e <_vfiprintf_r+0x4a>
 8009694:	2300      	movs	r3, #0
 8009696:	ac08      	add	r4, sp, #32
 8009698:	6163      	str	r3, [r4, #20]
 800969a:	3320      	adds	r3, #32
 800969c:	7663      	strb	r3, [r4, #25]
 800969e:	3310      	adds	r3, #16
 80096a0:	76a3      	strb	r3, [r4, #26]
 80096a2:	9607      	str	r6, [sp, #28]
 80096a4:	002e      	movs	r6, r5
 80096a6:	7833      	ldrb	r3, [r6, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <_vfiprintf_r+0x7c>
 80096ac:	2b25      	cmp	r3, #37	@ 0x25
 80096ae:	d148      	bne.n	8009742 <_vfiprintf_r+0x10e>
 80096b0:	1b73      	subs	r3, r6, r5
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	42ae      	cmp	r6, r5
 80096b6:	d00b      	beq.n	80096d0 <_vfiprintf_r+0x9c>
 80096b8:	002a      	movs	r2, r5
 80096ba:	0039      	movs	r1, r7
 80096bc:	9803      	ldr	r0, [sp, #12]
 80096be:	f7ff ffa6 	bl	800960e <__sfputs_r>
 80096c2:	3001      	adds	r0, #1
 80096c4:	d100      	bne.n	80096c8 <_vfiprintf_r+0x94>
 80096c6:	e0ae      	b.n	8009826 <_vfiprintf_r+0x1f2>
 80096c8:	6963      	ldr	r3, [r4, #20]
 80096ca:	9a05      	ldr	r2, [sp, #20]
 80096cc:	189b      	adds	r3, r3, r2
 80096ce:	6163      	str	r3, [r4, #20]
 80096d0:	7833      	ldrb	r3, [r6, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d100      	bne.n	80096d8 <_vfiprintf_r+0xa4>
 80096d6:	e0a6      	b.n	8009826 <_vfiprintf_r+0x1f2>
 80096d8:	2201      	movs	r2, #1
 80096da:	2300      	movs	r3, #0
 80096dc:	4252      	negs	r2, r2
 80096de:	6062      	str	r2, [r4, #4]
 80096e0:	a904      	add	r1, sp, #16
 80096e2:	3254      	adds	r2, #84	@ 0x54
 80096e4:	1852      	adds	r2, r2, r1
 80096e6:	1c75      	adds	r5, r6, #1
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	60e3      	str	r3, [r4, #12]
 80096ec:	60a3      	str	r3, [r4, #8]
 80096ee:	7013      	strb	r3, [r2, #0]
 80096f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80096f2:	4b59      	ldr	r3, [pc, #356]	@ (8009858 <_vfiprintf_r+0x224>)
 80096f4:	2205      	movs	r2, #5
 80096f6:	0018      	movs	r0, r3
 80096f8:	7829      	ldrb	r1, [r5, #0]
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	f7fe fad3 	bl	8007ca6 <memchr>
 8009700:	1c6e      	adds	r6, r5, #1
 8009702:	2800      	cmp	r0, #0
 8009704:	d11f      	bne.n	8009746 <_vfiprintf_r+0x112>
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	06d3      	lsls	r3, r2, #27
 800970a:	d504      	bpl.n	8009716 <_vfiprintf_r+0xe2>
 800970c:	2353      	movs	r3, #83	@ 0x53
 800970e:	a904      	add	r1, sp, #16
 8009710:	185b      	adds	r3, r3, r1
 8009712:	2120      	movs	r1, #32
 8009714:	7019      	strb	r1, [r3, #0]
 8009716:	0713      	lsls	r3, r2, #28
 8009718:	d504      	bpl.n	8009724 <_vfiprintf_r+0xf0>
 800971a:	2353      	movs	r3, #83	@ 0x53
 800971c:	a904      	add	r1, sp, #16
 800971e:	185b      	adds	r3, r3, r1
 8009720:	212b      	movs	r1, #43	@ 0x2b
 8009722:	7019      	strb	r1, [r3, #0]
 8009724:	782b      	ldrb	r3, [r5, #0]
 8009726:	2b2a      	cmp	r3, #42	@ 0x2a
 8009728:	d016      	beq.n	8009758 <_vfiprintf_r+0x124>
 800972a:	002e      	movs	r6, r5
 800972c:	2100      	movs	r1, #0
 800972e:	200a      	movs	r0, #10
 8009730:	68e3      	ldr	r3, [r4, #12]
 8009732:	7832      	ldrb	r2, [r6, #0]
 8009734:	1c75      	adds	r5, r6, #1
 8009736:	3a30      	subs	r2, #48	@ 0x30
 8009738:	2a09      	cmp	r2, #9
 800973a:	d950      	bls.n	80097de <_vfiprintf_r+0x1aa>
 800973c:	2900      	cmp	r1, #0
 800973e:	d111      	bne.n	8009764 <_vfiprintf_r+0x130>
 8009740:	e017      	b.n	8009772 <_vfiprintf_r+0x13e>
 8009742:	3601      	adds	r6, #1
 8009744:	e7af      	b.n	80096a6 <_vfiprintf_r+0x72>
 8009746:	9b05      	ldr	r3, [sp, #20]
 8009748:	6822      	ldr	r2, [r4, #0]
 800974a:	1ac0      	subs	r0, r0, r3
 800974c:	2301      	movs	r3, #1
 800974e:	4083      	lsls	r3, r0
 8009750:	4313      	orrs	r3, r2
 8009752:	0035      	movs	r5, r6
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	e7cc      	b.n	80096f2 <_vfiprintf_r+0xbe>
 8009758:	9b07      	ldr	r3, [sp, #28]
 800975a:	1d19      	adds	r1, r3, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	9107      	str	r1, [sp, #28]
 8009760:	2b00      	cmp	r3, #0
 8009762:	db01      	blt.n	8009768 <_vfiprintf_r+0x134>
 8009764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009766:	e004      	b.n	8009772 <_vfiprintf_r+0x13e>
 8009768:	425b      	negs	r3, r3
 800976a:	60e3      	str	r3, [r4, #12]
 800976c:	2302      	movs	r3, #2
 800976e:	4313      	orrs	r3, r2
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	7833      	ldrb	r3, [r6, #0]
 8009774:	2b2e      	cmp	r3, #46	@ 0x2e
 8009776:	d10c      	bne.n	8009792 <_vfiprintf_r+0x15e>
 8009778:	7873      	ldrb	r3, [r6, #1]
 800977a:	2b2a      	cmp	r3, #42	@ 0x2a
 800977c:	d134      	bne.n	80097e8 <_vfiprintf_r+0x1b4>
 800977e:	9b07      	ldr	r3, [sp, #28]
 8009780:	3602      	adds	r6, #2
 8009782:	1d1a      	adds	r2, r3, #4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	9207      	str	r2, [sp, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da01      	bge.n	8009790 <_vfiprintf_r+0x15c>
 800978c:	2301      	movs	r3, #1
 800978e:	425b      	negs	r3, r3
 8009790:	9309      	str	r3, [sp, #36]	@ 0x24
 8009792:	4d32      	ldr	r5, [pc, #200]	@ (800985c <_vfiprintf_r+0x228>)
 8009794:	2203      	movs	r2, #3
 8009796:	0028      	movs	r0, r5
 8009798:	7831      	ldrb	r1, [r6, #0]
 800979a:	f7fe fa84 	bl	8007ca6 <memchr>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d006      	beq.n	80097b0 <_vfiprintf_r+0x17c>
 80097a2:	2340      	movs	r3, #64	@ 0x40
 80097a4:	1b40      	subs	r0, r0, r5
 80097a6:	4083      	lsls	r3, r0
 80097a8:	6822      	ldr	r2, [r4, #0]
 80097aa:	3601      	adds	r6, #1
 80097ac:	4313      	orrs	r3, r2
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	7831      	ldrb	r1, [r6, #0]
 80097b2:	2206      	movs	r2, #6
 80097b4:	482a      	ldr	r0, [pc, #168]	@ (8009860 <_vfiprintf_r+0x22c>)
 80097b6:	1c75      	adds	r5, r6, #1
 80097b8:	7621      	strb	r1, [r4, #24]
 80097ba:	f7fe fa74 	bl	8007ca6 <memchr>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d040      	beq.n	8009844 <_vfiprintf_r+0x210>
 80097c2:	4b28      	ldr	r3, [pc, #160]	@ (8009864 <_vfiprintf_r+0x230>)
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d122      	bne.n	800980e <_vfiprintf_r+0x1da>
 80097c8:	2207      	movs	r2, #7
 80097ca:	9b07      	ldr	r3, [sp, #28]
 80097cc:	3307      	adds	r3, #7
 80097ce:	4393      	bics	r3, r2
 80097d0:	3308      	adds	r3, #8
 80097d2:	9307      	str	r3, [sp, #28]
 80097d4:	6963      	ldr	r3, [r4, #20]
 80097d6:	9a04      	ldr	r2, [sp, #16]
 80097d8:	189b      	adds	r3, r3, r2
 80097da:	6163      	str	r3, [r4, #20]
 80097dc:	e762      	b.n	80096a4 <_vfiprintf_r+0x70>
 80097de:	4343      	muls	r3, r0
 80097e0:	002e      	movs	r6, r5
 80097e2:	2101      	movs	r1, #1
 80097e4:	189b      	adds	r3, r3, r2
 80097e6:	e7a4      	b.n	8009732 <_vfiprintf_r+0xfe>
 80097e8:	2300      	movs	r3, #0
 80097ea:	200a      	movs	r0, #10
 80097ec:	0019      	movs	r1, r3
 80097ee:	3601      	adds	r6, #1
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	7832      	ldrb	r2, [r6, #0]
 80097f4:	1c75      	adds	r5, r6, #1
 80097f6:	3a30      	subs	r2, #48	@ 0x30
 80097f8:	2a09      	cmp	r2, #9
 80097fa:	d903      	bls.n	8009804 <_vfiprintf_r+0x1d0>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0c8      	beq.n	8009792 <_vfiprintf_r+0x15e>
 8009800:	9109      	str	r1, [sp, #36]	@ 0x24
 8009802:	e7c6      	b.n	8009792 <_vfiprintf_r+0x15e>
 8009804:	4341      	muls	r1, r0
 8009806:	002e      	movs	r6, r5
 8009808:	2301      	movs	r3, #1
 800980a:	1889      	adds	r1, r1, r2
 800980c:	e7f1      	b.n	80097f2 <_vfiprintf_r+0x1be>
 800980e:	aa07      	add	r2, sp, #28
 8009810:	9200      	str	r2, [sp, #0]
 8009812:	0021      	movs	r1, r4
 8009814:	003a      	movs	r2, r7
 8009816:	4b14      	ldr	r3, [pc, #80]	@ (8009868 <_vfiprintf_r+0x234>)
 8009818:	9803      	ldr	r0, [sp, #12]
 800981a:	f7fd fcc1 	bl	80071a0 <_printf_float>
 800981e:	9004      	str	r0, [sp, #16]
 8009820:	9b04      	ldr	r3, [sp, #16]
 8009822:	3301      	adds	r3, #1
 8009824:	d1d6      	bne.n	80097d4 <_vfiprintf_r+0x1a0>
 8009826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d405      	bmi.n	8009838 <_vfiprintf_r+0x204>
 800982c:	89bb      	ldrh	r3, [r7, #12]
 800982e:	059b      	lsls	r3, r3, #22
 8009830:	d402      	bmi.n	8009838 <_vfiprintf_r+0x204>
 8009832:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009834:	f7fe fa36 	bl	8007ca4 <__retarget_lock_release_recursive>
 8009838:	89bb      	ldrh	r3, [r7, #12]
 800983a:	065b      	lsls	r3, r3, #25
 800983c:	d500      	bpl.n	8009840 <_vfiprintf_r+0x20c>
 800983e:	e71e      	b.n	800967e <_vfiprintf_r+0x4a>
 8009840:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009842:	e71e      	b.n	8009682 <_vfiprintf_r+0x4e>
 8009844:	aa07      	add	r2, sp, #28
 8009846:	9200      	str	r2, [sp, #0]
 8009848:	0021      	movs	r1, r4
 800984a:	003a      	movs	r2, r7
 800984c:	4b06      	ldr	r3, [pc, #24]	@ (8009868 <_vfiprintf_r+0x234>)
 800984e:	9803      	ldr	r0, [sp, #12]
 8009850:	f7fd ff54 	bl	80076fc <_printf_i>
 8009854:	e7e3      	b.n	800981e <_vfiprintf_r+0x1ea>
 8009856:	46c0      	nop			@ (mov r8, r8)
 8009858:	0800af18 	.word	0x0800af18
 800985c:	0800af1e 	.word	0x0800af1e
 8009860:	0800af22 	.word	0x0800af22
 8009864:	080071a1 	.word	0x080071a1
 8009868:	0800960f 	.word	0x0800960f

0800986c <__sflush_r>:
 800986c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800986e:	220c      	movs	r2, #12
 8009870:	5e8b      	ldrsh	r3, [r1, r2]
 8009872:	0005      	movs	r5, r0
 8009874:	000c      	movs	r4, r1
 8009876:	071a      	lsls	r2, r3, #28
 8009878:	d456      	bmi.n	8009928 <__sflush_r+0xbc>
 800987a:	684a      	ldr	r2, [r1, #4]
 800987c:	2a00      	cmp	r2, #0
 800987e:	dc02      	bgt.n	8009886 <__sflush_r+0x1a>
 8009880:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009882:	2a00      	cmp	r2, #0
 8009884:	dd4e      	ble.n	8009924 <__sflush_r+0xb8>
 8009886:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009888:	2f00      	cmp	r7, #0
 800988a:	d04b      	beq.n	8009924 <__sflush_r+0xb8>
 800988c:	2200      	movs	r2, #0
 800988e:	2080      	movs	r0, #128	@ 0x80
 8009890:	682e      	ldr	r6, [r5, #0]
 8009892:	602a      	str	r2, [r5, #0]
 8009894:	001a      	movs	r2, r3
 8009896:	0140      	lsls	r0, r0, #5
 8009898:	6a21      	ldr	r1, [r4, #32]
 800989a:	4002      	ands	r2, r0
 800989c:	4203      	tst	r3, r0
 800989e:	d033      	beq.n	8009908 <__sflush_r+0x9c>
 80098a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	075b      	lsls	r3, r3, #29
 80098a6:	d506      	bpl.n	80098b6 <__sflush_r+0x4a>
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	1ad2      	subs	r2, r2, r3
 80098ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <__sflush_r+0x4a>
 80098b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098b4:	1ad2      	subs	r2, r2, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	0028      	movs	r0, r5
 80098ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	47b8      	blx	r7
 80098c0:	89a2      	ldrh	r2, [r4, #12]
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	d106      	bne.n	80098d4 <__sflush_r+0x68>
 80098c6:	6829      	ldr	r1, [r5, #0]
 80098c8:	291d      	cmp	r1, #29
 80098ca:	d846      	bhi.n	800995a <__sflush_r+0xee>
 80098cc:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <__sflush_r+0x108>)
 80098ce:	410b      	asrs	r3, r1
 80098d0:	07db      	lsls	r3, r3, #31
 80098d2:	d442      	bmi.n	800995a <__sflush_r+0xee>
 80098d4:	2300      	movs	r3, #0
 80098d6:	6063      	str	r3, [r4, #4]
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	6023      	str	r3, [r4, #0]
 80098dc:	04d2      	lsls	r2, r2, #19
 80098de:	d505      	bpl.n	80098ec <__sflush_r+0x80>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <__sflush_r+0x7e>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d100      	bne.n	80098ec <__sflush_r+0x80>
 80098ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80098ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ee:	602e      	str	r6, [r5, #0]
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d017      	beq.n	8009924 <__sflush_r+0xb8>
 80098f4:	0023      	movs	r3, r4
 80098f6:	3344      	adds	r3, #68	@ 0x44
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d002      	beq.n	8009902 <__sflush_r+0x96>
 80098fc:	0028      	movs	r0, r5
 80098fe:	f7ff f869 	bl	80089d4 <_free_r>
 8009902:	2300      	movs	r3, #0
 8009904:	6363      	str	r3, [r4, #52]	@ 0x34
 8009906:	e00d      	b.n	8009924 <__sflush_r+0xb8>
 8009908:	2301      	movs	r3, #1
 800990a:	0028      	movs	r0, r5
 800990c:	47b8      	blx	r7
 800990e:	0002      	movs	r2, r0
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d1c6      	bne.n	80098a2 <__sflush_r+0x36>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c3      	beq.n	80098a2 <__sflush_r+0x36>
 800991a:	2b1d      	cmp	r3, #29
 800991c:	d001      	beq.n	8009922 <__sflush_r+0xb6>
 800991e:	2b16      	cmp	r3, #22
 8009920:	d11a      	bne.n	8009958 <__sflush_r+0xec>
 8009922:	602e      	str	r6, [r5, #0]
 8009924:	2000      	movs	r0, #0
 8009926:	e01e      	b.n	8009966 <__sflush_r+0xfa>
 8009928:	690e      	ldr	r6, [r1, #16]
 800992a:	2e00      	cmp	r6, #0
 800992c:	d0fa      	beq.n	8009924 <__sflush_r+0xb8>
 800992e:	680f      	ldr	r7, [r1, #0]
 8009930:	600e      	str	r6, [r1, #0]
 8009932:	1bba      	subs	r2, r7, r6
 8009934:	9201      	str	r2, [sp, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	079b      	lsls	r3, r3, #30
 800993a:	d100      	bne.n	800993e <__sflush_r+0xd2>
 800993c:	694a      	ldr	r2, [r1, #20]
 800993e:	60a2      	str	r2, [r4, #8]
 8009940:	9b01      	ldr	r3, [sp, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	ddee      	ble.n	8009924 <__sflush_r+0xb8>
 8009946:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009948:	0032      	movs	r2, r6
 800994a:	001f      	movs	r7, r3
 800994c:	0028      	movs	r0, r5
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	6a21      	ldr	r1, [r4, #32]
 8009952:	47b8      	blx	r7
 8009954:	2800      	cmp	r0, #0
 8009956:	dc07      	bgt.n	8009968 <__sflush_r+0xfc>
 8009958:	89a2      	ldrh	r2, [r4, #12]
 800995a:	2340      	movs	r3, #64	@ 0x40
 800995c:	2001      	movs	r0, #1
 800995e:	4313      	orrs	r3, r2
 8009960:	b21b      	sxth	r3, r3
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	4240      	negs	r0, r0
 8009966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	1836      	adds	r6, r6, r0
 800996c:	1a1b      	subs	r3, r3, r0
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	e7e6      	b.n	8009940 <__sflush_r+0xd4>
 8009972:	46c0      	nop			@ (mov r8, r8)
 8009974:	dfbffffe 	.word	0xdfbffffe

08009978 <_fflush_r>:
 8009978:	690b      	ldr	r3, [r1, #16]
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	0005      	movs	r5, r0
 800997e:	000c      	movs	r4, r1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <_fflush_r+0x12>
 8009984:	2500      	movs	r5, #0
 8009986:	0028      	movs	r0, r5
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	2800      	cmp	r0, #0
 800998c:	d004      	beq.n	8009998 <_fflush_r+0x20>
 800998e:	6a03      	ldr	r3, [r0, #32]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <_fflush_r+0x20>
 8009994:	f7fe f850 	bl	8007a38 <__sinit>
 8009998:	220c      	movs	r2, #12
 800999a:	5ea3      	ldrsh	r3, [r4, r2]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0f1      	beq.n	8009984 <_fflush_r+0xc>
 80099a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099a2:	07d2      	lsls	r2, r2, #31
 80099a4:	d404      	bmi.n	80099b0 <_fflush_r+0x38>
 80099a6:	059b      	lsls	r3, r3, #22
 80099a8:	d402      	bmi.n	80099b0 <_fflush_r+0x38>
 80099aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ac:	f7fe f979 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 80099b0:	0028      	movs	r0, r5
 80099b2:	0021      	movs	r1, r4
 80099b4:	f7ff ff5a 	bl	800986c <__sflush_r>
 80099b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099ba:	0005      	movs	r5, r0
 80099bc:	07db      	lsls	r3, r3, #31
 80099be:	d4e2      	bmi.n	8009986 <_fflush_r+0xe>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	059b      	lsls	r3, r3, #22
 80099c4:	d4df      	bmi.n	8009986 <_fflush_r+0xe>
 80099c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c8:	f7fe f96c 	bl	8007ca4 <__retarget_lock_release_recursive>
 80099cc:	e7db      	b.n	8009986 <_fflush_r+0xe>

080099ce <__swbuf_r>:
 80099ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d0:	0006      	movs	r6, r0
 80099d2:	000d      	movs	r5, r1
 80099d4:	0014      	movs	r4, r2
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d004      	beq.n	80099e4 <__swbuf_r+0x16>
 80099da:	6a03      	ldr	r3, [r0, #32]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <__swbuf_r+0x16>
 80099e0:	f7fe f82a 	bl	8007a38 <__sinit>
 80099e4:	69a3      	ldr	r3, [r4, #24]
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	071b      	lsls	r3, r3, #28
 80099ec:	d502      	bpl.n	80099f4 <__swbuf_r+0x26>
 80099ee:	6923      	ldr	r3, [r4, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d109      	bne.n	8009a08 <__swbuf_r+0x3a>
 80099f4:	0021      	movs	r1, r4
 80099f6:	0030      	movs	r0, r6
 80099f8:	f000 f82c 	bl	8009a54 <__swsetup_r>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d003      	beq.n	8009a08 <__swbuf_r+0x3a>
 8009a00:	2501      	movs	r5, #1
 8009a02:	426d      	negs	r5, r5
 8009a04:	0028      	movs	r0, r5
 8009a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	6820      	ldr	r0, [r4, #0]
 8009a0c:	b2ef      	uxtb	r7, r5
 8009a0e:	1ac0      	subs	r0, r0, r3
 8009a10:	6963      	ldr	r3, [r4, #20]
 8009a12:	b2ed      	uxtb	r5, r5
 8009a14:	4283      	cmp	r3, r0
 8009a16:	dc05      	bgt.n	8009a24 <__swbuf_r+0x56>
 8009a18:	0021      	movs	r1, r4
 8009a1a:	0030      	movs	r0, r6
 8009a1c:	f7ff ffac 	bl	8009978 <_fflush_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d1ed      	bne.n	8009a00 <__swbuf_r+0x32>
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	3001      	adds	r0, #1
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	60a3      	str	r3, [r4, #8]
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	6022      	str	r2, [r4, #0]
 8009a32:	701f      	strb	r7, [r3, #0]
 8009a34:	6963      	ldr	r3, [r4, #20]
 8009a36:	4283      	cmp	r3, r0
 8009a38:	d004      	beq.n	8009a44 <__swbuf_r+0x76>
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	07db      	lsls	r3, r3, #31
 8009a3e:	d5e1      	bpl.n	8009a04 <__swbuf_r+0x36>
 8009a40:	2d0a      	cmp	r5, #10
 8009a42:	d1df      	bne.n	8009a04 <__swbuf_r+0x36>
 8009a44:	0021      	movs	r1, r4
 8009a46:	0030      	movs	r0, r6
 8009a48:	f7ff ff96 	bl	8009978 <_fflush_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d0d9      	beq.n	8009a04 <__swbuf_r+0x36>
 8009a50:	e7d6      	b.n	8009a00 <__swbuf_r+0x32>
	...

08009a54 <__swsetup_r>:
 8009a54:	4b2d      	ldr	r3, [pc, #180]	@ (8009b0c <__swsetup_r+0xb8>)
 8009a56:	b570      	push	{r4, r5, r6, lr}
 8009a58:	0005      	movs	r5, r0
 8009a5a:	6818      	ldr	r0, [r3, #0]
 8009a5c:	000c      	movs	r4, r1
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d004      	beq.n	8009a6c <__swsetup_r+0x18>
 8009a62:	6a03      	ldr	r3, [r0, #32]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <__swsetup_r+0x18>
 8009a68:	f7fd ffe6 	bl	8007a38 <__sinit>
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	5ee2      	ldrsh	r2, [r4, r3]
 8009a70:	0713      	lsls	r3, r2, #28
 8009a72:	d423      	bmi.n	8009abc <__swsetup_r+0x68>
 8009a74:	06d3      	lsls	r3, r2, #27
 8009a76:	d407      	bmi.n	8009a88 <__swsetup_r+0x34>
 8009a78:	2309      	movs	r3, #9
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	2340      	movs	r3, #64	@ 0x40
 8009a7e:	2001      	movs	r0, #1
 8009a80:	4313      	orrs	r3, r2
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	4240      	negs	r0, r0
 8009a86:	e03a      	b.n	8009afe <__swsetup_r+0xaa>
 8009a88:	0752      	lsls	r2, r2, #29
 8009a8a:	d513      	bpl.n	8009ab4 <__swsetup_r+0x60>
 8009a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a8e:	2900      	cmp	r1, #0
 8009a90:	d008      	beq.n	8009aa4 <__swsetup_r+0x50>
 8009a92:	0023      	movs	r3, r4
 8009a94:	3344      	adds	r3, #68	@ 0x44
 8009a96:	4299      	cmp	r1, r3
 8009a98:	d002      	beq.n	8009aa0 <__swsetup_r+0x4c>
 8009a9a:	0028      	movs	r0, r5
 8009a9c:	f7fe ff9a 	bl	80089d4 <_free_r>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aa4:	2224      	movs	r2, #36	@ 0x24
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	4393      	bics	r3, r2
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	2300      	movs	r3, #0
 8009aae:	6063      	str	r3, [r4, #4]
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	89a2      	ldrh	r2, [r4, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10b      	bne.n	8009ada <__swsetup_r+0x86>
 8009ac2:	21a0      	movs	r1, #160	@ 0xa0
 8009ac4:	2280      	movs	r2, #128	@ 0x80
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	0089      	lsls	r1, r1, #2
 8009aca:	0092      	lsls	r2, r2, #2
 8009acc:	400b      	ands	r3, r1
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d003      	beq.n	8009ada <__swsetup_r+0x86>
 8009ad2:	0021      	movs	r1, r4
 8009ad4:	0028      	movs	r0, r5
 8009ad6:	f000 f915 	bl	8009d04 <__smakebuf_r>
 8009ada:	230c      	movs	r3, #12
 8009adc:	5ee2      	ldrsh	r2, [r4, r3]
 8009ade:	2101      	movs	r1, #1
 8009ae0:	0013      	movs	r3, r2
 8009ae2:	400b      	ands	r3, r1
 8009ae4:	420a      	tst	r2, r1
 8009ae6:	d00b      	beq.n	8009b00 <__swsetup_r+0xac>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60a3      	str	r3, [r4, #8]
 8009aec:	6963      	ldr	r3, [r4, #20]
 8009aee:	425b      	negs	r3, r3
 8009af0:	61a3      	str	r3, [r4, #24]
 8009af2:	2000      	movs	r0, #0
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	4283      	cmp	r3, r0
 8009af8:	d101      	bne.n	8009afe <__swsetup_r+0xaa>
 8009afa:	0613      	lsls	r3, r2, #24
 8009afc:	d4be      	bmi.n	8009a7c <__swsetup_r+0x28>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	0791      	lsls	r1, r2, #30
 8009b02:	d400      	bmi.n	8009b06 <__swsetup_r+0xb2>
 8009b04:	6963      	ldr	r3, [r4, #20]
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	e7f3      	b.n	8009af2 <__swsetup_r+0x9e>
 8009b0a:	46c0      	nop			@ (mov r8, r8)
 8009b0c:	20000018 	.word	0x20000018

08009b10 <memmove>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4288      	cmp	r0, r1
 8009b14:	d806      	bhi.n	8009b24 <memmove+0x14>
 8009b16:	2300      	movs	r3, #0
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d008      	beq.n	8009b2e <memmove+0x1e>
 8009b1c:	5ccc      	ldrb	r4, [r1, r3]
 8009b1e:	54c4      	strb	r4, [r0, r3]
 8009b20:	3301      	adds	r3, #1
 8009b22:	e7f9      	b.n	8009b18 <memmove+0x8>
 8009b24:	188b      	adds	r3, r1, r2
 8009b26:	4298      	cmp	r0, r3
 8009b28:	d2f5      	bcs.n	8009b16 <memmove+0x6>
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	d200      	bcs.n	8009b30 <memmove+0x20>
 8009b2e:	bd10      	pop	{r4, pc}
 8009b30:	5c8b      	ldrb	r3, [r1, r2]
 8009b32:	5483      	strb	r3, [r0, r2]
 8009b34:	e7f9      	b.n	8009b2a <memmove+0x1a>
	...

08009b38 <_sbrk_r>:
 8009b38:	2300      	movs	r3, #0
 8009b3a:	b570      	push	{r4, r5, r6, lr}
 8009b3c:	4d06      	ldr	r5, [pc, #24]	@ (8009b58 <_sbrk_r+0x20>)
 8009b3e:	0004      	movs	r4, r0
 8009b40:	0008      	movs	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f9 f83e 	bl	8002bc4 <_sbrk>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d103      	bne.n	8009b54 <_sbrk_r+0x1c>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d000      	beq.n	8009b54 <_sbrk_r+0x1c>
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	46c0      	nop			@ (mov r8, r8)
 8009b58:	200006f4 	.word	0x200006f4

08009b5c <__assert_func>:
 8009b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009b5e:	0014      	movs	r4, r2
 8009b60:	001a      	movs	r2, r3
 8009b62:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <__assert_func+0x2c>)
 8009b64:	0005      	movs	r5, r0
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	000e      	movs	r6, r1
 8009b6a:	68d8      	ldr	r0, [r3, #12]
 8009b6c:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <__assert_func+0x30>)
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	d101      	bne.n	8009b76 <__assert_func+0x1a>
 8009b72:	4b07      	ldr	r3, [pc, #28]	@ (8009b90 <__assert_func+0x34>)
 8009b74:	001c      	movs	r4, r3
 8009b76:	4907      	ldr	r1, [pc, #28]	@ (8009b94 <__assert_func+0x38>)
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	9402      	str	r4, [sp, #8]
 8009b7c:	002b      	movs	r3, r5
 8009b7e:	9600      	str	r6, [sp, #0]
 8009b80:	f000 f886 	bl	8009c90 <fiprintf>
 8009b84:	f000 f924 	bl	8009dd0 <abort>
 8009b88:	20000018 	.word	0x20000018
 8009b8c:	0800af33 	.word	0x0800af33
 8009b90:	0800af6e 	.word	0x0800af6e
 8009b94:	0800af40 	.word	0x0800af40

08009b98 <_calloc_r>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	0c0b      	lsrs	r3, r1, #16
 8009b9c:	0c15      	lsrs	r5, r2, #16
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d11e      	bne.n	8009be0 <_calloc_r+0x48>
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	d10c      	bne.n	8009bc0 <_calloc_r+0x28>
 8009ba6:	b289      	uxth	r1, r1
 8009ba8:	b294      	uxth	r4, r2
 8009baa:	434c      	muls	r4, r1
 8009bac:	0021      	movs	r1, r4
 8009bae:	f7fe ff87 	bl	8008ac0 <_malloc_r>
 8009bb2:	1e05      	subs	r5, r0, #0
 8009bb4:	d01a      	beq.n	8009bec <_calloc_r+0x54>
 8009bb6:	0022      	movs	r2, r4
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f7fd ffed 	bl	8007b98 <memset>
 8009bbe:	e016      	b.n	8009bee <_calloc_r+0x56>
 8009bc0:	1c2b      	adds	r3, r5, #0
 8009bc2:	1c0c      	adds	r4, r1, #0
 8009bc4:	b289      	uxth	r1, r1
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	434a      	muls	r2, r1
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	b2a1      	uxth	r1, r4
 8009bce:	4359      	muls	r1, r3
 8009bd0:	0c14      	lsrs	r4, r2, #16
 8009bd2:	190c      	adds	r4, r1, r4
 8009bd4:	0c23      	lsrs	r3, r4, #16
 8009bd6:	d107      	bne.n	8009be8 <_calloc_r+0x50>
 8009bd8:	0424      	lsls	r4, r4, #16
 8009bda:	b292      	uxth	r2, r2
 8009bdc:	4314      	orrs	r4, r2
 8009bde:	e7e5      	b.n	8009bac <_calloc_r+0x14>
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	d101      	bne.n	8009be8 <_calloc_r+0x50>
 8009be4:	1c14      	adds	r4, r2, #0
 8009be6:	e7ed      	b.n	8009bc4 <_calloc_r+0x2c>
 8009be8:	230c      	movs	r3, #12
 8009bea:	6003      	str	r3, [r0, #0]
 8009bec:	2500      	movs	r5, #0
 8009bee:	0028      	movs	r0, r5
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}

08009bf2 <__ascii_mbtowc>:
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	2900      	cmp	r1, #0
 8009bf6:	d100      	bne.n	8009bfa <__ascii_mbtowc+0x8>
 8009bf8:	a901      	add	r1, sp, #4
 8009bfa:	1e10      	subs	r0, r2, #0
 8009bfc:	d006      	beq.n	8009c0c <__ascii_mbtowc+0x1a>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d006      	beq.n	8009c10 <__ascii_mbtowc+0x1e>
 8009c02:	7813      	ldrb	r3, [r2, #0]
 8009c04:	600b      	str	r3, [r1, #0]
 8009c06:	7810      	ldrb	r0, [r2, #0]
 8009c08:	1e43      	subs	r3, r0, #1
 8009c0a:	4198      	sbcs	r0, r3
 8009c0c:	b002      	add	sp, #8
 8009c0e:	4770      	bx	lr
 8009c10:	2002      	movs	r0, #2
 8009c12:	4240      	negs	r0, r0
 8009c14:	e7fa      	b.n	8009c0c <__ascii_mbtowc+0x1a>

08009c16 <_realloc_r>:
 8009c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c18:	0006      	movs	r6, r0
 8009c1a:	000c      	movs	r4, r1
 8009c1c:	0015      	movs	r5, r2
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	d105      	bne.n	8009c2e <_realloc_r+0x18>
 8009c22:	0011      	movs	r1, r2
 8009c24:	f7fe ff4c 	bl	8008ac0 <_malloc_r>
 8009c28:	0004      	movs	r4, r0
 8009c2a:	0020      	movs	r0, r4
 8009c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c2e:	2a00      	cmp	r2, #0
 8009c30:	d103      	bne.n	8009c3a <_realloc_r+0x24>
 8009c32:	f7fe fecf 	bl	80089d4 <_free_r>
 8009c36:	2400      	movs	r4, #0
 8009c38:	e7f7      	b.n	8009c2a <_realloc_r+0x14>
 8009c3a:	f000 f8d0 	bl	8009dde <_malloc_usable_size_r>
 8009c3e:	0007      	movs	r7, r0
 8009c40:	4285      	cmp	r5, r0
 8009c42:	d802      	bhi.n	8009c4a <_realloc_r+0x34>
 8009c44:	0843      	lsrs	r3, r0, #1
 8009c46:	42ab      	cmp	r3, r5
 8009c48:	d3ef      	bcc.n	8009c2a <_realloc_r+0x14>
 8009c4a:	0029      	movs	r1, r5
 8009c4c:	0030      	movs	r0, r6
 8009c4e:	f7fe ff37 	bl	8008ac0 <_malloc_r>
 8009c52:	9001      	str	r0, [sp, #4]
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d0ee      	beq.n	8009c36 <_realloc_r+0x20>
 8009c58:	002a      	movs	r2, r5
 8009c5a:	42bd      	cmp	r5, r7
 8009c5c:	d900      	bls.n	8009c60 <_realloc_r+0x4a>
 8009c5e:	003a      	movs	r2, r7
 8009c60:	0021      	movs	r1, r4
 8009c62:	9801      	ldr	r0, [sp, #4]
 8009c64:	f7fe f82a 	bl	8007cbc <memcpy>
 8009c68:	0021      	movs	r1, r4
 8009c6a:	0030      	movs	r0, r6
 8009c6c:	f7fe feb2 	bl	80089d4 <_free_r>
 8009c70:	9c01      	ldr	r4, [sp, #4]
 8009c72:	e7da      	b.n	8009c2a <_realloc_r+0x14>

08009c74 <__ascii_wctomb>:
 8009c74:	0003      	movs	r3, r0
 8009c76:	1e08      	subs	r0, r1, #0
 8009c78:	d005      	beq.n	8009c86 <__ascii_wctomb+0x12>
 8009c7a:	2aff      	cmp	r2, #255	@ 0xff
 8009c7c:	d904      	bls.n	8009c88 <__ascii_wctomb+0x14>
 8009c7e:	228a      	movs	r2, #138	@ 0x8a
 8009c80:	2001      	movs	r0, #1
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	4240      	negs	r0, r0
 8009c86:	4770      	bx	lr
 8009c88:	2001      	movs	r0, #1
 8009c8a:	700a      	strb	r2, [r1, #0]
 8009c8c:	e7fb      	b.n	8009c86 <__ascii_wctomb+0x12>
	...

08009c90 <fiprintf>:
 8009c90:	b40e      	push	{r1, r2, r3}
 8009c92:	b517      	push	{r0, r1, r2, r4, lr}
 8009c94:	4c05      	ldr	r4, [pc, #20]	@ (8009cac <fiprintf+0x1c>)
 8009c96:	ab05      	add	r3, sp, #20
 8009c98:	cb04      	ldmia	r3!, {r2}
 8009c9a:	0001      	movs	r1, r0
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	f7ff fcc8 	bl	8009634 <_vfiprintf_r>
 8009ca4:	bc1e      	pop	{r1, r2, r3, r4}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	b003      	add	sp, #12
 8009caa:	4718      	bx	r3
 8009cac:	20000018 	.word	0x20000018

08009cb0 <__swhatbuf_r>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	000e      	movs	r6, r1
 8009cb4:	001d      	movs	r5, r3
 8009cb6:	230e      	movs	r3, #14
 8009cb8:	5ec9      	ldrsh	r1, [r1, r3]
 8009cba:	0014      	movs	r4, r2
 8009cbc:	b096      	sub	sp, #88	@ 0x58
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	da0c      	bge.n	8009cdc <__swhatbuf_r+0x2c>
 8009cc2:	89b2      	ldrh	r2, [r6, #12]
 8009cc4:	2380      	movs	r3, #128	@ 0x80
 8009cc6:	0011      	movs	r1, r2
 8009cc8:	4019      	ands	r1, r3
 8009cca:	421a      	tst	r2, r3
 8009ccc:	d114      	bne.n	8009cf8 <__swhatbuf_r+0x48>
 8009cce:	2380      	movs	r3, #128	@ 0x80
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	6029      	str	r1, [r5, #0]
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	b016      	add	sp, #88	@ 0x58
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	466a      	mov	r2, sp
 8009cde:	f000 f853 	bl	8009d88 <_fstat_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	dbed      	blt.n	8009cc2 <__swhatbuf_r+0x12>
 8009ce6:	23f0      	movs	r3, #240	@ 0xf0
 8009ce8:	9901      	ldr	r1, [sp, #4]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	4019      	ands	r1, r3
 8009cee:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <__swhatbuf_r+0x50>)
 8009cf0:	18c9      	adds	r1, r1, r3
 8009cf2:	424b      	negs	r3, r1
 8009cf4:	4159      	adcs	r1, r3
 8009cf6:	e7ea      	b.n	8009cce <__swhatbuf_r+0x1e>
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	2340      	movs	r3, #64	@ 0x40
 8009cfc:	e7e9      	b.n	8009cd2 <__swhatbuf_r+0x22>
 8009cfe:	46c0      	nop			@ (mov r8, r8)
 8009d00:	ffffe000 	.word	0xffffe000

08009d04 <__smakebuf_r>:
 8009d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d06:	2602      	movs	r6, #2
 8009d08:	898b      	ldrh	r3, [r1, #12]
 8009d0a:	0005      	movs	r5, r0
 8009d0c:	000c      	movs	r4, r1
 8009d0e:	b085      	sub	sp, #20
 8009d10:	4233      	tst	r3, r6
 8009d12:	d007      	beq.n	8009d24 <__smakebuf_r+0x20>
 8009d14:	0023      	movs	r3, r4
 8009d16:	3347      	adds	r3, #71	@ 0x47
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	6123      	str	r3, [r4, #16]
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	6163      	str	r3, [r4, #20]
 8009d20:	b005      	add	sp, #20
 8009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d24:	ab03      	add	r3, sp, #12
 8009d26:	aa02      	add	r2, sp, #8
 8009d28:	f7ff ffc2 	bl	8009cb0 <__swhatbuf_r>
 8009d2c:	9f02      	ldr	r7, [sp, #8]
 8009d2e:	9001      	str	r0, [sp, #4]
 8009d30:	0039      	movs	r1, r7
 8009d32:	0028      	movs	r0, r5
 8009d34:	f7fe fec4 	bl	8008ac0 <_malloc_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d108      	bne.n	8009d4e <__smakebuf_r+0x4a>
 8009d3c:	220c      	movs	r2, #12
 8009d3e:	5ea3      	ldrsh	r3, [r4, r2]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d4ed      	bmi.n	8009d20 <__smakebuf_r+0x1c>
 8009d44:	2203      	movs	r2, #3
 8009d46:	4393      	bics	r3, r2
 8009d48:	431e      	orrs	r6, r3
 8009d4a:	81a6      	strh	r6, [r4, #12]
 8009d4c:	e7e2      	b.n	8009d14 <__smakebuf_r+0x10>
 8009d4e:	2380      	movs	r3, #128	@ 0x80
 8009d50:	89a2      	ldrh	r2, [r4, #12]
 8009d52:	6020      	str	r0, [r4, #0]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	9b03      	ldr	r3, [sp, #12]
 8009d5a:	6120      	str	r0, [r4, #16]
 8009d5c:	6167      	str	r7, [r4, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00c      	beq.n	8009d7c <__smakebuf_r+0x78>
 8009d62:	0028      	movs	r0, r5
 8009d64:	230e      	movs	r3, #14
 8009d66:	5ee1      	ldrsh	r1, [r4, r3]
 8009d68:	f000 f820 	bl	8009dac <_isatty_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d005      	beq.n	8009d7c <__smakebuf_r+0x78>
 8009d70:	2303      	movs	r3, #3
 8009d72:	89a2      	ldrh	r2, [r4, #12]
 8009d74:	439a      	bics	r2, r3
 8009d76:	3b02      	subs	r3, #2
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	9a01      	ldr	r2, [sp, #4]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	e7cc      	b.n	8009d20 <__smakebuf_r+0x1c>
	...

08009d88 <_fstat_r>:
 8009d88:	2300      	movs	r3, #0
 8009d8a:	b570      	push	{r4, r5, r6, lr}
 8009d8c:	4d06      	ldr	r5, [pc, #24]	@ (8009da8 <_fstat_r+0x20>)
 8009d8e:	0004      	movs	r4, r0
 8009d90:	0008      	movs	r0, r1
 8009d92:	0011      	movs	r1, r2
 8009d94:	602b      	str	r3, [r5, #0]
 8009d96:	f7f8 fef2 	bl	8002b7e <_fstat>
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	d103      	bne.n	8009da6 <_fstat_r+0x1e>
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d000      	beq.n	8009da6 <_fstat_r+0x1e>
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	200006f4 	.word	0x200006f4

08009dac <_isatty_r>:
 8009dac:	2300      	movs	r3, #0
 8009dae:	b570      	push	{r4, r5, r6, lr}
 8009db0:	4d06      	ldr	r5, [pc, #24]	@ (8009dcc <_isatty_r+0x20>)
 8009db2:	0004      	movs	r4, r0
 8009db4:	0008      	movs	r0, r1
 8009db6:	602b      	str	r3, [r5, #0]
 8009db8:	f7f8 feef 	bl	8002b9a <_isatty>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d103      	bne.n	8009dc8 <_isatty_r+0x1c>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d000      	beq.n	8009dc8 <_isatty_r+0x1c>
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	200006f4 	.word	0x200006f4

08009dd0 <abort>:
 8009dd0:	2006      	movs	r0, #6
 8009dd2:	b510      	push	{r4, lr}
 8009dd4:	f000 f834 	bl	8009e40 <raise>
 8009dd8:	2001      	movs	r0, #1
 8009dda:	f7f8 fe80 	bl	8002ade <_exit>

08009dde <_malloc_usable_size_r>:
 8009dde:	1f0b      	subs	r3, r1, #4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	1f18      	subs	r0, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da01      	bge.n	8009dec <_malloc_usable_size_r+0xe>
 8009de8:	580b      	ldr	r3, [r1, r0]
 8009dea:	18c0      	adds	r0, r0, r3
 8009dec:	4770      	bx	lr

08009dee <_raise_r>:
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	0004      	movs	r4, r0
 8009df2:	000d      	movs	r5, r1
 8009df4:	291f      	cmp	r1, #31
 8009df6:	d904      	bls.n	8009e02 <_raise_r+0x14>
 8009df8:	2316      	movs	r3, #22
 8009dfa:	6003      	str	r3, [r0, #0]
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	4240      	negs	r0, r0
 8009e00:	bd70      	pop	{r4, r5, r6, pc}
 8009e02:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <_raise_r+0x24>
 8009e08:	008a      	lsls	r2, r1, #2
 8009e0a:	189b      	adds	r3, r3, r2
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	d108      	bne.n	8009e24 <_raise_r+0x36>
 8009e12:	0020      	movs	r0, r4
 8009e14:	f000 f830 	bl	8009e78 <_getpid_r>
 8009e18:	002a      	movs	r2, r5
 8009e1a:	0001      	movs	r1, r0
 8009e1c:	0020      	movs	r0, r4
 8009e1e:	f000 f819 	bl	8009e54 <_kill_r>
 8009e22:	e7ed      	b.n	8009e00 <_raise_r+0x12>
 8009e24:	2a01      	cmp	r2, #1
 8009e26:	d009      	beq.n	8009e3c <_raise_r+0x4e>
 8009e28:	1c51      	adds	r1, r2, #1
 8009e2a:	d103      	bne.n	8009e34 <_raise_r+0x46>
 8009e2c:	2316      	movs	r3, #22
 8009e2e:	6003      	str	r3, [r0, #0]
 8009e30:	2001      	movs	r0, #1
 8009e32:	e7e5      	b.n	8009e00 <_raise_r+0x12>
 8009e34:	2100      	movs	r1, #0
 8009e36:	0028      	movs	r0, r5
 8009e38:	6019      	str	r1, [r3, #0]
 8009e3a:	4790      	blx	r2
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e7df      	b.n	8009e00 <_raise_r+0x12>

08009e40 <raise>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	4b03      	ldr	r3, [pc, #12]	@ (8009e50 <raise+0x10>)
 8009e44:	0001      	movs	r1, r0
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	f7ff ffd1 	bl	8009dee <_raise_r>
 8009e4c:	bd10      	pop	{r4, pc}
 8009e4e:	46c0      	nop			@ (mov r8, r8)
 8009e50:	20000018 	.word	0x20000018

08009e54 <_kill_r>:
 8009e54:	2300      	movs	r3, #0
 8009e56:	b570      	push	{r4, r5, r6, lr}
 8009e58:	4d06      	ldr	r5, [pc, #24]	@ (8009e74 <_kill_r+0x20>)
 8009e5a:	0004      	movs	r4, r0
 8009e5c:	0008      	movs	r0, r1
 8009e5e:	0011      	movs	r1, r2
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f7f8 fe2c 	bl	8002abe <_kill>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	d103      	bne.n	8009e72 <_kill_r+0x1e>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d000      	beq.n	8009e72 <_kill_r+0x1e>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	200006f4 	.word	0x200006f4

08009e78 <_getpid_r>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	f7f8 fe1a 	bl	8002ab2 <_getpid>
 8009e7e:	bd10      	pop	{r4, pc}

08009e80 <_init>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	46c0      	nop			@ (mov r8, r8)
 8009e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e86:	bc08      	pop	{r3}
 8009e88:	469e      	mov	lr, r3
 8009e8a:	4770      	bx	lr

08009e8c <_fini>:
 8009e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8e:	46c0      	nop			@ (mov r8, r8)
 8009e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e92:	bc08      	pop	{r3}
 8009e94:	469e      	mov	lr, r3
 8009e96:	4770      	bx	lr
